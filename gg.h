#pragma once

/*
** ゲームグラフィックス特論用補助プログラム GLFW3 版
**

Copyright (c) 2011-2017 Kohe Tokoi. All Rights Reserved.

Permission is hereby granted, free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction,  including without limitation the rights
to use, copy,  modify, merge,  publish, distribute,  sublicense,  and/or sell
copies or substantial portions of the Software.

The above  copyright notice  and this permission notice  shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE  IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY KIND,  EXPRESS OR
IMPLIED,  INCLUDING  BUT  NOT LIMITED  TO THE WARRANTIES  OF MERCHANTABILITY,
FITNESS  FOR  A PARTICULAR PURPOSE  AND NONINFRINGEMENT.  IN  NO EVENT  SHALL
KOHE TOKOI  BE LIABLE FOR ANY CLAIM,  DAMAGES OR OTHER LIABILITY,  WHETHER IN
AN ACTION  OF CONTRACT,  TORT  OR  OTHERWISE,  ARISING  FROM,  OUT OF  OR  IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**
*/

#if defined(_WIN32)
#  pragma warning(disable:4996)
#  define _USE_MATH_DEFINES
#  define NOMINMAX
#elif defined(__APPLE__)
#  define GLFW_INCLUDE_GLCOREARB
#  define GLFW_INCLUDE_GLEXT
#elif defined(X11)
#  define GL_GLEXT_PROTOTYPES
#  define GLFW_INCLUDE_GLEXT
#else
#  error "This platform is not supported."
#endif

#include "glfw3.h"

#if defined(_WIN32)
#  include "glext.h"
#  undef APIENTRY
extern PFNGLACCUMXOESPROC glAccumxOES;
extern PFNGLACTIVEPROGRAMEXTPROC glActiveProgramEXT;
extern PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
extern PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT;
extern PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
extern PFNGLACTIVETEXTUREPROC glActiveTexture;
extern PFNGLACTIVEVARYINGNVPROC glActiveVaryingNV;
extern PFNGLALPHAFRAGMENTOP1ATIPROC glAlphaFragmentOp1ATI;
extern PFNGLALPHAFRAGMENTOP2ATIPROC glAlphaFragmentOp2ATI;
extern PFNGLALPHAFRAGMENTOP3ATIPROC glAlphaFragmentOp3ATI;
extern PFNGLALPHAFUNCXOESPROC glAlphaFuncxOES;
extern PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC glAlphaToCoverageDitherControlNV;
extern PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC glApplyFramebufferAttachmentCMAAINTEL;
extern PFNGLAPPLYTEXTUREEXTPROC glApplyTextureEXT;
extern PFNGLAREPROGRAMSRESIDENTNVPROC glAreProgramsResidentNV;
extern PFNGLARETEXTURESRESIDENTEXTPROC glAreTexturesResidentEXT;
extern PFNGLARRAYELEMENTEXTPROC glArrayElementEXT;
extern PFNGLARRAYOBJECTATIPROC glArrayObjectATI;
extern PFNGLASYNCMARKERSGIXPROC glAsyncMarkerSGIX;
extern PFNGLATTACHOBJECTARBPROC glAttachObjectARB;
extern PFNGLATTACHSHADERPROC glAttachShader;
extern PFNGLBEGINCONDITIONALRENDERNVPROC glBeginConditionalRenderNV;
extern PFNGLBEGINCONDITIONALRENDERNVXPROC glBeginConditionalRenderNVX;
extern PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
extern PFNGLBEGINFRAGMENTSHADERATIPROC glBeginFragmentShaderATI;
extern PFNGLBEGINOCCLUSIONQUERYNVPROC glBeginOcclusionQueryNV;
extern PFNGLBEGINPERFMONITORAMDPROC glBeginPerfMonitorAMD;
extern PFNGLBEGINPERFQUERYINTELPROC glBeginPerfQueryINTEL;
extern PFNGLBEGINQUERYARBPROC glBeginQueryARB;
extern PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
extern PFNGLBEGINQUERYPROC glBeginQuery;
extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glBeginTransformFeedbackEXT;
extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glBeginTransformFeedbackNV;
extern PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
extern PFNGLBEGINVERTEXSHADEREXTPROC glBeginVertexShaderEXT;
extern PFNGLBEGINVIDEOCAPTURENVPROC glBeginVideoCaptureNV;
extern PFNGLBINDATTRIBLOCATIONARBPROC glBindAttribLocationARB;
extern PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
extern PFNGLBINDBUFFERARBPROC glBindBufferARB;
extern PFNGLBINDBUFFERBASEEXTPROC glBindBufferBaseEXT;
extern PFNGLBINDBUFFERBASENVPROC glBindBufferBaseNV;
extern PFNGLBINDBUFFERBASEPROC glBindBufferBase;
extern PFNGLBINDBUFFEROFFSETEXTPROC glBindBufferOffsetEXT;
extern PFNGLBINDBUFFEROFFSETNVPROC glBindBufferOffsetNV;
extern PFNGLBINDBUFFERPROC glBindBuffer;
extern PFNGLBINDBUFFERRANGEEXTPROC glBindBufferRangeEXT;
extern PFNGLBINDBUFFERRANGENVPROC glBindBufferRangeNV;
extern PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
extern PFNGLBINDBUFFERSBASEPROC glBindBuffersBase;
extern PFNGLBINDBUFFERSRANGEPROC glBindBuffersRange;
extern PFNGLBINDFRAGDATALOCATIONEXTPROC glBindFragDataLocationEXT;
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
extern PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
extern PFNGLBINDFRAGMENTSHADERATIPROC glBindFragmentShaderATI;
extern PFNGLBINDFRAMEBUFFEREXTPROC glBindFramebufferEXT;
extern PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
extern PFNGLBINDIMAGETEXTUREEXTPROC glBindImageTextureEXT;
extern PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
extern PFNGLBINDIMAGETEXTURESPROC glBindImageTextures;
extern PFNGLBINDLIGHTPARAMETEREXTPROC glBindLightParameterEXT;
extern PFNGLBINDMATERIALPARAMETEREXTPROC glBindMaterialParameterEXT;
extern PFNGLBINDMULTITEXTUREEXTPROC glBindMultiTextureEXT;
extern PFNGLBINDPARAMETEREXTPROC glBindParameterEXT;
extern PFNGLBINDPROGRAMARBPROC glBindProgramARB;
extern PFNGLBINDPROGRAMNVPROC glBindProgramNV;
extern PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
extern PFNGLBINDRENDERBUFFEREXTPROC glBindRenderbufferEXT;
extern PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
extern PFNGLBINDSAMPLERPROC glBindSampler;
extern PFNGLBINDSAMPLERSPROC glBindSamplers;
extern PFNGLBINDTEXGENPARAMETEREXTPROC glBindTexGenParameterEXT;
extern PFNGLBINDTEXTUREEXTPROC glBindTextureEXT;
extern PFNGLBINDTEXTURESPROC glBindTextures;
extern PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glBindTextureUnitParameterEXT;
extern PFNGLBINDTEXTUREUNITPROC glBindTextureUnit;
extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glBindTransformFeedbackNV;
extern PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
extern PFNGLBINDVERTEXARRAYAPPLEPROC glBindVertexArrayAPPLE;
extern PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
extern PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
extern PFNGLBINDVERTEXBUFFERSPROC glBindVertexBuffers;
extern PFNGLBINDVERTEXSHADEREXTPROC glBindVertexShaderEXT;
extern PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glBindVideoCaptureStreamBufferNV;
extern PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glBindVideoCaptureStreamTextureNV;
extern PFNGLBINORMAL3BEXTPROC glBinormal3bEXT;
extern PFNGLBINORMAL3BVEXTPROC glBinormal3bvEXT;
extern PFNGLBINORMAL3DEXTPROC glBinormal3dEXT;
extern PFNGLBINORMAL3DVEXTPROC glBinormal3dvEXT;
extern PFNGLBINORMAL3FEXTPROC glBinormal3fEXT;
extern PFNGLBINORMAL3FVEXTPROC glBinormal3fvEXT;
extern PFNGLBINORMAL3IEXTPROC glBinormal3iEXT;
extern PFNGLBINORMAL3IVEXTPROC glBinormal3ivEXT;
extern PFNGLBINORMAL3SEXTPROC glBinormal3sEXT;
extern PFNGLBINORMAL3SVEXTPROC glBinormal3svEXT;
extern PFNGLBINORMALPOINTEREXTPROC glBinormalPointerEXT;
extern PFNGLBITMAPXOESPROC glBitmapxOES;
extern PFNGLBLENDBARRIERKHRPROC glBlendBarrierKHR;
extern PFNGLBLENDBARRIERNVPROC glBlendBarrierNV;
extern PFNGLBLENDCOLOREXTPROC glBlendColorEXT;
extern PFNGLBLENDCOLORPROC glBlendColor;
extern PFNGLBLENDCOLORXOESPROC glBlendColorxOES;
extern PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT;
extern PFNGLBLENDEQUATIONIARBPROC glBlendEquationiARB;
extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glBlendEquationIndexedAMD;
extern PFNGLBLENDEQUATIONIPROC glBlendEquationi;
extern PFNGLBLENDEQUATIONPROC glBlendEquation;
extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glBlendEquationSeparateEXT;
extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glBlendEquationSeparateiARB;
extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glBlendEquationSeparateIndexedAMD;
extern PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
extern PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
extern PFNGLBLENDFUNCIARBPROC glBlendFunciARB;
extern PFNGLBLENDFUNCINDEXEDAMDPROC glBlendFuncIndexedAMD;
extern PFNGLBLENDFUNCIPROC glBlendFunci;
extern PFNGLBLENDFUNCSEPARATEEXTPROC glBlendFuncSeparateEXT;
extern PFNGLBLENDFUNCSEPARATEIARBPROC glBlendFuncSeparateiARB;
extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glBlendFuncSeparateIndexedAMD;
extern PFNGLBLENDFUNCSEPARATEINGRPROC glBlendFuncSeparateINGR;
extern PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
extern PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
extern PFNGLBLENDPARAMETERINVPROC glBlendParameteriNV;
extern PFNGLBLITFRAMEBUFFEREXTPROC glBlitFramebufferEXT;
extern PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
extern PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer;
extern PFNGLBUFFERADDRESSRANGENVPROC glBufferAddressRangeNV;
extern PFNGLBUFFERDATAARBPROC glBufferDataARB;
extern PFNGLBUFFERDATAPROC glBufferData;
extern PFNGLBUFFERPAGECOMMITMENTARBPROC glBufferPageCommitmentARB;
extern PFNGLBUFFERPARAMETERIAPPLEPROC glBufferParameteriAPPLE;
extern PFNGLBUFFERSTORAGEPROC glBufferStorage;
extern PFNGLBUFFERSUBDATAARBPROC glBufferSubDataARB;
extern PFNGLBUFFERSUBDATAPROC glBufferSubData;
extern PFNGLCALLCOMMANDLISTNVPROC glCallCommandListNV;
extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glCheckFramebufferStatusEXT;
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glCheckNamedFramebufferStatusEXT;
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus;
extern PFNGLCLAMPCOLORARBPROC glClampColorARB;
extern PFNGLCLAMPCOLORPROC glClampColor;
extern PFNGLCLEARACCUMXOESPROC glClearAccumxOES;
extern PFNGLCLEARBUFFERDATAPROC glClearBufferData;
extern PFNGLCLEARBUFFERFIPROC glClearBufferfi;
extern PFNGLCLEARBUFFERFVPROC glClearBufferfv;
extern PFNGLCLEARBUFFERIVPROC glClearBufferiv;
extern PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
extern PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
extern PFNGLCLEARCOLORIIEXTPROC glClearColorIiEXT;
extern PFNGLCLEARCOLORIUIEXTPROC glClearColorIuiEXT;
extern PFNGLCLEARCOLORXOESPROC glClearColorxOES;
extern PFNGLCLEARDEPTHDNVPROC glClearDepthdNV;
extern PFNGLCLEARDEPTHFOESPROC glClearDepthfOES;
extern PFNGLCLEARDEPTHFPROC glClearDepthf;
extern PFNGLCLEARDEPTHXOESPROC glClearDepthxOES;
extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glClearNamedBufferDataEXT;
extern PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData;
extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glClearNamedBufferSubDataEXT;
extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData;
extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi;
extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv;
extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv;
extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv;
extern PFNGLCLEARTEXIMAGEPROC glClearTexImage;
extern PFNGLCLEARTEXSUBIMAGEPROC glClearTexSubImage;
extern PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB;
extern PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture;
extern PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glClientActiveVertexStreamATI;
extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glClientAttribDefaultEXT;
extern PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
extern PFNGLCLIPCONTROLPROC glClipControl;
extern PFNGLCLIPPLANEFOESPROC glClipPlanefOES;
extern PFNGLCLIPPLANEXOESPROC glClipPlanexOES;
extern PFNGLCOLOR3FVERTEX3FSUNPROC glColor3fVertex3fSUN;
extern PFNGLCOLOR3FVERTEX3FVSUNPROC glColor3fVertex3fvSUN;
extern PFNGLCOLOR3HNVPROC glColor3hNV;
extern PFNGLCOLOR3HVNVPROC glColor3hvNV;
extern PFNGLCOLOR3XOESPROC glColor3xOES;
extern PFNGLCOLOR3XVOESPROC glColor3xvOES;
extern PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glColor4fNormal3fVertex3fSUN;
extern PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glColor4fNormal3fVertex3fvSUN;
extern PFNGLCOLOR4HNVPROC glColor4hNV;
extern PFNGLCOLOR4HVNVPROC glColor4hvNV;
extern PFNGLCOLOR4UBVERTEX2FSUNPROC glColor4ubVertex2fSUN;
extern PFNGLCOLOR4UBVERTEX2FVSUNPROC glColor4ubVertex2fvSUN;
extern PFNGLCOLOR4UBVERTEX3FSUNPROC glColor4ubVertex3fSUN;
extern PFNGLCOLOR4UBVERTEX3FVSUNPROC glColor4ubVertex3fvSUN;
extern PFNGLCOLOR4XOESPROC glColor4xOES;
extern PFNGLCOLOR4XVOESPROC glColor4xvOES;
extern PFNGLCOLORFORMATNVPROC glColorFormatNV;
extern PFNGLCOLORFRAGMENTOP1ATIPROC glColorFragmentOp1ATI;
extern PFNGLCOLORFRAGMENTOP2ATIPROC glColorFragmentOp2ATI;
extern PFNGLCOLORFRAGMENTOP3ATIPROC glColorFragmentOp3ATI;
extern PFNGLCOLORMASKINDEXEDEXTPROC glColorMaskIndexedEXT;
extern PFNGLCOLORMASKIPROC glColorMaski;
extern PFNGLCOLORP3UIPROC glColorP3ui;
extern PFNGLCOLORP3UIVPROC glColorP3uiv;
extern PFNGLCOLORP4UIPROC glColorP4ui;
extern PFNGLCOLORP4UIVPROC glColorP4uiv;
extern PFNGLCOLORPOINTEREXTPROC glColorPointerEXT;
extern PFNGLCOLORPOINTERLISTIBMPROC glColorPointerListIBM;
extern PFNGLCOLORPOINTERVINTELPROC glColorPointervINTEL;
extern PFNGLCOLORSUBTABLEEXTPROC glColorSubTableEXT;
extern PFNGLCOLORSUBTABLEPROC glColorSubTable;
extern PFNGLCOLORTABLEEXTPROC glColorTableEXT;
extern PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
extern PFNGLCOLORTABLEPARAMETERFVSGIPROC glColorTableParameterfvSGI;
extern PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
extern PFNGLCOLORTABLEPARAMETERIVSGIPROC glColorTableParameterivSGI;
extern PFNGLCOLORTABLEPROC glColorTable;
extern PFNGLCOLORTABLESGIPROC glColorTableSGI;
extern PFNGLCOMBINERINPUTNVPROC glCombinerInputNV;
extern PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV;
extern PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV;
extern PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV;
extern PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV;
extern PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV;
extern PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glCombinerStageParameterfvNV;
extern PFNGLCOMMANDLISTSEGMENTSNVPROC glCommandListSegmentsNV;
extern PFNGLCOMPILECOMMANDLISTNVPROC glCompileCommandListNV;
extern PFNGLCOMPILESHADERARBPROC glCompileShaderARB;
extern PFNGLCOMPILESHADERINCLUDEARBPROC glCompileShaderIncludeARB;
extern PFNGLCOMPILESHADERPROC glCompileShader;
extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glCompressedMultiTexImage1DEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glCompressedMultiTexImage2DEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glCompressedMultiTexImage3DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glCompressedMultiTexSubImage1DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glCompressedMultiTexSubImage2DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glCompressedMultiTexSubImage3DEXT;
extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB;
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB;
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB;
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glCompressedTexSubImage1DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glCompressedTexSubImage2DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glCompressedTexSubImage3DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glCompressedTextureImage1DEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glCompressedTextureImage2DEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glCompressedTextureImage3DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glCompressedTextureSubImage1DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glCompressedTextureSubImage2DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glCompressedTextureSubImage3DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D;
extern PFNGLCONSERVATIVERASTERPARAMETERFNVPROC glConservativeRasterParameterfNV;
extern PFNGLCONSERVATIVERASTERPARAMETERINVPROC glConservativeRasterParameteriNV;
extern PFNGLCONVOLUTIONFILTER1DEXTPROC glConvolutionFilter1DEXT;
extern PFNGLCONVOLUTIONFILTER1DPROC glConvolutionFilter1D;
extern PFNGLCONVOLUTIONFILTER2DEXTPROC glConvolutionFilter2DEXT;
extern PFNGLCONVOLUTIONFILTER2DPROC glConvolutionFilter2D;
extern PFNGLCONVOLUTIONPARAMETERFEXTPROC glConvolutionParameterfEXT;
extern PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
extern PFNGLCONVOLUTIONPARAMETERFVEXTPROC glConvolutionParameterfvEXT;
extern PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
extern PFNGLCONVOLUTIONPARAMETERIEXTPROC glConvolutionParameteriEXT;
extern PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
extern PFNGLCONVOLUTIONPARAMETERIVEXTPROC glConvolutionParameterivEXT;
extern PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
extern PFNGLCONVOLUTIONPARAMETERXOESPROC glConvolutionParameterxOES;
extern PFNGLCONVOLUTIONPARAMETERXVOESPROC glConvolutionParameterxvOES;
extern PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
extern PFNGLCOPYCOLORSUBTABLEEXTPROC glCopyColorSubTableEXT;
extern PFNGLCOPYCOLORSUBTABLEPROC glCopyColorSubTable;
extern PFNGLCOPYCOLORTABLEPROC glCopyColorTable;
extern PFNGLCOPYCOLORTABLESGIPROC glCopyColorTableSGI;
extern PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glCopyConvolutionFilter1DEXT;
extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glCopyConvolutionFilter1D;
extern PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glCopyConvolutionFilter2DEXT;
extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glCopyConvolutionFilter2D;
extern PFNGLCOPYIMAGESUBDATANVPROC glCopyImageSubDataNV;
extern PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glCopyMultiTexImage1DEXT;
extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glCopyMultiTexImage2DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glCopyMultiTexSubImage1DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glCopyMultiTexSubImage2DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glCopyMultiTexSubImage3DEXT;
extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData;
extern PFNGLCOPYPATHNVPROC glCopyPathNV;
extern PFNGLCOPYTEXIMAGE1DEXTPROC glCopyTexImage1DEXT;
extern PFNGLCOPYTEXIMAGE2DEXTPROC glCopyTexImage2DEXT;
extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glCopyTexSubImage1DEXT;
extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glCopyTexSubImage2DEXT;
extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glCopyTexSubImage3DEXT;
extern PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;
extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glCopyTextureImage1DEXT;
extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glCopyTextureImage2DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glCopyTextureSubImage1DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D;
extern PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glCopyTextureSubImage2DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D;
extern PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glCopyTextureSubImage3DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D;
extern PFNGLCOVERAGEMODULATIONNVPROC glCoverageModulationNV;
extern PFNGLCOVERAGEMODULATIONTABLENVPROC glCoverageModulationTableNV;
extern PFNGLCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
extern PFNGLCOVERFILLPATHNVPROC glCoverFillPathNV;
extern PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
extern PFNGLCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
extern PFNGLCREATEBUFFERSPROC glCreateBuffers;
extern PFNGLCREATECOMMANDLISTSNVPROC glCreateCommandListsNV;
extern PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers;
extern PFNGLCREATEPERFQUERYINTELPROC glCreatePerfQueryINTEL;
extern PFNGLCREATEPROGRAMOBJECTARBPROC glCreateProgramObjectARB;
extern PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines;
extern PFNGLCREATEPROGRAMPROC glCreateProgram;
extern PFNGLCREATEQUERIESPROC glCreateQueries;
extern PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers;
extern PFNGLCREATESAMPLERSPROC glCreateSamplers;
extern PFNGLCREATESHADEROBJECTARBPROC glCreateShaderObjectARB;
extern PFNGLCREATESHADERPROC glCreateShader;
extern PFNGLCREATESHADERPROGRAMEXTPROC glCreateShaderProgramEXT;
extern PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
extern PFNGLCREATESTATESNVPROC glCreateStatesNV;
extern PFNGLCREATESYNCFROMCLEVENTARBPROC glCreateSyncFromCLeventARB;
extern PFNGLCREATETEXTURESPROC glCreateTextures;
extern PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks;
extern PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays;
extern PFNGLCULLPARAMETERDVEXTPROC glCullParameterdvEXT;
extern PFNGLCULLPARAMETERFVEXTPROC glCullParameterfvEXT;
extern PFNGLCURRENTPALETTEMATRIXARBPROC glCurrentPaletteMatrixARB;
extern PFNGLDEBUGMESSAGECALLBACKAMDPROC glDebugMessageCallbackAMD;
extern PFNGLDEBUGMESSAGECALLBACKARBPROC glDebugMessageCallbackARB;
extern PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
extern PFNGLDEBUGMESSAGECONTROLARBPROC glDebugMessageControlARB;
extern PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
extern PFNGLDEBUGMESSAGEENABLEAMDPROC glDebugMessageEnableAMD;
extern PFNGLDEBUGMESSAGEINSERTAMDPROC glDebugMessageInsertAMD;
extern PFNGLDEBUGMESSAGEINSERTARBPROC glDebugMessageInsertARB;
extern PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
extern PFNGLDEFORMATIONMAP3DSGIXPROC glDeformationMap3dSGIX;
extern PFNGLDEFORMATIONMAP3FSGIXPROC glDeformationMap3fSGIX;
extern PFNGLDEFORMSGIXPROC glDeformSGIX;
extern PFNGLDELETEASYNCMARKERSSGIXPROC glDeleteAsyncMarkersSGIX;
extern PFNGLDELETEBUFFERSARBPROC glDeleteBuffersARB;
extern PFNGLDELETEBUFFERSPROC glDeleteBuffers;
extern PFNGLDELETECOMMANDLISTSNVPROC glDeleteCommandListsNV;
extern PFNGLDELETEFENCESAPPLEPROC glDeleteFencesAPPLE;
extern PFNGLDELETEFENCESNVPROC glDeleteFencesNV;
extern PFNGLDELETEFRAGMENTSHADERATIPROC glDeleteFragmentShaderATI;
extern PFNGLDELETEFRAMEBUFFERSEXTPROC glDeleteFramebuffersEXT;
extern PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
extern PFNGLDELETENAMEDSTRINGARBPROC glDeleteNamedStringARB;
extern PFNGLDELETENAMESAMDPROC glDeleteNamesAMD;
extern PFNGLDELETEOBJECTARBPROC glDeleteObjectARB;
extern PFNGLDELETEOCCLUSIONQUERIESNVPROC glDeleteOcclusionQueriesNV;
extern PFNGLDELETEPATHSNVPROC glDeletePathsNV;
extern PFNGLDELETEPERFMONITORSAMDPROC glDeletePerfMonitorsAMD;
extern PFNGLDELETEPERFQUERYINTELPROC glDeletePerfQueryINTEL;
extern PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
extern PFNGLDELETEPROGRAMPROC glDeleteProgram;
extern PFNGLDELETEPROGRAMSARBPROC glDeleteProgramsARB;
extern PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV;
extern PFNGLDELETEQUERIESARBPROC glDeleteQueriesARB;
extern PFNGLDELETEQUERIESPROC glDeleteQueries;
extern PFNGLDELETERENDERBUFFERSEXTPROC glDeleteRenderbuffersEXT;
extern PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
extern PFNGLDELETESAMPLERSPROC glDeleteSamplers;
extern PFNGLDELETESHADERPROC glDeleteShader;
extern PFNGLDELETESTATESNVPROC glDeleteStatesNV;
extern PFNGLDELETESYNCPROC glDeleteSync;
extern PFNGLDELETETEXTURESEXTPROC glDeleteTexturesEXT;
extern PFNGLDELETETRANSFORMFEEDBACKSNVPROC glDeleteTransformFeedbacksNV;
extern PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
extern PFNGLDELETEVERTEXARRAYSAPPLEPROC glDeleteVertexArraysAPPLE;
extern PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
extern PFNGLDELETEVERTEXSHADEREXTPROC glDeleteVertexShaderEXT;
extern PFNGLDEPTHBOUNDSDNVPROC glDepthBoundsdNV;
extern PFNGLDEPTHBOUNDSEXTPROC glDepthBoundsEXT;
extern PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
extern PFNGLDEPTHRANGEDNVPROC glDepthRangedNV;
extern PFNGLDEPTHRANGEFOESPROC glDepthRangefOES;
extern PFNGLDEPTHRANGEFPROC glDepthRangef;
extern PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
extern PFNGLDEPTHRANGEXOESPROC glDepthRangexOES;
extern PFNGLDETACHOBJECTARBPROC glDetachObjectARB;
extern PFNGLDETACHSHADERPROC glDetachShader;
extern PFNGLDETAILTEXFUNCSGISPROC glDetailTexFuncSGIS;
extern PFNGLDISABLECLIENTSTATEIEXTPROC glDisableClientStateiEXT;
extern PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glDisableClientStateIndexedEXT;
extern PFNGLDISABLEINDEXEDEXTPROC glDisableIndexedEXT;
extern PFNGLDISABLEIPROC glDisablei;
extern PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glDisableVariantClientStateEXT;
extern PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glDisableVertexArrayAttribEXT;
extern PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib;
extern PFNGLDISABLEVERTEXARRAYEXTPROC glDisableVertexArrayEXT;
extern PFNGLDISABLEVERTEXATTRIBAPPLEPROC glDisableVertexAttribAPPLE;
extern PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArrayARB;
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
extern PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glDispatchComputeGroupSizeARB;
extern PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
extern PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
extern PFNGLDRAWARRAYSEXTPROC glDrawArraysEXT;
extern PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
extern PFNGLDRAWARRAYSINSTANCEDARBPROC glDrawArraysInstancedARB;
extern PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
extern PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstancedEXT;
extern PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
extern PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB;
extern PFNGLDRAWBUFFERSATIPROC glDrawBuffersATI;
extern PFNGLDRAWBUFFERSPROC glDrawBuffers;
extern PFNGLDRAWCOMMANDSADDRESSNVPROC glDrawCommandsAddressNV;
extern PFNGLDRAWCOMMANDSNVPROC glDrawCommandsNV;
extern PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC glDrawCommandsStatesAddressNV;
extern PFNGLDRAWCOMMANDSSTATESNVPROC glDrawCommandsStatesNV;
extern PFNGLDRAWELEMENTARRAYAPPLEPROC glDrawElementArrayAPPLE;
extern PFNGLDRAWELEMENTARRAYATIPROC glDrawElementArrayATI;
extern PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
extern PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
extern PFNGLDRAWELEMENTSINSTANCEDARBPROC glDrawElementsInstancedARB;
extern PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
extern PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstancedEXT;
extern PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
extern PFNGLDRAWMESHARRAYSSUNPROC glDrawMeshArraysSUN;
extern PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glDrawRangeElementArrayAPPLE;
extern PFNGLDRAWRANGEELEMENTARRAYATIPROC glDrawRangeElementArrayATI;
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
extern PFNGLDRAWRANGEELEMENTSEXTPROC glDrawRangeElementsEXT;
extern PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
extern PFNGLDRAWTEXTURENVPROC glDrawTextureNV;
extern PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
extern PFNGLDRAWTRANSFORMFEEDBACKNVPROC glDrawTransformFeedbackNV;
extern PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
extern PFNGLDRAWVKIMAGENVPROC glDrawVkImageNV;
extern PFNGLEDGEFLAGFORMATNVPROC glEdgeFlagFormatNV;
extern PFNGLEDGEFLAGPOINTEREXTPROC glEdgeFlagPointerEXT;
extern PFNGLEDGEFLAGPOINTERLISTIBMPROC glEdgeFlagPointerListIBM;
extern PFNGLELEMENTPOINTERAPPLEPROC glElementPointerAPPLE;
extern PFNGLELEMENTPOINTERATIPROC glElementPointerATI;
extern PFNGLENABLECLIENTSTATEIEXTPROC glEnableClientStateiEXT;
extern PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glEnableClientStateIndexedEXT;
extern PFNGLENABLEINDEXEDEXTPROC glEnableIndexedEXT;
extern PFNGLENABLEIPROC glEnablei;
extern PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glEnableVariantClientStateEXT;
extern PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glEnableVertexArrayAttribEXT;
extern PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib;
extern PFNGLENABLEVERTEXARRAYEXTPROC glEnableVertexArrayEXT;
extern PFNGLENABLEVERTEXATTRIBAPPLEPROC glEnableVertexAttribAPPLE;
extern PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArrayARB;
extern PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
extern PFNGLENDCONDITIONALRENDERNVPROC glEndConditionalRenderNV;
extern PFNGLENDCONDITIONALRENDERNVXPROC glEndConditionalRenderNVX;
extern PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
extern PFNGLENDFRAGMENTSHADERATIPROC glEndFragmentShaderATI;
extern PFNGLENDOCCLUSIONQUERYNVPROC glEndOcclusionQueryNV;
extern PFNGLENDPERFMONITORAMDPROC glEndPerfMonitorAMD;
extern PFNGLENDPERFQUERYINTELPROC glEndPerfQueryINTEL;
extern PFNGLENDQUERYARBPROC glEndQueryARB;
extern PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
extern PFNGLENDQUERYPROC glEndQuery;
extern PFNGLENDTRANSFORMFEEDBACKEXTPROC glEndTransformFeedbackEXT;
extern PFNGLENDTRANSFORMFEEDBACKNVPROC glEndTransformFeedbackNV;
extern PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
extern PFNGLENDVERTEXSHADEREXTPROC glEndVertexShaderEXT;
extern PFNGLENDVIDEOCAPTURENVPROC glEndVideoCaptureNV;
extern PFNGLEVALCOORD1XOESPROC glEvalCoord1xOES;
extern PFNGLEVALCOORD1XVOESPROC glEvalCoord1xvOES;
extern PFNGLEVALCOORD2XOESPROC glEvalCoord2xOES;
extern PFNGLEVALCOORD2XVOESPROC glEvalCoord2xvOES;
extern PFNGLEVALMAPSNVPROC glEvalMapsNV;
extern PFNGLEVALUATEDEPTHVALUESARBPROC glEvaluateDepthValuesARB;
extern PFNGLEXECUTEPROGRAMNVPROC glExecuteProgramNV;
extern PFNGLEXTRACTCOMPONENTEXTPROC glExtractComponentEXT;
extern PFNGLFEEDBACKBUFFERXOESPROC glFeedbackBufferxOES;
extern PFNGLFENCESYNCPROC glFenceSync;
extern PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV;
extern PFNGLFINISHASYNCSGIXPROC glFinishAsyncSGIX;
extern PFNGLFINISHFENCEAPPLEPROC glFinishFenceAPPLE;
extern PFNGLFINISHFENCENVPROC glFinishFenceNV;
extern PFNGLFINISHOBJECTAPPLEPROC glFinishObjectAPPLE;
extern PFNGLFINISHTEXTURESUNXPROC glFinishTextureSUNX;
extern PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glFlushMappedBufferRangeAPPLE;
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glFlushMappedNamedBufferRangeEXT;
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange;
extern PFNGLFLUSHPIXELDATARANGENVPROC glFlushPixelDataRangeNV;
extern PFNGLFLUSHRASTERSGIXPROC glFlushRasterSGIX;
extern PFNGLFLUSHSTATICDATAIBMPROC glFlushStaticDataIBM;
extern PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glFlushVertexArrayRangeAPPLE;
extern PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV;
extern PFNGLFOGCOORDDEXTPROC glFogCoorddEXT;
extern PFNGLFOGCOORDDPROC glFogCoordd;
extern PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT;
extern PFNGLFOGCOORDDVPROC glFogCoorddv;
extern PFNGLFOGCOORDFEXTPROC glFogCoordfEXT;
extern PFNGLFOGCOORDFORMATNVPROC glFogCoordFormatNV;
extern PFNGLFOGCOORDFPROC glFogCoordf;
extern PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT;
extern PFNGLFOGCOORDFVPROC glFogCoordfv;
extern PFNGLFOGCOORDHNVPROC glFogCoordhNV;
extern PFNGLFOGCOORDHVNVPROC glFogCoordhvNV;
extern PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT;
extern PFNGLFOGCOORDPOINTERLISTIBMPROC glFogCoordPointerListIBM;
extern PFNGLFOGCOORDPOINTERPROC glFogCoordPointer;
extern PFNGLFOGFUNCSGISPROC glFogFuncSGIS;
extern PFNGLFOGXOESPROC glFogxOES;
extern PFNGLFOGXVOESPROC glFogxvOES;
extern PFNGLFRAGMENTCOLORMATERIALSGIXPROC glFragmentColorMaterialSGIX;
extern PFNGLFRAGMENTCOVERAGECOLORNVPROC glFragmentCoverageColorNV;
extern PFNGLFRAGMENTLIGHTFSGIXPROC glFragmentLightfSGIX;
extern PFNGLFRAGMENTLIGHTFVSGIXPROC glFragmentLightfvSGIX;
extern PFNGLFRAGMENTLIGHTISGIXPROC glFragmentLightiSGIX;
extern PFNGLFRAGMENTLIGHTIVSGIXPROC glFragmentLightivSGIX;
extern PFNGLFRAGMENTLIGHTMODELFSGIXPROC glFragmentLightModelfSGIX;
extern PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glFragmentLightModelfvSGIX;
extern PFNGLFRAGMENTLIGHTMODELISGIXPROC glFragmentLightModeliSGIX;
extern PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glFragmentLightModelivSGIX;
extern PFNGLFRAGMENTMATERIALFSGIXPROC glFragmentMaterialfSGIX;
extern PFNGLFRAGMENTMATERIALFVSGIXPROC glFragmentMaterialfvSGIX;
extern PFNGLFRAGMENTMATERIALISGIXPROC glFragmentMaterialiSGIX;
extern PFNGLFRAGMENTMATERIALIVSGIXPROC glFragmentMaterialivSGIX;
extern PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glFramebufferDrawBufferEXT;
extern PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glFramebufferDrawBuffersEXT;
extern PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
extern PFNGLFRAMEBUFFERREADBUFFEREXTPROC glFramebufferReadBufferEXT;
extern PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glFramebufferRenderbufferEXT;
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
extern PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glFramebufferSampleLocationsfvARB;
extern PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glFramebufferSampleLocationsfvNV;
extern PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC glFramebufferSamplePositionsfvAMD;
extern PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glFramebufferTexture1DEXT;
extern PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
extern PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glFramebufferTexture2DEXT;
extern PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
extern PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glFramebufferTexture3DEXT;
extern PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
extern PFNGLFRAMEBUFFERTEXTUREARBPROC glFramebufferTextureARB;
extern PFNGLFRAMEBUFFERTEXTUREEXTPROC glFramebufferTextureEXT;
extern PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glFramebufferTextureFaceARB;
extern PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glFramebufferTextureFaceEXT;
extern PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glFramebufferTextureLayerARB;
extern PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glFramebufferTextureLayerEXT;
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
extern PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC glFramebufferTextureMultiviewOVR;
extern PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
extern PFNGLFRAMETERMINATORGREMEDYPROC glFrameTerminatorGREMEDY;
extern PFNGLFRAMEZOOMSGIXPROC glFrameZoomSGIX;
extern PFNGLFREEOBJECTBUFFERATIPROC glFreeObjectBufferATI;
extern PFNGLFRUSTUMFOESPROC glFrustumfOES;
extern PFNGLFRUSTUMXOESPROC glFrustumxOES;
extern PFNGLGENASYNCMARKERSSGIXPROC glGenAsyncMarkersSGIX;
extern PFNGLGENBUFFERSARBPROC glGenBuffersARB;
extern PFNGLGENBUFFERSPROC glGenBuffers;
extern PFNGLGENERATEMIPMAPEXTPROC glGenerateMipmapEXT;
extern PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
extern PFNGLGENERATEMULTITEXMIPMAPEXTPROC glGenerateMultiTexMipmapEXT;
extern PFNGLGENERATETEXTUREMIPMAPEXTPROC glGenerateTextureMipmapEXT;
extern PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap;
extern PFNGLGENFENCESAPPLEPROC glGenFencesAPPLE;
extern PFNGLGENFENCESNVPROC glGenFencesNV;
extern PFNGLGENFRAGMENTSHADERSATIPROC glGenFragmentShadersATI;
extern PFNGLGENFRAMEBUFFERSEXTPROC glGenFramebuffersEXT;
extern PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
extern PFNGLGENNAMESAMDPROC glGenNamesAMD;
extern PFNGLGENOCCLUSIONQUERIESNVPROC glGenOcclusionQueriesNV;
extern PFNGLGENPATHSNVPROC glGenPathsNV;
extern PFNGLGENPERFMONITORSAMDPROC glGenPerfMonitorsAMD;
extern PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
extern PFNGLGENPROGRAMSARBPROC glGenProgramsARB;
extern PFNGLGENPROGRAMSNVPROC glGenProgramsNV;
extern PFNGLGENQUERIESARBPROC glGenQueriesARB;
extern PFNGLGENQUERIESPROC glGenQueries;
extern PFNGLGENRENDERBUFFERSEXTPROC glGenRenderbuffersEXT;
extern PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
extern PFNGLGENSAMPLERSPROC glGenSamplers;
extern PFNGLGENSYMBOLSEXTPROC glGenSymbolsEXT;
extern PFNGLGENTEXTURESEXTPROC glGenTexturesEXT;
extern PFNGLGENTRANSFORMFEEDBACKSNVPROC glGenTransformFeedbacksNV;
extern PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
extern PFNGLGENVERTEXARRAYSAPPLEPROC glGenVertexArraysAPPLE;
extern PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
extern PFNGLGENVERTEXSHADERSEXTPROC glGenVertexShadersEXT;
extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
extern PFNGLGETACTIVEATTRIBARBPROC glGetActiveAttribARB;
extern PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
extern PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
extern PFNGLGETACTIVEUNIFORMARBPROC glGetActiveUniformARB;
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
extern PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
extern PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
extern PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
extern PFNGLGETACTIVEVARYINGNVPROC glGetActiveVaryingNV;
extern PFNGLGETARRAYOBJECTFVATIPROC glGetArrayObjectfvATI;
extern PFNGLGETARRAYOBJECTIVATIPROC glGetArrayObjectivATI;
extern PFNGLGETATTACHEDOBJECTSARBPROC glGetAttachedObjectsARB;
extern PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
extern PFNGLGETATTRIBLOCATIONARBPROC glGetAttribLocationARB;
extern PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
extern PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
extern PFNGLGETBOOLEANINDEXEDVEXTPROC glGetBooleanIndexedvEXT;
extern PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
extern PFNGLGETBUFFERPARAMETERIVARBPROC glGetBufferParameterivARB;
extern PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
extern PFNGLGETBUFFERPARAMETERUI64VNVPROC glGetBufferParameterui64vNV;
extern PFNGLGETBUFFERPOINTERVARBPROC glGetBufferPointervARB;
extern PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;
extern PFNGLGETBUFFERSUBDATAARBPROC glGetBufferSubDataARB;
extern PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
extern PFNGLGETCLIPPLANEFOESPROC glGetClipPlanefOES;
extern PFNGLGETCLIPPLANEXOESPROC glGetClipPlanexOES;
extern PFNGLGETCOLORTABLEEXTPROC glGetColorTableEXT;
extern PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glGetColorTableParameterfvEXT;
extern PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
extern PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glGetColorTableParameterfvSGI;
extern PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glGetColorTableParameterivEXT;
extern PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
extern PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glGetColorTableParameterivSGI;
extern PFNGLGETCOLORTABLEPROC glGetColorTable;
extern PFNGLGETCOLORTABLESGIPROC glGetColorTableSGI;
extern PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV;
extern PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV;
extern PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV;
extern PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV;
extern PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glGetCombinerStageParameterfvNV;
extern PFNGLGETCOMMANDHEADERNVPROC glGetCommandHeaderNV;
extern PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glGetCompressedMultiTexImageEXT;
extern PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glGetCompressedTexImageARB;
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glGetCompressedTextureImageEXT;
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage;
extern PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage;
extern PFNGLGETCONVOLUTIONFILTEREXTPROC glGetConvolutionFilterEXT;
extern PFNGLGETCONVOLUTIONFILTERPROC glGetConvolutionFilter;
extern PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glGetConvolutionParameterfvEXT;
extern PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
extern PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glGetConvolutionParameterivEXT;
extern PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
extern PFNGLGETCONVOLUTIONPARAMETERXVOESPROC glGetConvolutionParameterxvOES;
extern PFNGLGETCOVERAGEMODULATIONTABLENVPROC glGetCoverageModulationTableNV;
extern PFNGLGETDEBUGMESSAGELOGAMDPROC glGetDebugMessageLogAMD;
extern PFNGLGETDEBUGMESSAGELOGARBPROC glGetDebugMessageLogARB;
extern PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
extern PFNGLGETDETAILTEXFUNCSGISPROC glGetDetailTexFuncSGIS;
extern PFNGLGETDOUBLEI_VEXTPROC glGetDoublei_vEXT;
extern PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
extern PFNGLGETDOUBLEINDEXEDVEXTPROC glGetDoubleIndexedvEXT;
extern PFNGLGETFENCEIVNVPROC glGetFenceivNV;
extern PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV;
extern PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV;
extern PFNGLGETFIRSTPERFQUERYIDINTELPROC glGetFirstPerfQueryIdINTEL;
extern PFNGLGETFIXEDVOESPROC glGetFixedvOES;
extern PFNGLGETFLOATI_VEXTPROC glGetFloati_vEXT;
extern PFNGLGETFLOATI_VPROC glGetFloati_v;
extern PFNGLGETFLOATINDEXEDVEXTPROC glGetFloatIndexedvEXT;
extern PFNGLGETFOGFUNCSGISPROC glGetFogFuncSGIS;
extern PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
extern PFNGLGETFRAGDATALOCATIONEXTPROC glGetFragDataLocationEXT;
extern PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
extern PFNGLGETFRAGMENTLIGHTFVSGIXPROC glGetFragmentLightfvSGIX;
extern PFNGLGETFRAGMENTLIGHTIVSGIXPROC glGetFragmentLightivSGIX;
extern PFNGLGETFRAGMENTMATERIALFVSGIXPROC glGetFragmentMaterialfvSGIX;
extern PFNGLGETFRAGMENTMATERIALIVSGIXPROC glGetFragmentMaterialivSGIX;
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetFramebufferAttachmentParameterivEXT;
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
extern PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC glGetFramebufferParameterfvAMD;
extern PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glGetFramebufferParameterivEXT;
extern PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
extern PFNGLGETGRAPHICSRESETSTATUSARBPROC glGetGraphicsResetStatusARB;
extern PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus;
extern PFNGLGETHANDLEARBPROC glGetHandleARB;
extern PFNGLGETHISTOGRAMEXTPROC glGetHistogramEXT;
extern PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glGetHistogramParameterfvEXT;
extern PFNGLGETHISTOGRAMPARAMETERFVPROC glGetHistogramParameterfv;
extern PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glGetHistogramParameterivEXT;
extern PFNGLGETHISTOGRAMPARAMETERIVPROC glGetHistogramParameteriv;
extern PFNGLGETHISTOGRAMPARAMETERXVOESPROC glGetHistogramParameterxvOES;
extern PFNGLGETHISTOGRAMPROC glGetHistogram;
extern PFNGLGETIMAGEHANDLEARBPROC glGetImageHandleARB;
extern PFNGLGETIMAGEHANDLENVPROC glGetImageHandleNV;
extern PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glGetImageTransformParameterfvHP;
extern PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glGetImageTransformParameterivHP;
extern PFNGLGETINFOLOGARBPROC glGetInfoLogARB;
extern PFNGLGETINSTRUMENTSSGIXPROC glGetInstrumentsSGIX;
extern PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
extern PFNGLGETINTEGER64VPROC glGetInteger64v;
extern PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
extern PFNGLGETINTEGERINDEXEDVEXTPROC glGetIntegerIndexedvEXT;
extern PFNGLGETINTEGERUI64I_VNVPROC glGetIntegerui64i_vNV;
extern PFNGLGETINTEGERUI64VNVPROC glGetIntegerui64vNV;
extern PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
extern PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
extern PFNGLGETINTERNALFORMATSAMPLEIVNVPROC glGetInternalformatSampleivNV;
extern PFNGLGETINVARIANTBOOLEANVEXTPROC glGetInvariantBooleanvEXT;
extern PFNGLGETINVARIANTFLOATVEXTPROC glGetInvariantFloatvEXT;
extern PFNGLGETINVARIANTINTEGERVEXTPROC glGetInvariantIntegervEXT;
extern PFNGLGETLIGHTXOESPROC glGetLightxOES;
extern PFNGLGETLISTPARAMETERFVSGIXPROC glGetListParameterfvSGIX;
extern PFNGLGETLISTPARAMETERIVSGIXPROC glGetListParameterivSGIX;
extern PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glGetLocalConstantBooleanvEXT;
extern PFNGLGETLOCALCONSTANTFLOATVEXTPROC glGetLocalConstantFloatvEXT;
extern PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glGetLocalConstantIntegervEXT;
extern PFNGLGETMAPATTRIBPARAMETERFVNVPROC glGetMapAttribParameterfvNV;
extern PFNGLGETMAPATTRIBPARAMETERIVNVPROC glGetMapAttribParameterivNV;
extern PFNGLGETMAPCONTROLPOINTSNVPROC glGetMapControlPointsNV;
extern PFNGLGETMAPPARAMETERFVNVPROC glGetMapParameterfvNV;
extern PFNGLGETMAPPARAMETERIVNVPROC glGetMapParameterivNV;
extern PFNGLGETMAPXVOESPROC glGetMapxvOES;
extern PFNGLGETMATERIALXOESPROC glGetMaterialxOES;
extern PFNGLGETMINMAXEXTPROC glGetMinmaxEXT;
extern PFNGLGETMINMAXPARAMETERFVEXTPROC glGetMinmaxParameterfvEXT;
extern PFNGLGETMINMAXPARAMETERFVPROC glGetMinmaxParameterfv;
extern PFNGLGETMINMAXPARAMETERIVEXTPROC glGetMinmaxParameterivEXT;
extern PFNGLGETMINMAXPARAMETERIVPROC glGetMinmaxParameteriv;
extern PFNGLGETMINMAXPROC glGetMinmax;
extern PFNGLGETMULTISAMPLEFVNVPROC glGetMultisamplefvNV;
extern PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
extern PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
extern PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
extern PFNGLGETMULTITEXGENDVEXTPROC glGetMultiTexGendvEXT;
extern PFNGLGETMULTITEXGENFVEXTPROC glGetMultiTexGenfvEXT;
extern PFNGLGETMULTITEXGENIVEXTPROC glGetMultiTexGenivEXT;
extern PFNGLGETMULTITEXIMAGEEXTPROC glGetMultiTexImageEXT;
extern PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glGetMultiTexLevelParameterfvEXT;
extern PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glGetMultiTexLevelParameterivEXT;
extern PFNGLGETMULTITEXPARAMETERFVEXTPROC glGetMultiTexParameterfvEXT;
extern PFNGLGETMULTITEXPARAMETERIIVEXTPROC glGetMultiTexParameterIivEXT;
extern PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glGetMultiTexParameterIuivEXT;
extern PFNGLGETMULTITEXPARAMETERIVEXTPROC glGetMultiTexParameterivEXT;
extern PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v;
extern PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glGetNamedBufferParameterivEXT;
extern PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv;
extern PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glGetNamedBufferParameterui64vNV;
extern PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glGetNamedBufferPointervEXT;
extern PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv;
extern PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glGetNamedBufferSubDataEXT;
extern PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData;
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetNamedFramebufferAttachmentParameterivEXT;
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC glGetNamedFramebufferParameterfvAMD;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glGetNamedFramebufferParameterivEXT;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv;
extern PFNGLGETNAMEDPROGRAMIVEXTPROC glGetNamedProgramivEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glGetNamedProgramLocalParameterdvEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glGetNamedProgramLocalParameterfvEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glGetNamedProgramLocalParameterIivEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glGetNamedProgramLocalParameterIuivEXT;
extern PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glGetNamedProgramStringEXT;
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glGetNamedRenderbufferParameterivEXT;
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv;
extern PFNGLGETNAMEDSTRINGARBPROC glGetNamedStringARB;
extern PFNGLGETNAMEDSTRINGIVARBPROC glGetNamedStringivARB;
extern PFNGLGETNCOLORTABLEARBPROC glGetnColorTableARB;
extern PFNGLGETNCOLORTABLEPROC glGetnColorTable;
extern PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glGetnCompressedTexImageARB;
extern PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage;
extern PFNGLGETNCONVOLUTIONFILTERARBPROC glGetnConvolutionFilterARB;
extern PFNGLGETNCONVOLUTIONFILTERPROC glGetnConvolutionFilter;
extern PFNGLGETNEXTPERFQUERYIDINTELPROC glGetNextPerfQueryIdINTEL;
extern PFNGLGETNHISTOGRAMARBPROC glGetnHistogramARB;
extern PFNGLGETNHISTOGRAMPROC glGetnHistogram;
extern PFNGLGETNMAPDVARBPROC glGetnMapdvARB;
extern PFNGLGETNMAPDVPROC glGetnMapdv;
extern PFNGLGETNMAPFVARBPROC glGetnMapfvARB;
extern PFNGLGETNMAPFVPROC glGetnMapfv;
extern PFNGLGETNMAPIVARBPROC glGetnMapivARB;
extern PFNGLGETNMAPIVPROC glGetnMapiv;
extern PFNGLGETNMINMAXARBPROC glGetnMinmaxARB;
extern PFNGLGETNMINMAXPROC glGetnMinmax;
extern PFNGLGETNPIXELMAPFVARBPROC glGetnPixelMapfvARB;
extern PFNGLGETNPIXELMAPFVPROC glGetnPixelMapfv;
extern PFNGLGETNPIXELMAPUIVARBPROC glGetnPixelMapuivARB;
extern PFNGLGETNPIXELMAPUIVPROC glGetnPixelMapuiv;
extern PFNGLGETNPIXELMAPUSVARBPROC glGetnPixelMapusvARB;
extern PFNGLGETNPIXELMAPUSVPROC glGetnPixelMapusv;
extern PFNGLGETNPOLYGONSTIPPLEARBPROC glGetnPolygonStippleARB;
extern PFNGLGETNPOLYGONSTIPPLEPROC glGetnPolygonStipple;
extern PFNGLGETNSEPARABLEFILTERARBPROC glGetnSeparableFilterARB;
extern PFNGLGETNSEPARABLEFILTERPROC glGetnSeparableFilter;
extern PFNGLGETNTEXIMAGEARBPROC glGetnTexImageARB;
extern PFNGLGETNTEXIMAGEPROC glGetnTexImage;
extern PFNGLGETNUNIFORMDVARBPROC glGetnUniformdvARB;
extern PFNGLGETNUNIFORMDVPROC glGetnUniformdv;
extern PFNGLGETNUNIFORMFVARBPROC glGetnUniformfvARB;
extern PFNGLGETNUNIFORMFVPROC glGetnUniformfv;
extern PFNGLGETNUNIFORMI64VARBPROC glGetnUniformi64vARB;
extern PFNGLGETNUNIFORMIVARBPROC glGetnUniformivARB;
extern PFNGLGETNUNIFORMIVPROC glGetnUniformiv;
extern PFNGLGETNUNIFORMUI64VARBPROC glGetnUniformui64vARB;
extern PFNGLGETNUNIFORMUIVARBPROC glGetnUniformuivARB;
extern PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv;
extern PFNGLGETOBJECTBUFFERFVATIPROC glGetObjectBufferfvATI;
extern PFNGLGETOBJECTBUFFERIVATIPROC glGetObjectBufferivATI;
extern PFNGLGETOBJECTLABELEXTPROC glGetObjectLabelEXT;
extern PFNGLGETOBJECTLABELPROC glGetObjectLabel;
extern PFNGLGETOBJECTPARAMETERFVARBPROC glGetObjectParameterfvARB;
extern PFNGLGETOBJECTPARAMETERIVAPPLEPROC glGetObjectParameterivAPPLE;
extern PFNGLGETOBJECTPARAMETERIVARBPROC glGetObjectParameterivARB;
extern PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
extern PFNGLGETOCCLUSIONQUERYIVNVPROC glGetOcclusionQueryivNV;
extern PFNGLGETOCCLUSIONQUERYUIVNVPROC glGetOcclusionQueryuivNV;
extern PFNGLGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
extern PFNGLGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
extern PFNGLGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
extern PFNGLGETPATHCOORDSNVPROC glGetPathCoordsNV;
extern PFNGLGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
extern PFNGLGETPATHLENGTHNVPROC glGetPathLengthNV;
extern PFNGLGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
extern PFNGLGETPATHMETRICSNVPROC glGetPathMetricsNV;
extern PFNGLGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
extern PFNGLGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
extern PFNGLGETPATHSPACINGNVPROC glGetPathSpacingNV;
extern PFNGLGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
extern PFNGLGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
extern PFNGLGETPERFCOUNTERINFOINTELPROC glGetPerfCounterInfoINTEL;
extern PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glGetPerfMonitorCounterDataAMD;
extern PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glGetPerfMonitorCounterInfoAMD;
extern PFNGLGETPERFMONITORCOUNTERSAMDPROC glGetPerfMonitorCountersAMD;
extern PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glGetPerfMonitorCounterStringAMD;
extern PFNGLGETPERFMONITORGROUPSAMDPROC glGetPerfMonitorGroupsAMD;
extern PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glGetPerfMonitorGroupStringAMD;
extern PFNGLGETPERFQUERYDATAINTELPROC glGetPerfQueryDataINTEL;
extern PFNGLGETPERFQUERYIDBYNAMEINTELPROC glGetPerfQueryIdByNameINTEL;
extern PFNGLGETPERFQUERYINFOINTELPROC glGetPerfQueryInfoINTEL;
extern PFNGLGETPIXELMAPXVPROC glGetPixelMapxv;
extern PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glGetPixelTexGenParameterfvSGIS;
extern PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glGetPixelTexGenParameterivSGIS;
extern PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glGetPixelTransformParameterfvEXT;
extern PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glGetPixelTransformParameterivEXT;
extern PFNGLGETPOINTERI_VEXTPROC glGetPointeri_vEXT;
extern PFNGLGETPOINTERINDEXEDVEXTPROC glGetPointerIndexedvEXT;
extern PFNGLGETPOINTERVEXTPROC glGetPointervEXT;
extern PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
extern PFNGLGETPROGRAMENVPARAMETERDVARBPROC glGetProgramEnvParameterdvARB;
extern PFNGLGETPROGRAMENVPARAMETERFVARBPROC glGetProgramEnvParameterfvARB;
extern PFNGLGETPROGRAMENVPARAMETERIIVNVPROC glGetProgramEnvParameterIivNV;
extern PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC glGetProgramEnvParameterIuivNV;
extern PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
extern PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
extern PFNGLGETPROGRAMIVARBPROC glGetProgramivARB;
extern PFNGLGETPROGRAMIVNVPROC glGetProgramivNV;
extern PFNGLGETPROGRAMIVPROC glGetProgramiv;
extern PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glGetProgramLocalParameterdvARB;
extern PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glGetProgramLocalParameterfvARB;
extern PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC glGetProgramLocalParameterIivNV;
extern PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC glGetProgramLocalParameterIuivNV;
extern PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glGetProgramNamedParameterdvNV;
extern PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glGetProgramNamedParameterfvNV;
extern PFNGLGETPROGRAMPARAMETERDVNVPROC glGetProgramParameterdvNV;
extern PFNGLGETPROGRAMPARAMETERFVNVPROC glGetProgramParameterfvNV;
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
extern PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
extern PFNGLGETPROGRAMRESOURCEFVNVPROC glGetProgramResourcefvNV;
extern PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
extern PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
extern PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
extern PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
extern PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
extern PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
extern PFNGLGETPROGRAMSTRINGARBPROC glGetProgramStringARB;
extern PFNGLGETPROGRAMSTRINGNVPROC glGetProgramStringNV;
extern PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC glGetProgramSubroutineParameteruivNV;
extern PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v;
extern PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv;
extern PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v;
extern PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv;
extern PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
extern PFNGLGETQUERYIVARBPROC glGetQueryivARB;
extern PFNGLGETQUERYIVPROC glGetQueryiv;
extern PFNGLGETQUERYOBJECTI64VEXTPROC glGetQueryObjecti64vEXT;
extern PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
extern PFNGLGETQUERYOBJECTIVARBPROC glGetQueryObjectivARB;
extern PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
extern PFNGLGETQUERYOBJECTUI64VEXTPROC glGetQueryObjectui64vEXT;
extern PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
extern PFNGLGETQUERYOBJECTUIVARBPROC glGetQueryObjectuivARB;
extern PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
extern PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glGetRenderbufferParameterivEXT;
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
extern PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
extern PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
extern PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
extern PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
extern PFNGLGETSEPARABLEFILTEREXTPROC glGetSeparableFilterEXT;
extern PFNGLGETSEPARABLEFILTERPROC glGetSeparableFilter;
extern PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
extern PFNGLGETSHADERIVPROC glGetShaderiv;
extern PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
extern PFNGLGETSHADERSOURCEARBPROC glGetShaderSourceARB;
extern PFNGLGETSHADERSOURCEPROC glGetShaderSource;
extern PFNGLGETSHARPENTEXFUNCSGISPROC glGetSharpenTexFuncSGIS;
extern PFNGLGETSTAGEINDEXNVPROC glGetStageIndexNV;
extern PFNGLGETSTRINGIPROC glGetStringi;
extern PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
extern PFNGLGETSYNCIVPROC glGetSynciv;
extern PFNGLGETTEXBUMPPARAMETERFVATIPROC glGetTexBumpParameterfvATI;
extern PFNGLGETTEXBUMPPARAMETERIVATIPROC glGetTexBumpParameterivATI;
extern PFNGLGETTEXENVXVOESPROC glGetTexEnvxvOES;
extern PFNGLGETTEXFILTERFUNCSGISPROC glGetTexFilterFuncSGIS;
extern PFNGLGETTEXGENXVOESPROC glGetTexGenxvOES;
extern PFNGLGETTEXLEVELPARAMETERXVOESPROC glGetTexLevelParameterxvOES;
extern PFNGLGETTEXPARAMETERIIVEXTPROC glGetTexParameterIivEXT;
extern PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
extern PFNGLGETTEXPARAMETERIUIVEXTPROC glGetTexParameterIuivEXT;
extern PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
extern PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glGetTexParameterPointervAPPLE;
extern PFNGLGETTEXPARAMETERXVOESPROC glGetTexParameterxvOES;
extern PFNGLGETTEXTUREHANDLEARBPROC glGetTextureHandleARB;
extern PFNGLGETTEXTUREHANDLENVPROC glGetTextureHandleNV;
extern PFNGLGETTEXTUREIMAGEEXTPROC glGetTextureImageEXT;
extern PFNGLGETTEXTUREIMAGEPROC glGetTextureImage;
extern PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
extern PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv;
extern PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
extern PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv;
extern PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
extern PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv;
extern PFNGLGETTEXTUREPARAMETERIIVEXTPROC glGetTextureParameterIivEXT;
extern PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv;
extern PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glGetTextureParameterIuivEXT;
extern PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv;
extern PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
extern PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv;
extern PFNGLGETTEXTURESAMPLERHANDLEARBPROC glGetTextureSamplerHandleARB;
extern PFNGLGETTEXTURESAMPLERHANDLENVPROC glGetTextureSamplerHandleNV;
extern PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage;
extern PFNGLGETTRACKMATRIXIVNVPROC glGetTrackMatrixivNV;
extern PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v;
extern PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v;
extern PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glGetTransformFeedbackVaryingEXT;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glGetTransformFeedbackVaryingNV;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
extern PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
extern PFNGLGETUNIFORMBUFFERSIZEEXTPROC glGetUniformBufferSizeEXT;
extern PFNGLGETUNIFORMDVPROC glGetUniformdv;
extern PFNGLGETUNIFORMFVARBPROC glGetUniformfvARB;
extern PFNGLGETUNIFORMFVPROC glGetUniformfv;
extern PFNGLGETUNIFORMI64VARBPROC glGetUniformi64vARB;
extern PFNGLGETUNIFORMI64VNVPROC glGetUniformi64vNV;
extern PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
extern PFNGLGETUNIFORMIVARBPROC glGetUniformivARB;
extern PFNGLGETUNIFORMIVPROC glGetUniformiv;
extern PFNGLGETUNIFORMLOCATIONARBPROC glGetUniformLocationARB;
extern PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
extern PFNGLGETUNIFORMOFFSETEXTPROC glGetUniformOffsetEXT;
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
extern PFNGLGETUNIFORMUI64VARBPROC glGetUniformui64vARB;
extern PFNGLGETUNIFORMUI64VNVPROC glGetUniformui64vNV;
extern PFNGLGETUNIFORMUIVEXTPROC glGetUniformuivEXT;
extern PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
extern PFNGLGETVARIANTARRAYOBJECTFVATIPROC glGetVariantArrayObjectfvATI;
extern PFNGLGETVARIANTARRAYOBJECTIVATIPROC glGetVariantArrayObjectivATI;
extern PFNGLGETVARIANTBOOLEANVEXTPROC glGetVariantBooleanvEXT;
extern PFNGLGETVARIANTFLOATVEXTPROC glGetVariantFloatvEXT;
extern PFNGLGETVARIANTINTEGERVEXTPROC glGetVariantIntegervEXT;
extern PFNGLGETVARIANTPOINTERVEXTPROC glGetVariantPointervEXT;
extern PFNGLGETVARYINGLOCATIONNVPROC glGetVaryingLocationNV;
extern PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv;
extern PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv;
extern PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glGetVertexArrayIntegeri_vEXT;
extern PFNGLGETVERTEXARRAYINTEGERVEXTPROC glGetVertexArrayIntegervEXT;
extern PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv;
extern PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glGetVertexArrayPointeri_vEXT;
extern PFNGLGETVERTEXARRAYPOINTERVEXTPROC glGetVertexArrayPointervEXT;
extern PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glGetVertexAttribArrayObjectfvATI;
extern PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glGetVertexAttribArrayObjectivATI;
extern PFNGLGETVERTEXATTRIBDVARBPROC glGetVertexAttribdvARB;
extern PFNGLGETVERTEXATTRIBDVNVPROC glGetVertexAttribdvNV;
extern PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
extern PFNGLGETVERTEXATTRIBFVARBPROC glGetVertexAttribfvARB;
extern PFNGLGETVERTEXATTRIBFVNVPROC glGetVertexAttribfvNV;
extern PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
extern PFNGLGETVERTEXATTRIBIIVEXTPROC glGetVertexAttribIivEXT;
extern PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
extern PFNGLGETVERTEXATTRIBIUIVEXTPROC glGetVertexAttribIuivEXT;
extern PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
extern PFNGLGETVERTEXATTRIBIVARBPROC glGetVertexAttribivARB;
extern PFNGLGETVERTEXATTRIBIVNVPROC glGetVertexAttribivNV;
extern PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
extern PFNGLGETVERTEXATTRIBLDVEXTPROC glGetVertexAttribLdvEXT;
extern PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
extern PFNGLGETVERTEXATTRIBLI64VNVPROC glGetVertexAttribLi64vNV;
extern PFNGLGETVERTEXATTRIBLUI64VARBPROC glGetVertexAttribLui64vARB;
extern PFNGLGETVERTEXATTRIBLUI64VNVPROC glGetVertexAttribLui64vNV;
extern PFNGLGETVERTEXATTRIBPOINTERVARBPROC glGetVertexAttribPointervARB;
extern PFNGLGETVERTEXATTRIBPOINTERVNVPROC glGetVertexAttribPointervNV;
extern PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
extern PFNGLGETVIDEOCAPTUREIVNVPROC glGetVideoCaptureivNV;
extern PFNGLGETVIDEOCAPTURESTREAMDVNVPROC glGetVideoCaptureStreamdvNV;
extern PFNGLGETVIDEOCAPTURESTREAMFVNVPROC glGetVideoCaptureStreamfvNV;
extern PFNGLGETVIDEOCAPTURESTREAMIVNVPROC glGetVideoCaptureStreamivNV;
extern PFNGLGETVIDEOI64VNVPROC glGetVideoi64vNV;
extern PFNGLGETVIDEOIVNVPROC glGetVideoivNV;
extern PFNGLGETVIDEOUI64VNVPROC glGetVideoui64vNV;
extern PFNGLGETVIDEOUIVNVPROC glGetVideouivNV;
extern PFNGLGETVKPROCADDRNVPROC glGetVkProcAddrNV;
extern PFNGLGLOBALALPHAFACTORBSUNPROC glGlobalAlphaFactorbSUN;
extern PFNGLGLOBALALPHAFACTORDSUNPROC glGlobalAlphaFactordSUN;
extern PFNGLGLOBALALPHAFACTORFSUNPROC glGlobalAlphaFactorfSUN;
extern PFNGLGLOBALALPHAFACTORISUNPROC glGlobalAlphaFactoriSUN;
extern PFNGLGLOBALALPHAFACTORSSUNPROC glGlobalAlphaFactorsSUN;
extern PFNGLGLOBALALPHAFACTORUBSUNPROC glGlobalAlphaFactorubSUN;
extern PFNGLGLOBALALPHAFACTORUISUNPROC glGlobalAlphaFactoruiSUN;
extern PFNGLGLOBALALPHAFACTORUSSUNPROC glGlobalAlphaFactorusSUN;
extern PFNGLHINTPGIPROC glHintPGI;
extern PFNGLHISTOGRAMEXTPROC glHistogramEXT;
extern PFNGLHISTOGRAMPROC glHistogram;
extern PFNGLIGLOOINTERFACESGIXPROC glIglooInterfaceSGIX;
extern PFNGLIMAGETRANSFORMPARAMETERFHPPROC glImageTransformParameterfHP;
extern PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glImageTransformParameterfvHP;
extern PFNGLIMAGETRANSFORMPARAMETERIHPPROC glImageTransformParameteriHP;
extern PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glImageTransformParameterivHP;
extern PFNGLIMPORTSYNCEXTPROC glImportSyncEXT;
extern PFNGLINDEXFORMATNVPROC glIndexFormatNV;
extern PFNGLINDEXFUNCEXTPROC glIndexFuncEXT;
extern PFNGLINDEXMATERIALEXTPROC glIndexMaterialEXT;
extern PFNGLINDEXPOINTEREXTPROC glIndexPointerEXT;
extern PFNGLINDEXPOINTERLISTIBMPROC glIndexPointerListIBM;
extern PFNGLINDEXXOESPROC glIndexxOES;
extern PFNGLINDEXXVOESPROC glIndexxvOES;
extern PFNGLINSERTCOMPONENTEXTPROC glInsertComponentEXT;
extern PFNGLINSERTEVENTMARKEREXTPROC glInsertEventMarkerEXT;
extern PFNGLINSTRUMENTSBUFFERSGIXPROC glInstrumentsBufferSGIX;
extern PFNGLINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
extern PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
extern PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
extern PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData;
extern PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData;
extern PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
extern PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
extern PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
extern PFNGLISASYNCMARKERSGIXPROC glIsAsyncMarkerSGIX;
extern PFNGLISBUFFERARBPROC glIsBufferARB;
extern PFNGLISBUFFERPROC glIsBuffer;
extern PFNGLISBUFFERRESIDENTNVPROC glIsBufferResidentNV;
extern PFNGLISCOMMANDLISTNVPROC glIsCommandListNV;
extern PFNGLISENABLEDINDEXEDEXTPROC glIsEnabledIndexedEXT;
extern PFNGLISENABLEDIPROC glIsEnabledi;
extern PFNGLISFENCEAPPLEPROC glIsFenceAPPLE;
extern PFNGLISFENCENVPROC glIsFenceNV;
extern PFNGLISFRAMEBUFFEREXTPROC glIsFramebufferEXT;
extern PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
extern PFNGLISIMAGEHANDLERESIDENTARBPROC glIsImageHandleResidentARB;
extern PFNGLISIMAGEHANDLERESIDENTNVPROC glIsImageHandleResidentNV;
extern PFNGLISNAMEAMDPROC glIsNameAMD;
extern PFNGLISNAMEDBUFFERRESIDENTNVPROC glIsNamedBufferResidentNV;
extern PFNGLISNAMEDSTRINGARBPROC glIsNamedStringARB;
extern PFNGLISOBJECTBUFFERATIPROC glIsObjectBufferATI;
extern PFNGLISOCCLUSIONQUERYNVPROC glIsOcclusionQueryNV;
extern PFNGLISPATHNVPROC glIsPathNV;
extern PFNGLISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
extern PFNGLISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
extern PFNGLISPROGRAMARBPROC glIsProgramARB;
extern PFNGLISPROGRAMNVPROC glIsProgramNV;
extern PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
extern PFNGLISPROGRAMPROC glIsProgram;
extern PFNGLISQUERYARBPROC glIsQueryARB;
extern PFNGLISQUERYPROC glIsQuery;
extern PFNGLISRENDERBUFFEREXTPROC glIsRenderbufferEXT;
extern PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
extern PFNGLISSAMPLERPROC glIsSampler;
extern PFNGLISSHADERPROC glIsShader;
extern PFNGLISSTATENVPROC glIsStateNV;
extern PFNGLISSYNCPROC glIsSync;
extern PFNGLISTEXTUREEXTPROC glIsTextureEXT;
extern PFNGLISTEXTUREHANDLERESIDENTARBPROC glIsTextureHandleResidentARB;
extern PFNGLISTEXTUREHANDLERESIDENTNVPROC glIsTextureHandleResidentNV;
extern PFNGLISTRANSFORMFEEDBACKNVPROC glIsTransformFeedbackNV;
extern PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
extern PFNGLISVARIANTENABLEDEXTPROC glIsVariantEnabledEXT;
extern PFNGLISVERTEXARRAYAPPLEPROC glIsVertexArrayAPPLE;
extern PFNGLISVERTEXARRAYPROC glIsVertexArray;
extern PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glIsVertexAttribEnabledAPPLE;
extern PFNGLLABELOBJECTEXTPROC glLabelObjectEXT;
extern PFNGLLGPUCOPYIMAGESUBDATANVXPROC glLGPUCopyImageSubDataNVX;
extern PFNGLLGPUINTERLOCKNVXPROC glLGPUInterlockNVX;
extern PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC glLGPUNamedBufferSubDataNVX;
extern PFNGLLIGHTENVISGIXPROC glLightEnviSGIX;
extern PFNGLLIGHTMODELXOESPROC glLightModelxOES;
extern PFNGLLIGHTMODELXVOESPROC glLightModelxvOES;
extern PFNGLLIGHTXOESPROC glLightxOES;
extern PFNGLLIGHTXVOESPROC glLightxvOES;
extern PFNGLLINEWIDTHXOESPROC glLineWidthxOES;
extern PFNGLLINKPROGRAMARBPROC glLinkProgramARB;
extern PFNGLLINKPROGRAMPROC glLinkProgram;
extern PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC glListDrawCommandsStatesClientNV;
extern PFNGLLISTPARAMETERFSGIXPROC glListParameterfSGIX;
extern PFNGLLISTPARAMETERFVSGIXPROC glListParameterfvSGIX;
extern PFNGLLISTPARAMETERISGIXPROC glListParameteriSGIX;
extern PFNGLLISTPARAMETERIVSGIXPROC glListParameterivSGIX;
extern PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glLoadIdentityDeformationMapSGIX;
extern PFNGLLOADMATRIXXOESPROC glLoadMatrixxOES;
extern PFNGLLOADPROGRAMNVPROC glLoadProgramNV;
extern PFNGLLOADTRANSPOSEMATRIXDARBPROC glLoadTransposeMatrixdARB;
extern PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd;
extern PFNGLLOADTRANSPOSEMATRIXFARBPROC glLoadTransposeMatrixfARB;
extern PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf;
extern PFNGLLOADTRANSPOSEMATRIXXOESPROC glLoadTransposeMatrixxOES;
extern PFNGLLOCKARRAYSEXTPROC glLockArraysEXT;
extern PFNGLMAKEBUFFERNONRESIDENTNVPROC glMakeBufferNonResidentNV;
extern PFNGLMAKEBUFFERRESIDENTNVPROC glMakeBufferResidentNV;
extern PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glMakeImageHandleNonResidentARB;
extern PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glMakeImageHandleNonResidentNV;
extern PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glMakeImageHandleResidentARB;
extern PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glMakeImageHandleResidentNV;
extern PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glMakeNamedBufferNonResidentNV;
extern PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glMakeNamedBufferResidentNV;
extern PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glMakeTextureHandleNonResidentARB;
extern PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glMakeTextureHandleNonResidentNV;
extern PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glMakeTextureHandleResidentARB;
extern PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glMakeTextureHandleResidentNV;
extern PFNGLMAP1XOESPROC glMap1xOES;
extern PFNGLMAP2XOESPROC glMap2xOES;
extern PFNGLMAPBUFFERARBPROC glMapBufferARB;
extern PFNGLMAPBUFFERPROC glMapBuffer;
extern PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
extern PFNGLMAPCONTROLPOINTSNVPROC glMapControlPointsNV;
extern PFNGLMAPGRID1XOESPROC glMapGrid1xOES;
extern PFNGLMAPGRID2XOESPROC glMapGrid2xOES;
extern PFNGLMAPNAMEDBUFFEREXTPROC glMapNamedBufferEXT;
extern PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer;
extern PFNGLMAPNAMEDBUFFERRANGEEXTPROC glMapNamedBufferRangeEXT;
extern PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange;
extern PFNGLMAPOBJECTBUFFERATIPROC glMapObjectBufferATI;
extern PFNGLMAPPARAMETERFVNVPROC glMapParameterfvNV;
extern PFNGLMAPPARAMETERIVNVPROC glMapParameterivNV;
extern PFNGLMAPTEXTURE2DINTELPROC glMapTexture2DINTEL;
extern PFNGLMAPVERTEXATTRIB1DAPPLEPROC glMapVertexAttrib1dAPPLE;
extern PFNGLMAPVERTEXATTRIB1FAPPLEPROC glMapVertexAttrib1fAPPLE;
extern PFNGLMAPVERTEXATTRIB2DAPPLEPROC glMapVertexAttrib2dAPPLE;
extern PFNGLMAPVERTEXATTRIB2FAPPLEPROC glMapVertexAttrib2fAPPLE;
extern PFNGLMATERIALXOESPROC glMaterialxOES;
extern PFNGLMATERIALXVOESPROC glMaterialxvOES;
extern PFNGLMATRIXFRUSTUMEXTPROC glMatrixFrustumEXT;
extern PFNGLMATRIXINDEXPOINTERARBPROC glMatrixIndexPointerARB;
extern PFNGLMATRIXINDEXUBVARBPROC glMatrixIndexubvARB;
extern PFNGLMATRIXINDEXUIVARBPROC glMatrixIndexuivARB;
extern PFNGLMATRIXINDEXUSVARBPROC glMatrixIndexusvARB;
extern PFNGLMATRIXLOAD3X2FNVPROC glMatrixLoad3x2fNV;
extern PFNGLMATRIXLOAD3X3FNVPROC glMatrixLoad3x3fNV;
extern PFNGLMATRIXLOADDEXTPROC glMatrixLoaddEXT;
extern PFNGLMATRIXLOADFEXTPROC glMatrixLoadfEXT;
extern PFNGLMATRIXLOADIDENTITYEXTPROC glMatrixLoadIdentityEXT;
extern PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC glMatrixLoadTranspose3x3fNV;
extern PFNGLMATRIXLOADTRANSPOSEDEXTPROC glMatrixLoadTransposedEXT;
extern PFNGLMATRIXLOADTRANSPOSEFEXTPROC glMatrixLoadTransposefEXT;
extern PFNGLMATRIXMULT3X2FNVPROC glMatrixMult3x2fNV;
extern PFNGLMATRIXMULT3X3FNVPROC glMatrixMult3x3fNV;
extern PFNGLMATRIXMULTDEXTPROC glMatrixMultdEXT;
extern PFNGLMATRIXMULTFEXTPROC glMatrixMultfEXT;
extern PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC glMatrixMultTranspose3x3fNV;
extern PFNGLMATRIXMULTTRANSPOSEDEXTPROC glMatrixMultTransposedEXT;
extern PFNGLMATRIXMULTTRANSPOSEFEXTPROC glMatrixMultTransposefEXT;
extern PFNGLMATRIXORTHOEXTPROC glMatrixOrthoEXT;
extern PFNGLMATRIXPOPEXTPROC glMatrixPopEXT;
extern PFNGLMATRIXPUSHEXTPROC glMatrixPushEXT;
extern PFNGLMATRIXROTATEDEXTPROC glMatrixRotatedEXT;
extern PFNGLMATRIXROTATEFEXTPROC glMatrixRotatefEXT;
extern PFNGLMATRIXSCALEDEXTPROC glMatrixScaledEXT;
extern PFNGLMATRIXSCALEFEXTPROC glMatrixScalefEXT;
extern PFNGLMATRIXTRANSLATEDEXTPROC glMatrixTranslatedEXT;
extern PFNGLMATRIXTRANSLATEFEXTPROC glMatrixTranslatefEXT;
extern PFNGLMAXSHADERCOMPILERTHREADSARBPROC glMaxShaderCompilerThreadsARB;
extern PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion;
extern PFNGLMEMORYBARRIEREXTPROC glMemoryBarrierEXT;
extern PFNGLMEMORYBARRIERPROC glMemoryBarrier;
extern PFNGLMINMAXEXTPROC glMinmaxEXT;
extern PFNGLMINMAXPROC glMinmax;
extern PFNGLMINSAMPLESHADINGARBPROC glMinSampleShadingARB;
extern PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
extern PFNGLMULTICASTBARRIERNVPROC glMulticastBarrierNV;
extern PFNGLMULTICASTBLITFRAMEBUFFERNVPROC glMulticastBlitFramebufferNV;
extern PFNGLMULTICASTBUFFERSUBDATANVPROC glMulticastBufferSubDataNV;
extern PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC glMulticastCopyBufferSubDataNV;
extern PFNGLMULTICASTCOPYIMAGESUBDATANVPROC glMulticastCopyImageSubDataNV;
extern PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glMulticastFramebufferSampleLocationsfvNV;
extern PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC glMulticastGetQueryObjecti64vNV;
extern PFNGLMULTICASTGETQUERYOBJECTIVNVPROC glMulticastGetQueryObjectivNV;
extern PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC glMulticastGetQueryObjectui64vNV;
extern PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC glMulticastGetQueryObjectuivNV;
extern PFNGLMULTICASTWAITSYNCNVPROC glMulticastWaitSyncNV;
extern PFNGLMULTIDRAWARRAYSEXTPROC glMultiDrawArraysEXT;
extern PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glMultiDrawArraysIndirectAMD;
extern PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawArraysIndirectBindlessCountNV;
extern PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC glMultiDrawArraysIndirectBindlessNV;
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glMultiDrawArraysIndirectCountARB;
extern PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
extern PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
extern PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glMultiDrawElementArrayAPPLE;
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
extern PFNGLMULTIDRAWELEMENTSEXTPROC glMultiDrawElementsEXT;
extern PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glMultiDrawElementsIndirectAMD;
extern PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC glMultiDrawElementsIndirectBindlessCountNV;
extern PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC glMultiDrawElementsIndirectBindlessNV;
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glMultiDrawElementsIndirectCountARB;
extern PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
extern PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
extern PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glMultiDrawRangeElementArrayAPPLE;
extern PFNGLMULTIMODEDRAWARRAYSIBMPROC glMultiModeDrawArraysIBM;
extern PFNGLMULTIMODEDRAWELEMENTSIBMPROC glMultiModeDrawElementsIBM;
extern PFNGLMULTITEXBUFFEREXTPROC glMultiTexBufferEXT;
extern PFNGLMULTITEXCOORD1BOESPROC glMultiTexCoord1bOES;
extern PFNGLMULTITEXCOORD1BVOESPROC glMultiTexCoord1bvOES;
extern PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB;
extern PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d;
extern PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB;
extern PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv;
extern PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB;
extern PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f;
extern PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB;
extern PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv;
extern PFNGLMULTITEXCOORD1HNVPROC glMultiTexCoord1hNV;
extern PFNGLMULTITEXCOORD1HVNVPROC glMultiTexCoord1hvNV;
extern PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB;
extern PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i;
extern PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB;
extern PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv;
extern PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB;
extern PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s;
extern PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB;
extern PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv;
extern PFNGLMULTITEXCOORD1XOESPROC glMultiTexCoord1xOES;
extern PFNGLMULTITEXCOORD1XVOESPROC glMultiTexCoord1xvOES;
extern PFNGLMULTITEXCOORD2BOESPROC glMultiTexCoord2bOES;
extern PFNGLMULTITEXCOORD2BVOESPROC glMultiTexCoord2bvOES;
extern PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB;
extern PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d;
extern PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB;
extern PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv;
extern PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB;
extern PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f;
extern PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB;
extern PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv;
extern PFNGLMULTITEXCOORD2HNVPROC glMultiTexCoord2hNV;
extern PFNGLMULTITEXCOORD2HVNVPROC glMultiTexCoord2hvNV;
extern PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB;
extern PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i;
extern PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB;
extern PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv;
extern PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB;
extern PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s;
extern PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB;
extern PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv;
extern PFNGLMULTITEXCOORD2XOESPROC glMultiTexCoord2xOES;
extern PFNGLMULTITEXCOORD2XVOESPROC glMultiTexCoord2xvOES;
extern PFNGLMULTITEXCOORD3BOESPROC glMultiTexCoord3bOES;
extern PFNGLMULTITEXCOORD3BVOESPROC glMultiTexCoord3bvOES;
extern PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB;
extern PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d;
extern PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB;
extern PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv;
extern PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB;
extern PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f;
extern PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB;
extern PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv;
extern PFNGLMULTITEXCOORD3HNVPROC glMultiTexCoord3hNV;
extern PFNGLMULTITEXCOORD3HVNVPROC glMultiTexCoord3hvNV;
extern PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB;
extern PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i;
extern PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB;
extern PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv;
extern PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB;
extern PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s;
extern PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB;
extern PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv;
extern PFNGLMULTITEXCOORD3XOESPROC glMultiTexCoord3xOES;
extern PFNGLMULTITEXCOORD3XVOESPROC glMultiTexCoord3xvOES;
extern PFNGLMULTITEXCOORD4BOESPROC glMultiTexCoord4bOES;
extern PFNGLMULTITEXCOORD4BVOESPROC glMultiTexCoord4bvOES;
extern PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB;
extern PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d;
extern PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB;
extern PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv;
extern PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB;
extern PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f;
extern PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB;
extern PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv;
extern PFNGLMULTITEXCOORD4HNVPROC glMultiTexCoord4hNV;
extern PFNGLMULTITEXCOORD4HVNVPROC glMultiTexCoord4hvNV;
extern PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB;
extern PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i;
extern PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB;
extern PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv;
extern PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB;
extern PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s;
extern PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB;
extern PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv;
extern PFNGLMULTITEXCOORD4XOESPROC glMultiTexCoord4xOES;
extern PFNGLMULTITEXCOORD4XVOESPROC glMultiTexCoord4xvOES;
extern PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui;
extern PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv;
extern PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui;
extern PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv;
extern PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui;
extern PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv;
extern PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui;
extern PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv;
extern PFNGLMULTITEXCOORDPOINTEREXTPROC glMultiTexCoordPointerEXT;
extern PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
extern PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
extern PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
extern PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
extern PFNGLMULTITEXGENDEXTPROC glMultiTexGendEXT;
extern PFNGLMULTITEXGENDVEXTPROC glMultiTexGendvEXT;
extern PFNGLMULTITEXGENFEXTPROC glMultiTexGenfEXT;
extern PFNGLMULTITEXGENFVEXTPROC glMultiTexGenfvEXT;
extern PFNGLMULTITEXGENIEXTPROC glMultiTexGeniEXT;
extern PFNGLMULTITEXGENIVEXTPROC glMultiTexGenivEXT;
extern PFNGLMULTITEXIMAGE1DEXTPROC glMultiTexImage1DEXT;
extern PFNGLMULTITEXIMAGE2DEXTPROC glMultiTexImage2DEXT;
extern PFNGLMULTITEXIMAGE3DEXTPROC glMultiTexImage3DEXT;
extern PFNGLMULTITEXPARAMETERFEXTPROC glMultiTexParameterfEXT;
extern PFNGLMULTITEXPARAMETERFVEXTPROC glMultiTexParameterfvEXT;
extern PFNGLMULTITEXPARAMETERIEXTPROC glMultiTexParameteriEXT;
extern PFNGLMULTITEXPARAMETERIIVEXTPROC glMultiTexParameterIivEXT;
extern PFNGLMULTITEXPARAMETERIUIVEXTPROC glMultiTexParameterIuivEXT;
extern PFNGLMULTITEXPARAMETERIVEXTPROC glMultiTexParameterivEXT;
extern PFNGLMULTITEXRENDERBUFFEREXTPROC glMultiTexRenderbufferEXT;
extern PFNGLMULTITEXSUBIMAGE1DEXTPROC glMultiTexSubImage1DEXT;
extern PFNGLMULTITEXSUBIMAGE2DEXTPROC glMultiTexSubImage2DEXT;
extern PFNGLMULTITEXSUBIMAGE3DEXTPROC glMultiTexSubImage3DEXT;
extern PFNGLMULTMATRIXXOESPROC glMultMatrixxOES;
extern PFNGLMULTTRANSPOSEMATRIXDARBPROC glMultTransposeMatrixdARB;
extern PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd;
extern PFNGLMULTTRANSPOSEMATRIXFARBPROC glMultTransposeMatrixfARB;
extern PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf;
extern PFNGLMULTTRANSPOSEMATRIXXOESPROC glMultTransposeMatrixxOES;
extern PFNGLNAMEDBUFFERDATAEXTPROC glNamedBufferDataEXT;
extern PFNGLNAMEDBUFFERDATAPROC glNamedBufferData;
extern PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glNamedBufferPageCommitmentARB;
extern PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glNamedBufferPageCommitmentEXT;
extern PFNGLNAMEDBUFFERSTORAGEEXTPROC glNamedBufferStorageEXT;
extern PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage;
extern PFNGLNAMEDBUFFERSUBDATAEXTPROC glNamedBufferSubDataEXT;
extern PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData;
extern PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glNamedCopyBufferSubDataEXT;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer;
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers;
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glNamedFramebufferParameteriEXT;
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri;
extern PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer;
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glNamedFramebufferRenderbufferEXT;
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer;
extern PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glNamedFramebufferSampleLocationsfvARB;
extern PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glNamedFramebufferSampleLocationsfvNV;
extern PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC glNamedFramebufferSamplePositionsfvAMD;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glNamedFramebufferTexture1DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glNamedFramebufferTexture2DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glNamedFramebufferTexture3DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glNamedFramebufferTextureEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glNamedFramebufferTextureFaceEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glNamedFramebufferTextureLayerEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glNamedProgramLocalParameter4dEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glNamedProgramLocalParameter4dvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glNamedProgramLocalParameter4fEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glNamedProgramLocalParameter4fvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glNamedProgramLocalParameterI4iEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glNamedProgramLocalParameterI4ivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glNamedProgramLocalParameterI4uiEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glNamedProgramLocalParameterI4uivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glNamedProgramLocalParameters4fvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glNamedProgramLocalParametersI4ivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glNamedProgramLocalParametersI4uivEXT;
extern PFNGLNAMEDPROGRAMSTRINGEXTPROC glNamedProgramStringEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glNamedRenderbufferStorageEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glNamedRenderbufferStorageMultisampleCoverageEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glNamedRenderbufferStorageMultisampleEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample;
extern PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage;
extern PFNGLNAMEDSTRINGARBPROC glNamedStringARB;
extern PFNGLNEWOBJECTBUFFERATIPROC glNewObjectBufferATI;
extern PFNGLNORMAL3FVERTEX3FSUNPROC glNormal3fVertex3fSUN;
extern PFNGLNORMAL3FVERTEX3FVSUNPROC glNormal3fVertex3fvSUN;
extern PFNGLNORMAL3HNVPROC glNormal3hNV;
extern PFNGLNORMAL3HVNVPROC glNormal3hvNV;
extern PFNGLNORMAL3XOESPROC glNormal3xOES;
extern PFNGLNORMAL3XVOESPROC glNormal3xvOES;
extern PFNGLNORMALFORMATNVPROC glNormalFormatNV;
extern PFNGLNORMALP3UIPROC glNormalP3ui;
extern PFNGLNORMALP3UIVPROC glNormalP3uiv;
extern PFNGLNORMALPOINTEREXTPROC glNormalPointerEXT;
extern PFNGLNORMALPOINTERLISTIBMPROC glNormalPointerListIBM;
extern PFNGLNORMALPOINTERVINTELPROC glNormalPointervINTEL;
extern PFNGLNORMALSTREAM3BATIPROC glNormalStream3bATI;
extern PFNGLNORMALSTREAM3BVATIPROC glNormalStream3bvATI;
extern PFNGLNORMALSTREAM3DATIPROC glNormalStream3dATI;
extern PFNGLNORMALSTREAM3DVATIPROC glNormalStream3dvATI;
extern PFNGLNORMALSTREAM3FATIPROC glNormalStream3fATI;
extern PFNGLNORMALSTREAM3FVATIPROC glNormalStream3fvATI;
extern PFNGLNORMALSTREAM3IATIPROC glNormalStream3iATI;
extern PFNGLNORMALSTREAM3IVATIPROC glNormalStream3ivATI;
extern PFNGLNORMALSTREAM3SATIPROC glNormalStream3sATI;
extern PFNGLNORMALSTREAM3SVATIPROC glNormalStream3svATI;
extern PFNGLOBJECTLABELPROC glObjectLabel;
extern PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
extern PFNGLOBJECTPURGEABLEAPPLEPROC glObjectPurgeableAPPLE;
extern PFNGLOBJECTUNPURGEABLEAPPLEPROC glObjectUnpurgeableAPPLE;
extern PFNGLORTHOFOESPROC glOrthofOES;
extern PFNGLORTHOXOESPROC glOrthoxOES;
extern PFNGLPASSTEXCOORDATIPROC glPassTexCoordATI;
extern PFNGLPASSTHROUGHXOESPROC glPassThroughxOES;
extern PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
extern PFNGLPATCHPARAMETERIPROC glPatchParameteri;
extern PFNGLPATHCOLORGENNVPROC glPathColorGenNV;
extern PFNGLPATHCOMMANDSNVPROC glPathCommandsNV;
extern PFNGLPATHCOORDSNVPROC glPathCoordsNV;
extern PFNGLPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
extern PFNGLPATHDASHARRAYNVPROC glPathDashArrayNV;
extern PFNGLPATHFOGGENNVPROC glPathFogGenNV;
extern PFNGLPATHGLYPHINDEXARRAYNVPROC glPathGlyphIndexArrayNV;
extern PFNGLPATHGLYPHINDEXRANGENVPROC glPathGlyphIndexRangeNV;
extern PFNGLPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
extern PFNGLPATHGLYPHSNVPROC glPathGlyphsNV;
extern PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC glPathMemoryGlyphIndexArrayNV;
extern PFNGLPATHPARAMETERFNVPROC glPathParameterfNV;
extern PFNGLPATHPARAMETERFVNVPROC glPathParameterfvNV;
extern PFNGLPATHPARAMETERINVPROC glPathParameteriNV;
extern PFNGLPATHPARAMETERIVNVPROC glPathParameterivNV;
extern PFNGLPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
extern PFNGLPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
extern PFNGLPATHSTRINGNVPROC glPathStringNV;
extern PFNGLPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
extern PFNGLPATHSUBCOORDSNVPROC glPathSubCoordsNV;
extern PFNGLPATHTEXGENNVPROC glPathTexGenNV;
extern PFNGLPAUSETRANSFORMFEEDBACKNVPROC glPauseTransformFeedbackNV;
extern PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
extern PFNGLPIXELDATARANGENVPROC glPixelDataRangeNV;
extern PFNGLPIXELMAPXPROC glPixelMapx;
extern PFNGLPIXELSTOREXPROC glPixelStorex;
extern PFNGLPIXELTEXGENPARAMETERFSGISPROC glPixelTexGenParameterfSGIS;
extern PFNGLPIXELTEXGENPARAMETERFVSGISPROC glPixelTexGenParameterfvSGIS;
extern PFNGLPIXELTEXGENPARAMETERISGISPROC glPixelTexGenParameteriSGIS;
extern PFNGLPIXELTEXGENPARAMETERIVSGISPROC glPixelTexGenParameterivSGIS;
extern PFNGLPIXELTEXGENSGIXPROC glPixelTexGenSGIX;
extern PFNGLPIXELTRANSFERXOESPROC glPixelTransferxOES;
extern PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glPixelTransformParameterfEXT;
extern PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glPixelTransformParameterfvEXT;
extern PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glPixelTransformParameteriEXT;
extern PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glPixelTransformParameterivEXT;
extern PFNGLPIXELZOOMXOESPROC glPixelZoomxOES;
extern PFNGLPNTRIANGLESFATIPROC glPNTrianglesfATI;
extern PFNGLPNTRIANGLESIATIPROC glPNTrianglesiATI;
extern PFNGLPOINTALONGPATHNVPROC glPointAlongPathNV;
extern PFNGLPOINTPARAMETERFARBPROC glPointParameterfARB;
extern PFNGLPOINTPARAMETERFEXTPROC glPointParameterfEXT;
extern PFNGLPOINTPARAMETERFPROC glPointParameterf;
extern PFNGLPOINTPARAMETERFSGISPROC glPointParameterfSGIS;
extern PFNGLPOINTPARAMETERFVARBPROC glPointParameterfvARB;
extern PFNGLPOINTPARAMETERFVEXTPROC glPointParameterfvEXT;
extern PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
extern PFNGLPOINTPARAMETERFVSGISPROC glPointParameterfvSGIS;
extern PFNGLPOINTPARAMETERINVPROC glPointParameteriNV;
extern PFNGLPOINTPARAMETERIPROC glPointParameteri;
extern PFNGLPOINTPARAMETERIVNVPROC glPointParameterivNV;
extern PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
extern PFNGLPOINTPARAMETERXVOESPROC glPointParameterxvOES;
extern PFNGLPOINTSIZEXOESPROC glPointSizexOES;
extern PFNGLPOLLASYNCSGIXPROC glPollAsyncSGIX;
extern PFNGLPOLLINSTRUMENTSSGIXPROC glPollInstrumentsSGIX;
extern PFNGLPOLYGONOFFSETCLAMPEXTPROC glPolygonOffsetClampEXT;
extern PFNGLPOLYGONOFFSETEXTPROC glPolygonOffsetEXT;
extern PFNGLPOLYGONOFFSETXOESPROC glPolygonOffsetxOES;
extern PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
extern PFNGLPOPGROUPMARKEREXTPROC glPopGroupMarkerEXT;
extern PFNGLPRESENTFRAMEDUALFILLNVPROC glPresentFrameDualFillNV;
extern PFNGLPRESENTFRAMEKEYEDNVPROC glPresentFrameKeyedNV;
extern PFNGLPRIMITIVEBOUNDINGBOXARBPROC glPrimitiveBoundingBoxARB;
extern PFNGLPRIMITIVERESTARTINDEXNVPROC glPrimitiveRestartIndexNV;
extern PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
extern PFNGLPRIMITIVERESTARTNVPROC glPrimitiveRestartNV;
extern PFNGLPRIORITIZETEXTURESEXTPROC glPrioritizeTexturesEXT;
extern PFNGLPRIORITIZETEXTURESXOESPROC glPrioritizeTexturesxOES;
extern PFNGLPROGRAMBINARYPROC glProgramBinary;
extern PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glProgramBufferParametersfvNV;
extern PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glProgramBufferParametersIivNV;
extern PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glProgramBufferParametersIuivNV;
extern PFNGLPROGRAMENVPARAMETER4DARBPROC glProgramEnvParameter4dARB;
extern PFNGLPROGRAMENVPARAMETER4DVARBPROC glProgramEnvParameter4dvARB;
extern PFNGLPROGRAMENVPARAMETER4FARBPROC glProgramEnvParameter4fARB;
extern PFNGLPROGRAMENVPARAMETER4FVARBPROC glProgramEnvParameter4fvARB;
extern PFNGLPROGRAMENVPARAMETERI4INVPROC glProgramEnvParameterI4iNV;
extern PFNGLPROGRAMENVPARAMETERI4IVNVPROC glProgramEnvParameterI4ivNV;
extern PFNGLPROGRAMENVPARAMETERI4UINVPROC glProgramEnvParameterI4uiNV;
extern PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glProgramEnvParameterI4uivNV;
extern PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glProgramEnvParameters4fvEXT;
extern PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glProgramEnvParametersI4ivNV;
extern PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glProgramEnvParametersI4uivNV;
extern PFNGLPROGRAMLOCALPARAMETER4DARBPROC glProgramLocalParameter4dARB;
extern PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glProgramLocalParameter4dvARB;
extern PFNGLPROGRAMLOCALPARAMETER4FARBPROC glProgramLocalParameter4fARB;
extern PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glProgramLocalParameter4fvARB;
extern PFNGLPROGRAMLOCALPARAMETERI4INVPROC glProgramLocalParameterI4iNV;
extern PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glProgramLocalParameterI4ivNV;
extern PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glProgramLocalParameterI4uiNV;
extern PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glProgramLocalParameterI4uivNV;
extern PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glProgramLocalParameters4fvEXT;
extern PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glProgramLocalParametersI4ivNV;
extern PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glProgramLocalParametersI4uivNV;
extern PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glProgramNamedParameter4dNV;
extern PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glProgramNamedParameter4dvNV;
extern PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glProgramNamedParameter4fNV;
extern PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glProgramNamedParameter4fvNV;
extern PFNGLPROGRAMPARAMETER4DNVPROC glProgramParameter4dNV;
extern PFNGLPROGRAMPARAMETER4DVNVPROC glProgramParameter4dvNV;
extern PFNGLPROGRAMPARAMETER4FNVPROC glProgramParameter4fNV;
extern PFNGLPROGRAMPARAMETER4FVNVPROC glProgramParameter4fvNV;
extern PFNGLPROGRAMPARAMETERIARBPROC glProgramParameteriARB;
extern PFNGLPROGRAMPARAMETERIEXTPROC glProgramParameteriEXT;
extern PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
extern PFNGLPROGRAMPARAMETERS4DVNVPROC glProgramParameters4dvNV;
extern PFNGLPROGRAMPARAMETERS4FVNVPROC glProgramParameters4fvNV;
extern PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC glProgramPathFragmentInputGenNV;
extern PFNGLPROGRAMSTRINGARBPROC glProgramStringARB;
extern PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC glProgramSubroutineParametersuivNV;
extern PFNGLPROGRAMUNIFORM1DEXTPROC glProgramUniform1dEXT;
extern PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
extern PFNGLPROGRAMUNIFORM1DVEXTPROC glProgramUniform1dvEXT;
extern PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
extern PFNGLPROGRAMUNIFORM1FEXTPROC glProgramUniform1fEXT;
extern PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
extern PFNGLPROGRAMUNIFORM1FVEXTPROC glProgramUniform1fvEXT;
extern PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
extern PFNGLPROGRAMUNIFORM1I64ARBPROC glProgramUniform1i64ARB;
extern PFNGLPROGRAMUNIFORM1I64NVPROC glProgramUniform1i64NV;
extern PFNGLPROGRAMUNIFORM1I64VARBPROC glProgramUniform1i64vARB;
extern PFNGLPROGRAMUNIFORM1I64VNVPROC glProgramUniform1i64vNV;
extern PFNGLPROGRAMUNIFORM1IEXTPROC glProgramUniform1iEXT;
extern PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
extern PFNGLPROGRAMUNIFORM1IVEXTPROC glProgramUniform1ivEXT;
extern PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
extern PFNGLPROGRAMUNIFORM1UI64ARBPROC glProgramUniform1ui64ARB;
extern PFNGLPROGRAMUNIFORM1UI64NVPROC glProgramUniform1ui64NV;
extern PFNGLPROGRAMUNIFORM1UI64VARBPROC glProgramUniform1ui64vARB;
extern PFNGLPROGRAMUNIFORM1UI64VNVPROC glProgramUniform1ui64vNV;
extern PFNGLPROGRAMUNIFORM1UIEXTPROC glProgramUniform1uiEXT;
extern PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
extern PFNGLPROGRAMUNIFORM1UIVEXTPROC glProgramUniform1uivEXT;
extern PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
extern PFNGLPROGRAMUNIFORM2DEXTPROC glProgramUniform2dEXT;
extern PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
extern PFNGLPROGRAMUNIFORM2DVEXTPROC glProgramUniform2dvEXT;
extern PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
extern PFNGLPROGRAMUNIFORM2FEXTPROC glProgramUniform2fEXT;
extern PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
extern PFNGLPROGRAMUNIFORM2FVEXTPROC glProgramUniform2fvEXT;
extern PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
extern PFNGLPROGRAMUNIFORM2I64ARBPROC glProgramUniform2i64ARB;
extern PFNGLPROGRAMUNIFORM2I64NVPROC glProgramUniform2i64NV;
extern PFNGLPROGRAMUNIFORM2I64VARBPROC glProgramUniform2i64vARB;
extern PFNGLPROGRAMUNIFORM2I64VNVPROC glProgramUniform2i64vNV;
extern PFNGLPROGRAMUNIFORM2IEXTPROC glProgramUniform2iEXT;
extern PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
extern PFNGLPROGRAMUNIFORM2IVEXTPROC glProgramUniform2ivEXT;
extern PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
extern PFNGLPROGRAMUNIFORM2UI64ARBPROC glProgramUniform2ui64ARB;
extern PFNGLPROGRAMUNIFORM2UI64NVPROC glProgramUniform2ui64NV;
extern PFNGLPROGRAMUNIFORM2UI64VARBPROC glProgramUniform2ui64vARB;
extern PFNGLPROGRAMUNIFORM2UI64VNVPROC glProgramUniform2ui64vNV;
extern PFNGLPROGRAMUNIFORM2UIEXTPROC glProgramUniform2uiEXT;
extern PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
extern PFNGLPROGRAMUNIFORM2UIVEXTPROC glProgramUniform2uivEXT;
extern PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
extern PFNGLPROGRAMUNIFORM3DEXTPROC glProgramUniform3dEXT;
extern PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
extern PFNGLPROGRAMUNIFORM3DVEXTPROC glProgramUniform3dvEXT;
extern PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
extern PFNGLPROGRAMUNIFORM3FEXTPROC glProgramUniform3fEXT;
extern PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
extern PFNGLPROGRAMUNIFORM3FVEXTPROC glProgramUniform3fvEXT;
extern PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
extern PFNGLPROGRAMUNIFORM3I64ARBPROC glProgramUniform3i64ARB;
extern PFNGLPROGRAMUNIFORM3I64NVPROC glProgramUniform3i64NV;
extern PFNGLPROGRAMUNIFORM3I64VARBPROC glProgramUniform3i64vARB;
extern PFNGLPROGRAMUNIFORM3I64VNVPROC glProgramUniform3i64vNV;
extern PFNGLPROGRAMUNIFORM3IEXTPROC glProgramUniform3iEXT;
extern PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
extern PFNGLPROGRAMUNIFORM3IVEXTPROC glProgramUniform3ivEXT;
extern PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
extern PFNGLPROGRAMUNIFORM3UI64ARBPROC glProgramUniform3ui64ARB;
extern PFNGLPROGRAMUNIFORM3UI64NVPROC glProgramUniform3ui64NV;
extern PFNGLPROGRAMUNIFORM3UI64VARBPROC glProgramUniform3ui64vARB;
extern PFNGLPROGRAMUNIFORM3UI64VNVPROC glProgramUniform3ui64vNV;
extern PFNGLPROGRAMUNIFORM3UIEXTPROC glProgramUniform3uiEXT;
extern PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
extern PFNGLPROGRAMUNIFORM3UIVEXTPROC glProgramUniform3uivEXT;
extern PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
extern PFNGLPROGRAMUNIFORM4DEXTPROC glProgramUniform4dEXT;
extern PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
extern PFNGLPROGRAMUNIFORM4DVEXTPROC glProgramUniform4dvEXT;
extern PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
extern PFNGLPROGRAMUNIFORM4FEXTPROC glProgramUniform4fEXT;
extern PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
extern PFNGLPROGRAMUNIFORM4FVEXTPROC glProgramUniform4fvEXT;
extern PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
extern PFNGLPROGRAMUNIFORM4I64ARBPROC glProgramUniform4i64ARB;
extern PFNGLPROGRAMUNIFORM4I64NVPROC glProgramUniform4i64NV;
extern PFNGLPROGRAMUNIFORM4I64VARBPROC glProgramUniform4i64vARB;
extern PFNGLPROGRAMUNIFORM4I64VNVPROC glProgramUniform4i64vNV;
extern PFNGLPROGRAMUNIFORM4IEXTPROC glProgramUniform4iEXT;
extern PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
extern PFNGLPROGRAMUNIFORM4IVEXTPROC glProgramUniform4ivEXT;
extern PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
extern PFNGLPROGRAMUNIFORM4UI64ARBPROC glProgramUniform4ui64ARB;
extern PFNGLPROGRAMUNIFORM4UI64NVPROC glProgramUniform4ui64NV;
extern PFNGLPROGRAMUNIFORM4UI64VARBPROC glProgramUniform4ui64vARB;
extern PFNGLPROGRAMUNIFORM4UI64VNVPROC glProgramUniform4ui64vNV;
extern PFNGLPROGRAMUNIFORM4UIEXTPROC glProgramUniform4uiEXT;
extern PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
extern PFNGLPROGRAMUNIFORM4UIVEXTPROC glProgramUniform4uivEXT;
extern PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
extern PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glProgramUniformHandleui64ARB;
extern PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glProgramUniformHandleui64NV;
extern PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glProgramUniformHandleui64vARB;
extern PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glProgramUniformHandleui64vNV;
extern PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glProgramUniformMatrix2dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
extern PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glProgramUniformMatrix2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glProgramUniformMatrix2x3dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glProgramUniformMatrix2x3fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glProgramUniformMatrix2x4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glProgramUniformMatrix2x4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glProgramUniformMatrix3dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
extern PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glProgramUniformMatrix3fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glProgramUniformMatrix3x2dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glProgramUniformMatrix3x2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glProgramUniformMatrix3x4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glProgramUniformMatrix3x4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glProgramUniformMatrix4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
extern PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glProgramUniformMatrix4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glProgramUniformMatrix4x2dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glProgramUniformMatrix4x2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glProgramUniformMatrix4x3dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glProgramUniformMatrix4x3fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
extern PFNGLPROGRAMUNIFORMUI64NVPROC glProgramUniformui64NV;
extern PFNGLPROGRAMUNIFORMUI64VNVPROC glProgramUniformui64vNV;
extern PFNGLPROGRAMVERTEXLIMITNVPROC glProgramVertexLimitNV;
extern PFNGLPROVOKINGVERTEXEXTPROC glProvokingVertexEXT;
extern PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
extern PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glPushClientAttribDefaultEXT;
extern PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
extern PFNGLPUSHGROUPMARKEREXTPROC glPushGroupMarkerEXT;
extern PFNGLQUERYCOUNTERPROC glQueryCounter;
extern PFNGLQUERYMATRIXXOESPROC glQueryMatrixxOES;
extern PFNGLQUERYOBJECTPARAMETERUIAMDPROC glQueryObjectParameteruiAMD;
extern PFNGLRASTERPOS2XOESPROC glRasterPos2xOES;
extern PFNGLRASTERPOS2XVOESPROC glRasterPos2xvOES;
extern PFNGLRASTERPOS3XOESPROC glRasterPos3xOES;
extern PFNGLRASTERPOS3XVOESPROC glRasterPos3xvOES;
extern PFNGLRASTERPOS4XOESPROC glRasterPos4xOES;
extern PFNGLRASTERPOS4XVOESPROC glRasterPos4xvOES;
extern PFNGLRASTERSAMPLESEXTPROC glRasterSamplesEXT;
extern PFNGLREADINSTRUMENTSSGIXPROC glReadInstrumentsSGIX;
extern PFNGLREADNPIXELSARBPROC glReadnPixelsARB;
extern PFNGLREADNPIXELSPROC glReadnPixels;
extern PFNGLRECTXOESPROC glRectxOES;
extern PFNGLRECTXVOESPROC glRectxvOES;
extern PFNGLREFERENCEPLANESGIXPROC glReferencePlaneSGIX;
extern PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
extern PFNGLRENDERBUFFERSTORAGEEXTPROC glRenderbufferStorageEXT;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glRenderbufferStorageMultisampleCoverageNV;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glRenderbufferStorageMultisampleEXT;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
extern PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
extern PFNGLRENDERGPUMASKNVPROC glRenderGpuMaskNV;
extern PFNGLREPLACEMENTCODEPOINTERSUNPROC glReplacementCodePointerSUN;
extern PFNGLREPLACEMENTCODEUBSUNPROC glReplacementCodeubSUN;
extern PFNGLREPLACEMENTCODEUBVSUNPROC glReplacementCodeubvSUN;
extern PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glReplacementCodeuiColor3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glReplacementCodeuiColor3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glReplacementCodeuiColor4ubVertex3fSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glReplacementCodeuiColor4ubVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glReplacementCodeuiNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUISUNPROC glReplacementCodeuiSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glReplacementCodeuiVertex3fSUN;
extern PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glReplacementCodeuiVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUIVSUNPROC glReplacementCodeuivSUN;
extern PFNGLREPLACEMENTCODEUSSUNPROC glReplacementCodeusSUN;
extern PFNGLREPLACEMENTCODEUSVSUNPROC glReplacementCodeusvSUN;
extern PFNGLREQUESTRESIDENTPROGRAMSNVPROC glRequestResidentProgramsNV;
extern PFNGLRESETHISTOGRAMEXTPROC glResetHistogramEXT;
extern PFNGLRESETHISTOGRAMPROC glResetHistogram;
extern PFNGLRESETMINMAXEXTPROC glResetMinmaxEXT;
extern PFNGLRESETMINMAXPROC glResetMinmax;
extern PFNGLRESIZEBUFFERSMESAPROC glResizeBuffersMESA;
extern PFNGLRESOLVEDEPTHVALUESNVPROC glResolveDepthValuesNV;
extern PFNGLRESUMETRANSFORMFEEDBACKNVPROC glResumeTransformFeedbackNV;
extern PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
extern PFNGLROTATEXOESPROC glRotatexOES;
extern PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB;
extern PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
extern PFNGLSAMPLEMAPATIPROC glSampleMapATI;
extern PFNGLSAMPLEMASKEXTPROC glSampleMaskEXT;
extern PFNGLSAMPLEMASKINDEXEDNVPROC glSampleMaskIndexedNV;
extern PFNGLSAMPLEMASKIPROC glSampleMaski;
extern PFNGLSAMPLEMASKSGISPROC glSampleMaskSGIS;
extern PFNGLSAMPLEPATTERNEXTPROC glSamplePatternEXT;
extern PFNGLSAMPLEPATTERNSGISPROC glSamplePatternSGIS;
extern PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
extern PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
extern PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
extern PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
extern PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
extern PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
extern PFNGLSCALEXOESPROC glScalexOES;
extern PFNGLSCISSORARRAYVPROC glScissorArrayv;
extern PFNGLSCISSORINDEXEDPROC glScissorIndexed;
extern PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
extern PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT;
extern PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b;
extern PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT;
extern PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv;
extern PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT;
extern PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d;
extern PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT;
extern PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv;
extern PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT;
extern PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f;
extern PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT;
extern PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv;
extern PFNGLSECONDARYCOLOR3HNVPROC glSecondaryColor3hNV;
extern PFNGLSECONDARYCOLOR3HVNVPROC glSecondaryColor3hvNV;
extern PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT;
extern PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i;
extern PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT;
extern PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv;
extern PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT;
extern PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s;
extern PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT;
extern PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv;
extern PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT;
extern PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub;
extern PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT;
extern PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv;
extern PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT;
extern PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui;
extern PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT;
extern PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv;
extern PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT;
extern PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us;
extern PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT;
extern PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv;
extern PFNGLSECONDARYCOLORFORMATNVPROC glSecondaryColorFormatNV;
extern PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui;
extern PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv;
extern PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT;
extern PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glSecondaryColorPointerListIBM;
extern PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer;
extern PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glSelectPerfMonitorCountersAMD;
extern PFNGLSEPARABLEFILTER2DEXTPROC glSeparableFilter2DEXT;
extern PFNGLSEPARABLEFILTER2DPROC glSeparableFilter2D;
extern PFNGLSETFENCEAPPLEPROC glSetFenceAPPLE;
extern PFNGLSETFENCENVPROC glSetFenceNV;
extern PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glSetFragmentShaderConstantATI;
extern PFNGLSETINVARIANTEXTPROC glSetInvariantEXT;
extern PFNGLSETLOCALCONSTANTEXTPROC glSetLocalConstantEXT;
extern PFNGLSETMULTISAMPLEFVAMDPROC glSetMultisamplefvAMD;
extern PFNGLSHADERBINARYPROC glShaderBinary;
extern PFNGLSHADEROP1EXTPROC glShaderOp1EXT;
extern PFNGLSHADEROP2EXTPROC glShaderOp2EXT;
extern PFNGLSHADEROP3EXTPROC glShaderOp3EXT;
extern PFNGLSHADERSOURCEARBPROC glShaderSourceARB;
extern PFNGLSHADERSOURCEPROC glShaderSource;
extern PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
extern PFNGLSHARPENTEXFUNCSGISPROC glSharpenTexFuncSGIS;
extern PFNGLSIGNALVKFENCENVPROC glSignalVkFenceNV;
extern PFNGLSIGNALVKSEMAPHORENVPROC glSignalVkSemaphoreNV;
extern PFNGLSPECIALIZESHADERARBPROC glSpecializeShaderARB;
extern PFNGLSPRITEPARAMETERFSGIXPROC glSpriteParameterfSGIX;
extern PFNGLSPRITEPARAMETERFVSGIXPROC glSpriteParameterfvSGIX;
extern PFNGLSPRITEPARAMETERISGIXPROC glSpriteParameteriSGIX;
extern PFNGLSPRITEPARAMETERIVSGIXPROC glSpriteParameterivSGIX;
extern PFNGLSTARTINSTRUMENTSSGIXPROC glStartInstrumentsSGIX;
extern PFNGLSTATECAPTURENVPROC glStateCaptureNV;
extern PFNGLSTENCILCLEARTAGEXTPROC glStencilClearTagEXT;
extern PFNGLSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
extern PFNGLSTENCILFILLPATHNVPROC glStencilFillPathNV;
extern PFNGLSTENCILFUNCSEPARATEATIPROC glStencilFuncSeparateATI;
extern PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
extern PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
extern PFNGLSTENCILOPSEPARATEATIPROC glStencilOpSeparateATI;
extern PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
extern PFNGLSTENCILOPVALUEAMDPROC glStencilOpValueAMD;
extern PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
extern PFNGLSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
extern PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC glStencilThenCoverFillPathInstancedNV;
extern PFNGLSTENCILTHENCOVERFILLPATHNVPROC glStencilThenCoverFillPathNV;
extern PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC glStencilThenCoverStrokePathInstancedNV;
extern PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC glStencilThenCoverStrokePathNV;
extern PFNGLSTOPINSTRUMENTSSGIXPROC glStopInstrumentsSGIX;
extern PFNGLSTRINGMARKERGREMEDYPROC glStringMarkerGREMEDY;
extern PFNGLSUBPIXELPRECISIONBIASNVPROC glSubpixelPrecisionBiasNV;
extern PFNGLSWIZZLEEXTPROC glSwizzleEXT;
extern PFNGLSYNCTEXTUREINTELPROC glSyncTextureINTEL;
extern PFNGLTAGSAMPLEBUFFERSGIXPROC glTagSampleBufferSGIX;
extern PFNGLTANGENT3BEXTPROC glTangent3bEXT;
extern PFNGLTANGENT3BVEXTPROC glTangent3bvEXT;
extern PFNGLTANGENT3DEXTPROC glTangent3dEXT;
extern PFNGLTANGENT3DVEXTPROC glTangent3dvEXT;
extern PFNGLTANGENT3FEXTPROC glTangent3fEXT;
extern PFNGLTANGENT3FVEXTPROC glTangent3fvEXT;
extern PFNGLTANGENT3IEXTPROC glTangent3iEXT;
extern PFNGLTANGENT3IVEXTPROC glTangent3ivEXT;
extern PFNGLTANGENT3SEXTPROC glTangent3sEXT;
extern PFNGLTANGENT3SVEXTPROC glTangent3svEXT;
extern PFNGLTANGENTPOINTEREXTPROC glTangentPointerEXT;
extern PFNGLTBUFFERMASK3DFXPROC glTbufferMask3DFX;
extern PFNGLTESSELLATIONFACTORAMDPROC glTessellationFactorAMD;
extern PFNGLTESSELLATIONMODEAMDPROC glTessellationModeAMD;
extern PFNGLTESTFENCEAPPLEPROC glTestFenceAPPLE;
extern PFNGLTESTFENCENVPROC glTestFenceNV;
extern PFNGLTESTOBJECTAPPLEPROC glTestObjectAPPLE;
extern PFNGLTEXBUFFERARBPROC glTexBufferARB;
extern PFNGLTEXBUFFEREXTPROC glTexBufferEXT;
extern PFNGLTEXBUFFERPROC glTexBuffer;
extern PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
extern PFNGLTEXBUMPPARAMETERFVATIPROC glTexBumpParameterfvATI;
extern PFNGLTEXBUMPPARAMETERIVATIPROC glTexBumpParameterivATI;
extern PFNGLTEXCOORD1BOESPROC glTexCoord1bOES;
extern PFNGLTEXCOORD1BVOESPROC glTexCoord1bvOES;
extern PFNGLTEXCOORD1HNVPROC glTexCoord1hNV;
extern PFNGLTEXCOORD1HVNVPROC glTexCoord1hvNV;
extern PFNGLTEXCOORD1XOESPROC glTexCoord1xOES;
extern PFNGLTEXCOORD1XVOESPROC glTexCoord1xvOES;
extern PFNGLTEXCOORD2BOESPROC glTexCoord2bOES;
extern PFNGLTEXCOORD2BVOESPROC glTexCoord2bvOES;
extern PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glTexCoord2fColor3fVertex3fSUN;
extern PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glTexCoord2fColor3fVertex3fvSUN;
extern PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glTexCoord2fColor4fNormal3fVertex3fSUN;
extern PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fColor4fNormal3fVertex3fvSUN;
extern PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glTexCoord2fColor4ubVertex3fSUN;
extern PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glTexCoord2fColor4ubVertex3fvSUN;
extern PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glTexCoord2fNormal3fVertex3fSUN;
extern PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fNormal3fVertex3fvSUN;
extern PFNGLTEXCOORD2FVERTEX3FSUNPROC glTexCoord2fVertex3fSUN;
extern PFNGLTEXCOORD2FVERTEX3FVSUNPROC glTexCoord2fVertex3fvSUN;
extern PFNGLTEXCOORD2HNVPROC glTexCoord2hNV;
extern PFNGLTEXCOORD2HVNVPROC glTexCoord2hvNV;
extern PFNGLTEXCOORD2XOESPROC glTexCoord2xOES;
extern PFNGLTEXCOORD2XVOESPROC glTexCoord2xvOES;
extern PFNGLTEXCOORD3BOESPROC glTexCoord3bOES;
extern PFNGLTEXCOORD3BVOESPROC glTexCoord3bvOES;
extern PFNGLTEXCOORD3HNVPROC glTexCoord3hNV;
extern PFNGLTEXCOORD3HVNVPROC glTexCoord3hvNV;
extern PFNGLTEXCOORD3XOESPROC glTexCoord3xOES;
extern PFNGLTEXCOORD3XVOESPROC glTexCoord3xvOES;
extern PFNGLTEXCOORD4BOESPROC glTexCoord4bOES;
extern PFNGLTEXCOORD4BVOESPROC glTexCoord4bvOES;
extern PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glTexCoord4fColor4fNormal3fVertex4fSUN;
extern PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glTexCoord4fColor4fNormal3fVertex4fvSUN;
extern PFNGLTEXCOORD4FVERTEX4FSUNPROC glTexCoord4fVertex4fSUN;
extern PFNGLTEXCOORD4FVERTEX4FVSUNPROC glTexCoord4fVertex4fvSUN;
extern PFNGLTEXCOORD4HNVPROC glTexCoord4hNV;
extern PFNGLTEXCOORD4HVNVPROC glTexCoord4hvNV;
extern PFNGLTEXCOORD4XOESPROC glTexCoord4xOES;
extern PFNGLTEXCOORD4XVOESPROC glTexCoord4xvOES;
extern PFNGLTEXCOORDFORMATNVPROC glTexCoordFormatNV;
extern PFNGLTEXCOORDP1UIPROC glTexCoordP1ui;
extern PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv;
extern PFNGLTEXCOORDP2UIPROC glTexCoordP2ui;
extern PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv;
extern PFNGLTEXCOORDP3UIPROC glTexCoordP3ui;
extern PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv;
extern PFNGLTEXCOORDP4UIPROC glTexCoordP4ui;
extern PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv;
extern PFNGLTEXCOORDPOINTEREXTPROC glTexCoordPointerEXT;
extern PFNGLTEXCOORDPOINTERLISTIBMPROC glTexCoordPointerListIBM;
extern PFNGLTEXCOORDPOINTERVINTELPROC glTexCoordPointervINTEL;
extern PFNGLTEXENVXOESPROC glTexEnvxOES;
extern PFNGLTEXENVXVOESPROC glTexEnvxvOES;
extern PFNGLTEXFILTERFUNCSGISPROC glTexFilterFuncSGIS;
extern PFNGLTEXGENXOESPROC glTexGenxOES;
extern PFNGLTEXGENXVOESPROC glTexGenxvOES;
extern PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glTexImage2DMultisampleCoverageNV;
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
extern PFNGLTEXIMAGE3DEXTPROC glTexImage3DEXT;
extern PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glTexImage3DMultisampleCoverageNV;
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
extern PFNGLTEXIMAGE3DPROC glTexImage3D;
extern PFNGLTEXIMAGE4DSGISPROC glTexImage4DSGIS;
extern PFNGLTEXPAGECOMMITMENTARBPROC glTexPageCommitmentARB;
extern PFNGLTEXPARAMETERIIVEXTPROC glTexParameterIivEXT;
extern PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
extern PFNGLTEXPARAMETERIUIVEXTPROC glTexParameterIuivEXT;
extern PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
extern PFNGLTEXPARAMETERXOESPROC glTexParameterxOES;
extern PFNGLTEXPARAMETERXVOESPROC glTexParameterxvOES;
extern PFNGLTEXRENDERBUFFERNVPROC glTexRenderbufferNV;
extern PFNGLTEXSTORAGE1DPROC glTexStorage1D;
extern PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
extern PFNGLTEXSTORAGE2DPROC glTexStorage2D;
extern PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
extern PFNGLTEXSTORAGE3DPROC glTexStorage3D;
extern PFNGLTEXSTORAGESPARSEAMDPROC glTexStorageSparseAMD;
extern PFNGLTEXSUBIMAGE1DEXTPROC glTexSubImage1DEXT;
extern PFNGLTEXSUBIMAGE2DEXTPROC glTexSubImage2DEXT;
extern PFNGLTEXSUBIMAGE3DEXTPROC glTexSubImage3DEXT;
extern PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
extern PFNGLTEXSUBIMAGE4DSGISPROC glTexSubImage4DSGIS;
extern PFNGLTEXTUREBARRIERNVPROC glTextureBarrierNV;
extern PFNGLTEXTUREBARRIERPROC glTextureBarrier;
extern PFNGLTEXTUREBUFFEREXTPROC glTextureBufferEXT;
extern PFNGLTEXTUREBUFFERPROC glTextureBuffer;
extern PFNGLTEXTUREBUFFERRANGEEXTPROC glTextureBufferRangeEXT;
extern PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange;
extern PFNGLTEXTURECOLORMASKSGISPROC glTextureColorMaskSGIS;
extern PFNGLTEXTUREIMAGE1DEXTPROC glTextureImage1DEXT;
extern PFNGLTEXTUREIMAGE2DEXTPROC glTextureImage2DEXT;
extern PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glTextureImage2DMultisampleCoverageNV;
extern PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glTextureImage2DMultisampleNV;
extern PFNGLTEXTUREIMAGE3DEXTPROC glTextureImage3DEXT;
extern PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glTextureImage3DMultisampleCoverageNV;
extern PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glTextureImage3DMultisampleNV;
extern PFNGLTEXTURELIGHTEXTPROC glTextureLightEXT;
extern PFNGLTEXTUREMATERIALEXTPROC glTextureMaterialEXT;
extern PFNGLTEXTURENORMALEXTPROC glTextureNormalEXT;
extern PFNGLTEXTUREPAGECOMMITMENTEXTPROC glTexturePageCommitmentEXT;
extern PFNGLTEXTUREPARAMETERFEXTPROC glTextureParameterfEXT;
extern PFNGLTEXTUREPARAMETERFPROC glTextureParameterf;
extern PFNGLTEXTUREPARAMETERFVEXTPROC glTextureParameterfvEXT;
extern PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv;
extern PFNGLTEXTUREPARAMETERIEXTPROC glTextureParameteriEXT;
extern PFNGLTEXTUREPARAMETERIIVEXTPROC glTextureParameterIivEXT;
extern PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv;
extern PFNGLTEXTUREPARAMETERIPROC glTextureParameteri;
extern PFNGLTEXTUREPARAMETERIUIVEXTPROC glTextureParameterIuivEXT;
extern PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv;
extern PFNGLTEXTUREPARAMETERIVEXTPROC glTextureParameterivEXT;
extern PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv;
extern PFNGLTEXTURERANGEAPPLEPROC glTextureRangeAPPLE;
extern PFNGLTEXTURERENDERBUFFEREXTPROC glTextureRenderbufferEXT;
extern PFNGLTEXTURESTORAGE1DEXTPROC glTextureStorage1DEXT;
extern PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D;
extern PFNGLTEXTURESTORAGE2DEXTPROC glTextureStorage2DEXT;
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glTextureStorage2DMultisampleEXT;
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample;
extern PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D;
extern PFNGLTEXTURESTORAGE3DEXTPROC glTextureStorage3DEXT;
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glTextureStorage3DMultisampleEXT;
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample;
extern PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D;
extern PFNGLTEXTURESTORAGESPARSEAMDPROC glTextureStorageSparseAMD;
extern PFNGLTEXTURESUBIMAGE1DEXTPROC glTextureSubImage1DEXT;
extern PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D;
extern PFNGLTEXTURESUBIMAGE2DEXTPROC glTextureSubImage2DEXT;
extern PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D;
extern PFNGLTEXTURESUBIMAGE3DEXTPROC glTextureSubImage3DEXT;
extern PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D;
extern PFNGLTEXTUREVIEWPROC glTextureView;
extern PFNGLTRACKMATRIXNVPROC glTrackMatrixNV;
extern PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glTransformFeedbackAttribsNV;
extern PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase;
extern PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange;
extern PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glTransformFeedbackStreamAttribsNV;
extern PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glTransformFeedbackVaryingsEXT;
extern PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glTransformFeedbackVaryingsNV;
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
extern PFNGLTRANSFORMPATHNVPROC glTransformPathNV;
extern PFNGLTRANSLATEXOESPROC glTranslatexOES;
extern PFNGLUNIFORM1DPROC glUniform1d;
extern PFNGLUNIFORM1DVPROC glUniform1dv;
extern PFNGLUNIFORM1FARBPROC glUniform1fARB;
extern PFNGLUNIFORM1FPROC glUniform1f;
extern PFNGLUNIFORM1FVARBPROC glUniform1fvARB;
extern PFNGLUNIFORM1FVPROC glUniform1fv;
extern PFNGLUNIFORM1I64ARBPROC glUniform1i64ARB;
extern PFNGLUNIFORM1I64NVPROC glUniform1i64NV;
extern PFNGLUNIFORM1I64VARBPROC glUniform1i64vARB;
extern PFNGLUNIFORM1I64VNVPROC glUniform1i64vNV;
extern PFNGLUNIFORM1IARBPROC glUniform1iARB;
extern PFNGLUNIFORM1IPROC glUniform1i;
extern PFNGLUNIFORM1IVARBPROC glUniform1ivARB;
extern PFNGLUNIFORM1IVPROC glUniform1iv;
extern PFNGLUNIFORM1UI64ARBPROC glUniform1ui64ARB;
extern PFNGLUNIFORM1UI64NVPROC glUniform1ui64NV;
extern PFNGLUNIFORM1UI64VARBPROC glUniform1ui64vARB;
extern PFNGLUNIFORM1UI64VNVPROC glUniform1ui64vNV;
extern PFNGLUNIFORM1UIEXTPROC glUniform1uiEXT;
extern PFNGLUNIFORM1UIPROC glUniform1ui;
extern PFNGLUNIFORM1UIVEXTPROC glUniform1uivEXT;
extern PFNGLUNIFORM1UIVPROC glUniform1uiv;
extern PFNGLUNIFORM2DPROC glUniform2d;
extern PFNGLUNIFORM2DVPROC glUniform2dv;
extern PFNGLUNIFORM2FARBPROC glUniform2fARB;
extern PFNGLUNIFORM2FPROC glUniform2f;
extern PFNGLUNIFORM2FVARBPROC glUniform2fvARB;
extern PFNGLUNIFORM2FVPROC glUniform2fv;
extern PFNGLUNIFORM2I64ARBPROC glUniform2i64ARB;
extern PFNGLUNIFORM2I64NVPROC glUniform2i64NV;
extern PFNGLUNIFORM2I64VARBPROC glUniform2i64vARB;
extern PFNGLUNIFORM2I64VNVPROC glUniform2i64vNV;
extern PFNGLUNIFORM2IARBPROC glUniform2iARB;
extern PFNGLUNIFORM2IPROC glUniform2i;
extern PFNGLUNIFORM2IVARBPROC glUniform2ivARB;
extern PFNGLUNIFORM2IVPROC glUniform2iv;
extern PFNGLUNIFORM2UI64ARBPROC glUniform2ui64ARB;
extern PFNGLUNIFORM2UI64NVPROC glUniform2ui64NV;
extern PFNGLUNIFORM2UI64VARBPROC glUniform2ui64vARB;
extern PFNGLUNIFORM2UI64VNVPROC glUniform2ui64vNV;
extern PFNGLUNIFORM2UIEXTPROC glUniform2uiEXT;
extern PFNGLUNIFORM2UIPROC glUniform2ui;
extern PFNGLUNIFORM2UIVEXTPROC glUniform2uivEXT;
extern PFNGLUNIFORM2UIVPROC glUniform2uiv;
extern PFNGLUNIFORM3DPROC glUniform3d;
extern PFNGLUNIFORM3DVPROC glUniform3dv;
extern PFNGLUNIFORM3FARBPROC glUniform3fARB;
extern PFNGLUNIFORM3FPROC glUniform3f;
extern PFNGLUNIFORM3FVARBPROC glUniform3fvARB;
extern PFNGLUNIFORM3FVPROC glUniform3fv;
extern PFNGLUNIFORM3I64ARBPROC glUniform3i64ARB;
extern PFNGLUNIFORM3I64NVPROC glUniform3i64NV;
extern PFNGLUNIFORM3I64VARBPROC glUniform3i64vARB;
extern PFNGLUNIFORM3I64VNVPROC glUniform3i64vNV;
extern PFNGLUNIFORM3IARBPROC glUniform3iARB;
extern PFNGLUNIFORM3IPROC glUniform3i;
extern PFNGLUNIFORM3IVARBPROC glUniform3ivARB;
extern PFNGLUNIFORM3IVPROC glUniform3iv;
extern PFNGLUNIFORM3UI64ARBPROC glUniform3ui64ARB;
extern PFNGLUNIFORM3UI64NVPROC glUniform3ui64NV;
extern PFNGLUNIFORM3UI64VARBPROC glUniform3ui64vARB;
extern PFNGLUNIFORM3UI64VNVPROC glUniform3ui64vNV;
extern PFNGLUNIFORM3UIEXTPROC glUniform3uiEXT;
extern PFNGLUNIFORM3UIPROC glUniform3ui;
extern PFNGLUNIFORM3UIVEXTPROC glUniform3uivEXT;
extern PFNGLUNIFORM3UIVPROC glUniform3uiv;
extern PFNGLUNIFORM4DPROC glUniform4d;
extern PFNGLUNIFORM4DVPROC glUniform4dv;
extern PFNGLUNIFORM4FARBPROC glUniform4fARB;
extern PFNGLUNIFORM4FPROC glUniform4f;
extern PFNGLUNIFORM4FVARBPROC glUniform4fvARB;
extern PFNGLUNIFORM4FVPROC glUniform4fv;
extern PFNGLUNIFORM4I64ARBPROC glUniform4i64ARB;
extern PFNGLUNIFORM4I64NVPROC glUniform4i64NV;
extern PFNGLUNIFORM4I64VARBPROC glUniform4i64vARB;
extern PFNGLUNIFORM4I64VNVPROC glUniform4i64vNV;
extern PFNGLUNIFORM4IARBPROC glUniform4iARB;
extern PFNGLUNIFORM4IPROC glUniform4i;
extern PFNGLUNIFORM4IVARBPROC glUniform4ivARB;
extern PFNGLUNIFORM4IVPROC glUniform4iv;
extern PFNGLUNIFORM4UI64ARBPROC glUniform4ui64ARB;
extern PFNGLUNIFORM4UI64NVPROC glUniform4ui64NV;
extern PFNGLUNIFORM4UI64VARBPROC glUniform4ui64vARB;
extern PFNGLUNIFORM4UI64VNVPROC glUniform4ui64vNV;
extern PFNGLUNIFORM4UIEXTPROC glUniform4uiEXT;
extern PFNGLUNIFORM4UIPROC glUniform4ui;
extern PFNGLUNIFORM4UIVEXTPROC glUniform4uivEXT;
extern PFNGLUNIFORM4UIVPROC glUniform4uiv;
extern PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
extern PFNGLUNIFORMBUFFEREXTPROC glUniformBufferEXT;
extern PFNGLUNIFORMHANDLEUI64ARBPROC glUniformHandleui64ARB;
extern PFNGLUNIFORMHANDLEUI64NVPROC glUniformHandleui64NV;
extern PFNGLUNIFORMHANDLEUI64VARBPROC glUniformHandleui64vARB;
extern PFNGLUNIFORMHANDLEUI64VNVPROC glUniformHandleui64vNV;
extern PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
extern PFNGLUNIFORMMATRIX2FVARBPROC glUniformMatrix2fvARB;
extern PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
extern PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
extern PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
extern PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
extern PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
extern PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
extern PFNGLUNIFORMMATRIX3FVARBPROC glUniformMatrix3fvARB;
extern PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
extern PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
extern PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
extern PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
extern PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
extern PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
extern PFNGLUNIFORMMATRIX4FVARBPROC glUniformMatrix4fvARB;
extern PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
extern PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
extern PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
extern PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
extern PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;
extern PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
extern PFNGLUNIFORMUI64NVPROC glUniformui64NV;
extern PFNGLUNIFORMUI64VNVPROC glUniformui64vNV;
extern PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT;
extern PFNGLUNMAPBUFFERARBPROC glUnmapBufferARB;
extern PFNGLUNMAPBUFFERPROC glUnmapBuffer;
extern PFNGLUNMAPNAMEDBUFFEREXTPROC glUnmapNamedBufferEXT;
extern PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer;
extern PFNGLUNMAPOBJECTBUFFERATIPROC glUnmapObjectBufferATI;
extern PFNGLUNMAPTEXTURE2DINTELPROC glUnmapTexture2DINTEL;
extern PFNGLUPDATEOBJECTBUFFERATIPROC glUpdateObjectBufferATI;
extern PFNGLUSEPROGRAMOBJECTARBPROC glUseProgramObjectARB;
extern PFNGLUSEPROGRAMPROC glUseProgram;
extern PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
extern PFNGLUSESHADERPROGRAMEXTPROC glUseShaderProgramEXT;
extern PFNGLVALIDATEPROGRAMARBPROC glValidateProgramARB;
extern PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
extern PFNGLVALIDATEPROGRAMPROC glValidateProgram;
extern PFNGLVARIANTARRAYOBJECTATIPROC glVariantArrayObjectATI;
extern PFNGLVARIANTBVEXTPROC glVariantbvEXT;
extern PFNGLVARIANTDVEXTPROC glVariantdvEXT;
extern PFNGLVARIANTFVEXTPROC glVariantfvEXT;
extern PFNGLVARIANTIVEXTPROC glVariantivEXT;
extern PFNGLVARIANTPOINTEREXTPROC glVariantPointerEXT;
extern PFNGLVARIANTSVEXTPROC glVariantsvEXT;
extern PFNGLVARIANTUBVEXTPROC glVariantubvEXT;
extern PFNGLVARIANTUIVEXTPROC glVariantuivEXT;
extern PFNGLVARIANTUSVEXTPROC glVariantusvEXT;
extern PFNGLVDPAUFININVPROC glVDPAUFiniNV;
extern PFNGLVDPAUGETSURFACEIVNVPROC glVDPAUGetSurfaceivNV;
extern PFNGLVDPAUINITNVPROC glVDPAUInitNV;
extern PFNGLVDPAUISSURFACENVPROC glVDPAUIsSurfaceNV;
extern PFNGLVDPAUMAPSURFACESNVPROC glVDPAUMapSurfacesNV;
extern PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glVDPAURegisterOutputSurfaceNV;
extern PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glVDPAURegisterVideoSurfaceNV;
extern PFNGLVDPAUSURFACEACCESSNVPROC glVDPAUSurfaceAccessNV;
extern PFNGLVDPAUUNMAPSURFACESNVPROC glVDPAUUnmapSurfacesNV;
extern PFNGLVDPAUUNREGISTERSURFACENVPROC glVDPAUUnregisterSurfaceNV;
extern PFNGLVERTEX2BOESPROC glVertex2bOES;
extern PFNGLVERTEX2BVOESPROC glVertex2bvOES;
extern PFNGLVERTEX2HNVPROC glVertex2hNV;
extern PFNGLVERTEX2HVNVPROC glVertex2hvNV;
extern PFNGLVERTEX2XOESPROC glVertex2xOES;
extern PFNGLVERTEX2XVOESPROC glVertex2xvOES;
extern PFNGLVERTEX3BOESPROC glVertex3bOES;
extern PFNGLVERTEX3BVOESPROC glVertex3bvOES;
extern PFNGLVERTEX3HNVPROC glVertex3hNV;
extern PFNGLVERTEX3HVNVPROC glVertex3hvNV;
extern PFNGLVERTEX3XOESPROC glVertex3xOES;
extern PFNGLVERTEX3XVOESPROC glVertex3xvOES;
extern PFNGLVERTEX4BOESPROC glVertex4bOES;
extern PFNGLVERTEX4BVOESPROC glVertex4bvOES;
extern PFNGLVERTEX4HNVPROC glVertex4hNV;
extern PFNGLVERTEX4HVNVPROC glVertex4hvNV;
extern PFNGLVERTEX4XOESPROC glVertex4xOES;
extern PFNGLVERTEX4XVOESPROC glVertex4xvOES;
extern PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding;
extern PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat;
extern PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat;
extern PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat;
extern PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor;
extern PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glVertexArrayBindVertexBufferEXT;
extern PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glVertexArrayColorOffsetEXT;
extern PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glVertexArrayEdgeFlagOffsetEXT;
extern PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer;
extern PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glVertexArrayFogCoordOffsetEXT;
extern PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glVertexArrayIndexOffsetEXT;
extern PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glVertexArrayMultiTexCoordOffsetEXT;
extern PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glVertexArrayNormalOffsetEXT;
extern PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glVertexArrayParameteriAPPLE;
extern PFNGLVERTEXARRAYRANGEAPPLEPROC glVertexArrayRangeAPPLE;
extern PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV;
extern PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glVertexArraySecondaryColorOffsetEXT;
extern PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glVertexArrayTexCoordOffsetEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glVertexArrayVertexAttribBindingEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glVertexArrayVertexAttribDivisorEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glVertexArrayVertexAttribFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glVertexArrayVertexAttribIFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glVertexArrayVertexAttribIOffsetEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glVertexArrayVertexAttribLFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glVertexArrayVertexAttribLOffsetEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glVertexArrayVertexAttribOffsetEXT;
extern PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glVertexArrayVertexBindingDivisorEXT;
extern PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer;
extern PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers;
extern PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glVertexArrayVertexOffsetEXT;
extern PFNGLVERTEXATTRIB1DARBPROC glVertexAttrib1dARB;
extern PFNGLVERTEXATTRIB1DNVPROC glVertexAttrib1dNV;
extern PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
extern PFNGLVERTEXATTRIB1DVARBPROC glVertexAttrib1dvARB;
extern PFNGLVERTEXATTRIB1DVNVPROC glVertexAttrib1dvNV;
extern PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
extern PFNGLVERTEXATTRIB1FARBPROC glVertexAttrib1fARB;
extern PFNGLVERTEXATTRIB1FNVPROC glVertexAttrib1fNV;
extern PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
extern PFNGLVERTEXATTRIB1FVARBPROC glVertexAttrib1fvARB;
extern PFNGLVERTEXATTRIB1FVNVPROC glVertexAttrib1fvNV;
extern PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
extern PFNGLVERTEXATTRIB1HNVPROC glVertexAttrib1hNV;
extern PFNGLVERTEXATTRIB1HVNVPROC glVertexAttrib1hvNV;
extern PFNGLVERTEXATTRIB1SARBPROC glVertexAttrib1sARB;
extern PFNGLVERTEXATTRIB1SNVPROC glVertexAttrib1sNV;
extern PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
extern PFNGLVERTEXATTRIB1SVARBPROC glVertexAttrib1svARB;
extern PFNGLVERTEXATTRIB1SVNVPROC glVertexAttrib1svNV;
extern PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
extern PFNGLVERTEXATTRIB2DARBPROC glVertexAttrib2dARB;
extern PFNGLVERTEXATTRIB2DNVPROC glVertexAttrib2dNV;
extern PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
extern PFNGLVERTEXATTRIB2DVARBPROC glVertexAttrib2dvARB;
extern PFNGLVERTEXATTRIB2DVNVPROC glVertexAttrib2dvNV;
extern PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
extern PFNGLVERTEXATTRIB2FARBPROC glVertexAttrib2fARB;
extern PFNGLVERTEXATTRIB2FNVPROC glVertexAttrib2fNV;
extern PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
extern PFNGLVERTEXATTRIB2FVARBPROC glVertexAttrib2fvARB;
extern PFNGLVERTEXATTRIB2FVNVPROC glVertexAttrib2fvNV;
extern PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
extern PFNGLVERTEXATTRIB2HNVPROC glVertexAttrib2hNV;
extern PFNGLVERTEXATTRIB2HVNVPROC glVertexAttrib2hvNV;
extern PFNGLVERTEXATTRIB2SARBPROC glVertexAttrib2sARB;
extern PFNGLVERTEXATTRIB2SNVPROC glVertexAttrib2sNV;
extern PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
extern PFNGLVERTEXATTRIB2SVARBPROC glVertexAttrib2svARB;
extern PFNGLVERTEXATTRIB2SVNVPROC glVertexAttrib2svNV;
extern PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
extern PFNGLVERTEXATTRIB3DARBPROC glVertexAttrib3dARB;
extern PFNGLVERTEXATTRIB3DNVPROC glVertexAttrib3dNV;
extern PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
extern PFNGLVERTEXATTRIB3DVARBPROC glVertexAttrib3dvARB;
extern PFNGLVERTEXATTRIB3DVNVPROC glVertexAttrib3dvNV;
extern PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
extern PFNGLVERTEXATTRIB3FARBPROC glVertexAttrib3fARB;
extern PFNGLVERTEXATTRIB3FNVPROC glVertexAttrib3fNV;
extern PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
extern PFNGLVERTEXATTRIB3FVARBPROC glVertexAttrib3fvARB;
extern PFNGLVERTEXATTRIB3FVNVPROC glVertexAttrib3fvNV;
extern PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
extern PFNGLVERTEXATTRIB3HNVPROC glVertexAttrib3hNV;
extern PFNGLVERTEXATTRIB3HVNVPROC glVertexAttrib3hvNV;
extern PFNGLVERTEXATTRIB3SARBPROC glVertexAttrib3sARB;
extern PFNGLVERTEXATTRIB3SNVPROC glVertexAttrib3sNV;
extern PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
extern PFNGLVERTEXATTRIB3SVARBPROC glVertexAttrib3svARB;
extern PFNGLVERTEXATTRIB3SVNVPROC glVertexAttrib3svNV;
extern PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
extern PFNGLVERTEXATTRIB4BVARBPROC glVertexAttrib4bvARB;
extern PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
extern PFNGLVERTEXATTRIB4DARBPROC glVertexAttrib4dARB;
extern PFNGLVERTEXATTRIB4DNVPROC glVertexAttrib4dNV;
extern PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
extern PFNGLVERTEXATTRIB4DVARBPROC glVertexAttrib4dvARB;
extern PFNGLVERTEXATTRIB4DVNVPROC glVertexAttrib4dvNV;
extern PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
extern PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4fARB;
extern PFNGLVERTEXATTRIB4FNVPROC glVertexAttrib4fNV;
extern PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
extern PFNGLVERTEXATTRIB4FVARBPROC glVertexAttrib4fvARB;
extern PFNGLVERTEXATTRIB4FVNVPROC glVertexAttrib4fvNV;
extern PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
extern PFNGLVERTEXATTRIB4HNVPROC glVertexAttrib4hNV;
extern PFNGLVERTEXATTRIB4HVNVPROC glVertexAttrib4hvNV;
extern PFNGLVERTEXATTRIB4IVARBPROC glVertexAttrib4ivARB;
extern PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
extern PFNGLVERTEXATTRIB4NBVARBPROC glVertexAttrib4NbvARB;
extern PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
extern PFNGLVERTEXATTRIB4NIVARBPROC glVertexAttrib4NivARB;
extern PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
extern PFNGLVERTEXATTRIB4NSVARBPROC glVertexAttrib4NsvARB;
extern PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
extern PFNGLVERTEXATTRIB4NUBARBPROC glVertexAttrib4NubARB;
extern PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
extern PFNGLVERTEXATTRIB4NUBVARBPROC glVertexAttrib4NubvARB;
extern PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
extern PFNGLVERTEXATTRIB4NUIVARBPROC glVertexAttrib4NuivARB;
extern PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
extern PFNGLVERTEXATTRIB4NUSVARBPROC glVertexAttrib4NusvARB;
extern PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
extern PFNGLVERTEXATTRIB4SARBPROC glVertexAttrib4sARB;
extern PFNGLVERTEXATTRIB4SNVPROC glVertexAttrib4sNV;
extern PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
extern PFNGLVERTEXATTRIB4SVARBPROC glVertexAttrib4svARB;
extern PFNGLVERTEXATTRIB4SVNVPROC glVertexAttrib4svNV;
extern PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
extern PFNGLVERTEXATTRIB4UBNVPROC glVertexAttrib4ubNV;
extern PFNGLVERTEXATTRIB4UBVARBPROC glVertexAttrib4ubvARB;
extern PFNGLVERTEXATTRIB4UBVNVPROC glVertexAttrib4ubvNV;
extern PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
extern PFNGLVERTEXATTRIB4UIVARBPROC glVertexAttrib4uivARB;
extern PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
extern PFNGLVERTEXATTRIB4USVARBPROC glVertexAttrib4usvARB;
extern PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
extern PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glVertexAttribArrayObjectATI;
extern PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
extern PFNGLVERTEXATTRIBDIVISORARBPROC glVertexAttribDivisorARB;
extern PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
extern PFNGLVERTEXATTRIBFORMATNVPROC glVertexAttribFormatNV;
extern PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
extern PFNGLVERTEXATTRIBI1IEXTPROC glVertexAttribI1iEXT;
extern PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
extern PFNGLVERTEXATTRIBI1IVEXTPROC glVertexAttribI1ivEXT;
extern PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
extern PFNGLVERTEXATTRIBI1UIEXTPROC glVertexAttribI1uiEXT;
extern PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
extern PFNGLVERTEXATTRIBI1UIVEXTPROC glVertexAttribI1uivEXT;
extern PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
extern PFNGLVERTEXATTRIBI2IEXTPROC glVertexAttribI2iEXT;
extern PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
extern PFNGLVERTEXATTRIBI2IVEXTPROC glVertexAttribI2ivEXT;
extern PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
extern PFNGLVERTEXATTRIBI2UIEXTPROC glVertexAttribI2uiEXT;
extern PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
extern PFNGLVERTEXATTRIBI2UIVEXTPROC glVertexAttribI2uivEXT;
extern PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
extern PFNGLVERTEXATTRIBI3IEXTPROC glVertexAttribI3iEXT;
extern PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
extern PFNGLVERTEXATTRIBI3IVEXTPROC glVertexAttribI3ivEXT;
extern PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
extern PFNGLVERTEXATTRIBI3UIEXTPROC glVertexAttribI3uiEXT;
extern PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
extern PFNGLVERTEXATTRIBI3UIVEXTPROC glVertexAttribI3uivEXT;
extern PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
extern PFNGLVERTEXATTRIBI4BVEXTPROC glVertexAttribI4bvEXT;
extern PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
extern PFNGLVERTEXATTRIBI4IEXTPROC glVertexAttribI4iEXT;
extern PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
extern PFNGLVERTEXATTRIBI4IVEXTPROC glVertexAttribI4ivEXT;
extern PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
extern PFNGLVERTEXATTRIBI4SVEXTPROC glVertexAttribI4svEXT;
extern PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
extern PFNGLVERTEXATTRIBI4UBVEXTPROC glVertexAttribI4ubvEXT;
extern PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
extern PFNGLVERTEXATTRIBI4UIEXTPROC glVertexAttribI4uiEXT;
extern PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
extern PFNGLVERTEXATTRIBI4UIVEXTPROC glVertexAttribI4uivEXT;
extern PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
extern PFNGLVERTEXATTRIBI4USVEXTPROC glVertexAttribI4usvEXT;
extern PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
extern PFNGLVERTEXATTRIBIFORMATNVPROC glVertexAttribIFormatNV;
extern PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
extern PFNGLVERTEXATTRIBIPOINTEREXTPROC glVertexAttribIPointerEXT;
extern PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
extern PFNGLVERTEXATTRIBL1DEXTPROC glVertexAttribL1dEXT;
extern PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
extern PFNGLVERTEXATTRIBL1DVEXTPROC glVertexAttribL1dvEXT;
extern PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
extern PFNGLVERTEXATTRIBL1I64NVPROC glVertexAttribL1i64NV;
extern PFNGLVERTEXATTRIBL1I64VNVPROC glVertexAttribL1i64vNV;
extern PFNGLVERTEXATTRIBL1UI64ARBPROC glVertexAttribL1ui64ARB;
extern PFNGLVERTEXATTRIBL1UI64NVPROC glVertexAttribL1ui64NV;
extern PFNGLVERTEXATTRIBL1UI64VARBPROC glVertexAttribL1ui64vARB;
extern PFNGLVERTEXATTRIBL1UI64VNVPROC glVertexAttribL1ui64vNV;
extern PFNGLVERTEXATTRIBL2DEXTPROC glVertexAttribL2dEXT;
extern PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
extern PFNGLVERTEXATTRIBL2DVEXTPROC glVertexAttribL2dvEXT;
extern PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
extern PFNGLVERTEXATTRIBL2I64NVPROC glVertexAttribL2i64NV;
extern PFNGLVERTEXATTRIBL2I64VNVPROC glVertexAttribL2i64vNV;
extern PFNGLVERTEXATTRIBL2UI64NVPROC glVertexAttribL2ui64NV;
extern PFNGLVERTEXATTRIBL2UI64VNVPROC glVertexAttribL2ui64vNV;
extern PFNGLVERTEXATTRIBL3DEXTPROC glVertexAttribL3dEXT;
extern PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
extern PFNGLVERTEXATTRIBL3DVEXTPROC glVertexAttribL3dvEXT;
extern PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
extern PFNGLVERTEXATTRIBL3I64NVPROC glVertexAttribL3i64NV;
extern PFNGLVERTEXATTRIBL3I64VNVPROC glVertexAttribL3i64vNV;
extern PFNGLVERTEXATTRIBL3UI64NVPROC glVertexAttribL3ui64NV;
extern PFNGLVERTEXATTRIBL3UI64VNVPROC glVertexAttribL3ui64vNV;
extern PFNGLVERTEXATTRIBL4DEXTPROC glVertexAttribL4dEXT;
extern PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
extern PFNGLVERTEXATTRIBL4DVEXTPROC glVertexAttribL4dvEXT;
extern PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
extern PFNGLVERTEXATTRIBL4I64NVPROC glVertexAttribL4i64NV;
extern PFNGLVERTEXATTRIBL4I64VNVPROC glVertexAttribL4i64vNV;
extern PFNGLVERTEXATTRIBL4UI64NVPROC glVertexAttribL4ui64NV;
extern PFNGLVERTEXATTRIBL4UI64VNVPROC glVertexAttribL4ui64vNV;
extern PFNGLVERTEXATTRIBLFORMATNVPROC glVertexAttribLFormatNV;
extern PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glVertexAttribLPointerEXT;
extern PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
extern PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
extern PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
extern PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
extern PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
extern PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
extern PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
extern PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
extern PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
extern PFNGLVERTEXATTRIBPARAMETERIAMDPROC glVertexAttribParameteriAMD;
extern PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointerARB;
extern PFNGLVERTEXATTRIBPOINTERNVPROC glVertexAttribPointerNV;
extern PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
extern PFNGLVERTEXATTRIBS1DVNVPROC glVertexAttribs1dvNV;
extern PFNGLVERTEXATTRIBS1FVNVPROC glVertexAttribs1fvNV;
extern PFNGLVERTEXATTRIBS1HVNVPROC glVertexAttribs1hvNV;
extern PFNGLVERTEXATTRIBS1SVNVPROC glVertexAttribs1svNV;
extern PFNGLVERTEXATTRIBS2DVNVPROC glVertexAttribs2dvNV;
extern PFNGLVERTEXATTRIBS2FVNVPROC glVertexAttribs2fvNV;
extern PFNGLVERTEXATTRIBS2HVNVPROC glVertexAttribs2hvNV;
extern PFNGLVERTEXATTRIBS2SVNVPROC glVertexAttribs2svNV;
extern PFNGLVERTEXATTRIBS3DVNVPROC glVertexAttribs3dvNV;
extern PFNGLVERTEXATTRIBS3FVNVPROC glVertexAttribs3fvNV;
extern PFNGLVERTEXATTRIBS3HVNVPROC glVertexAttribs3hvNV;
extern PFNGLVERTEXATTRIBS3SVNVPROC glVertexAttribs3svNV;
extern PFNGLVERTEXATTRIBS4DVNVPROC glVertexAttribs4dvNV;
extern PFNGLVERTEXATTRIBS4FVNVPROC glVertexAttribs4fvNV;
extern PFNGLVERTEXATTRIBS4HVNVPROC glVertexAttribs4hvNV;
extern PFNGLVERTEXATTRIBS4SVNVPROC glVertexAttribs4svNV;
extern PFNGLVERTEXATTRIBS4UBVNVPROC glVertexAttribs4ubvNV;
extern PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
extern PFNGLVERTEXBLENDARBPROC glVertexBlendARB;
extern PFNGLVERTEXBLENDENVFATIPROC glVertexBlendEnvfATI;
extern PFNGLVERTEXBLENDENVIATIPROC glVertexBlendEnviATI;
extern PFNGLVERTEXFORMATNVPROC glVertexFormatNV;
extern PFNGLVERTEXP2UIPROC glVertexP2ui;
extern PFNGLVERTEXP2UIVPROC glVertexP2uiv;
extern PFNGLVERTEXP3UIPROC glVertexP3ui;
extern PFNGLVERTEXP3UIVPROC glVertexP3uiv;
extern PFNGLVERTEXP4UIPROC glVertexP4ui;
extern PFNGLVERTEXP4UIVPROC glVertexP4uiv;
extern PFNGLVERTEXPOINTEREXTPROC glVertexPointerEXT;
extern PFNGLVERTEXPOINTERLISTIBMPROC glVertexPointerListIBM;
extern PFNGLVERTEXPOINTERVINTELPROC glVertexPointervINTEL;
extern PFNGLVERTEXSTREAM1DATIPROC glVertexStream1dATI;
extern PFNGLVERTEXSTREAM1DVATIPROC glVertexStream1dvATI;
extern PFNGLVERTEXSTREAM1FATIPROC glVertexStream1fATI;
extern PFNGLVERTEXSTREAM1FVATIPROC glVertexStream1fvATI;
extern PFNGLVERTEXSTREAM1IATIPROC glVertexStream1iATI;
extern PFNGLVERTEXSTREAM1IVATIPROC glVertexStream1ivATI;
extern PFNGLVERTEXSTREAM1SATIPROC glVertexStream1sATI;
extern PFNGLVERTEXSTREAM1SVATIPROC glVertexStream1svATI;
extern PFNGLVERTEXSTREAM2DATIPROC glVertexStream2dATI;
extern PFNGLVERTEXSTREAM2DVATIPROC glVertexStream2dvATI;
extern PFNGLVERTEXSTREAM2FATIPROC glVertexStream2fATI;
extern PFNGLVERTEXSTREAM2FVATIPROC glVertexStream2fvATI;
extern PFNGLVERTEXSTREAM2IATIPROC glVertexStream2iATI;
extern PFNGLVERTEXSTREAM2IVATIPROC glVertexStream2ivATI;
extern PFNGLVERTEXSTREAM2SATIPROC glVertexStream2sATI;
extern PFNGLVERTEXSTREAM2SVATIPROC glVertexStream2svATI;
extern PFNGLVERTEXSTREAM3DATIPROC glVertexStream3dATI;
extern PFNGLVERTEXSTREAM3DVATIPROC glVertexStream3dvATI;
extern PFNGLVERTEXSTREAM3FATIPROC glVertexStream3fATI;
extern PFNGLVERTEXSTREAM3FVATIPROC glVertexStream3fvATI;
extern PFNGLVERTEXSTREAM3IATIPROC glVertexStream3iATI;
extern PFNGLVERTEXSTREAM3IVATIPROC glVertexStream3ivATI;
extern PFNGLVERTEXSTREAM3SATIPROC glVertexStream3sATI;
extern PFNGLVERTEXSTREAM3SVATIPROC glVertexStream3svATI;
extern PFNGLVERTEXSTREAM4DATIPROC glVertexStream4dATI;
extern PFNGLVERTEXSTREAM4DVATIPROC glVertexStream4dvATI;
extern PFNGLVERTEXSTREAM4FATIPROC glVertexStream4fATI;
extern PFNGLVERTEXSTREAM4FVATIPROC glVertexStream4fvATI;
extern PFNGLVERTEXSTREAM4IATIPROC glVertexStream4iATI;
extern PFNGLVERTEXSTREAM4IVATIPROC glVertexStream4ivATI;
extern PFNGLVERTEXSTREAM4SATIPROC glVertexStream4sATI;
extern PFNGLVERTEXSTREAM4SVATIPROC glVertexStream4svATI;
extern PFNGLVERTEXWEIGHTFEXTPROC glVertexWeightfEXT;
extern PFNGLVERTEXWEIGHTFVEXTPROC glVertexWeightfvEXT;
extern PFNGLVERTEXWEIGHTHNVPROC glVertexWeighthNV;
extern PFNGLVERTEXWEIGHTHVNVPROC glVertexWeighthvNV;
extern PFNGLVERTEXWEIGHTPOINTEREXTPROC glVertexWeightPointerEXT;
extern PFNGLVIDEOCAPTURENVPROC glVideoCaptureNV;
extern PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC glVideoCaptureStreamParameterdvNV;
extern PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC glVideoCaptureStreamParameterfvNV;
extern PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC glVideoCaptureStreamParameterivNV;
extern PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
extern PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
extern PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
extern PFNGLVIEWPORTPOSITIONWSCALENVPROC glViewportPositionWScaleNV;
extern PFNGLVIEWPORTSWIZZLENVPROC glViewportSwizzleNV;
extern PFNGLWAITSYNCPROC glWaitSync;
extern PFNGLWAITVKSEMAPHORENVPROC glWaitVkSemaphoreNV;
extern PFNGLWEIGHTBVARBPROC glWeightbvARB;
extern PFNGLWEIGHTDVARBPROC glWeightdvARB;
extern PFNGLWEIGHTFVARBPROC glWeightfvARB;
extern PFNGLWEIGHTIVARBPROC glWeightivARB;
extern PFNGLWEIGHTPATHSNVPROC glWeightPathsNV;
extern PFNGLWEIGHTPOINTERARBPROC glWeightPointerARB;
extern PFNGLWEIGHTSVARBPROC glWeightsvARB;
extern PFNGLWEIGHTUBVARBPROC glWeightubvARB;
extern PFNGLWEIGHTUIVARBPROC glWeightuivARB;
extern PFNGLWEIGHTUSVARBPROC glWeightusvARB;
extern PFNGLWINDOWPOS2DARBPROC glWindowPos2dARB;
extern PFNGLWINDOWPOS2DMESAPROC glWindowPos2dMESA;
extern PFNGLWINDOWPOS2DPROC glWindowPos2d;
extern PFNGLWINDOWPOS2DVARBPROC glWindowPos2dvARB;
extern PFNGLWINDOWPOS2DVMESAPROC glWindowPos2dvMESA;
extern PFNGLWINDOWPOS2DVPROC glWindowPos2dv;
extern PFNGLWINDOWPOS2FARBPROC glWindowPos2fARB;
extern PFNGLWINDOWPOS2FMESAPROC glWindowPos2fMESA;
extern PFNGLWINDOWPOS2FPROC glWindowPos2f;
extern PFNGLWINDOWPOS2FVARBPROC glWindowPos2fvARB;
extern PFNGLWINDOWPOS2FVMESAPROC glWindowPos2fvMESA;
extern PFNGLWINDOWPOS2FVPROC glWindowPos2fv;
extern PFNGLWINDOWPOS2IARBPROC glWindowPos2iARB;
extern PFNGLWINDOWPOS2IMESAPROC glWindowPos2iMESA;
extern PFNGLWINDOWPOS2IPROC glWindowPos2i;
extern PFNGLWINDOWPOS2IVARBPROC glWindowPos2ivARB;
extern PFNGLWINDOWPOS2IVMESAPROC glWindowPos2ivMESA;
extern PFNGLWINDOWPOS2IVPROC glWindowPos2iv;
extern PFNGLWINDOWPOS2SARBPROC glWindowPos2sARB;
extern PFNGLWINDOWPOS2SMESAPROC glWindowPos2sMESA;
extern PFNGLWINDOWPOS2SPROC glWindowPos2s;
extern PFNGLWINDOWPOS2SVARBPROC glWindowPos2svARB;
extern PFNGLWINDOWPOS2SVMESAPROC glWindowPos2svMESA;
extern PFNGLWINDOWPOS2SVPROC glWindowPos2sv;
extern PFNGLWINDOWPOS3DARBPROC glWindowPos3dARB;
extern PFNGLWINDOWPOS3DMESAPROC glWindowPos3dMESA;
extern PFNGLWINDOWPOS3DPROC glWindowPos3d;
extern PFNGLWINDOWPOS3DVARBPROC glWindowPos3dvARB;
extern PFNGLWINDOWPOS3DVMESAPROC glWindowPos3dvMESA;
extern PFNGLWINDOWPOS3DVPROC glWindowPos3dv;
extern PFNGLWINDOWPOS3FARBPROC glWindowPos3fARB;
extern PFNGLWINDOWPOS3FMESAPROC glWindowPos3fMESA;
extern PFNGLWINDOWPOS3FPROC glWindowPos3f;
extern PFNGLWINDOWPOS3FVARBPROC glWindowPos3fvARB;
extern PFNGLWINDOWPOS3FVMESAPROC glWindowPos3fvMESA;
extern PFNGLWINDOWPOS3FVPROC glWindowPos3fv;
extern PFNGLWINDOWPOS3IARBPROC glWindowPos3iARB;
extern PFNGLWINDOWPOS3IMESAPROC glWindowPos3iMESA;
extern PFNGLWINDOWPOS3IPROC glWindowPos3i;
extern PFNGLWINDOWPOS3IVARBPROC glWindowPos3ivARB;
extern PFNGLWINDOWPOS3IVMESAPROC glWindowPos3ivMESA;
extern PFNGLWINDOWPOS3IVPROC glWindowPos3iv;
extern PFNGLWINDOWPOS3SARBPROC glWindowPos3sARB;
extern PFNGLWINDOWPOS3SMESAPROC glWindowPos3sMESA;
extern PFNGLWINDOWPOS3SPROC glWindowPos3s;
extern PFNGLWINDOWPOS3SVARBPROC glWindowPos3svARB;
extern PFNGLWINDOWPOS3SVMESAPROC glWindowPos3svMESA;
extern PFNGLWINDOWPOS3SVPROC glWindowPos3sv;
extern PFNGLWINDOWPOS4DMESAPROC glWindowPos4dMESA;
extern PFNGLWINDOWPOS4DVMESAPROC glWindowPos4dvMESA;
extern PFNGLWINDOWPOS4FMESAPROC glWindowPos4fMESA;
extern PFNGLWINDOWPOS4FVMESAPROC glWindowPos4fvMESA;
extern PFNGLWINDOWPOS4IMESAPROC glWindowPos4iMESA;
extern PFNGLWINDOWPOS4IVMESAPROC glWindowPos4ivMESA;
extern PFNGLWINDOWPOS4SMESAPROC glWindowPos4sMESA;
extern PFNGLWINDOWPOS4SVMESAPROC glWindowPos4svMESA;
extern PFNGLWINDOWRECTANGLESEXTPROC glWindowRectanglesEXT;
extern PFNGLWRITEMASKEXTPROC glWriteMaskEXT;
#endif

namespace gg
{
  /*!
  ** \brief ゲームグラフィックス特論の都合にもとづく初期化を行う.
  **
  **   Windows で OpenGL 1.2 以降の API を有効化する.
  */
  extern void ggInit();

  /*!
  ** \brief OpenGL のエラーをチェックする.
  **
  **   OpenGL の API を呼び出し直後に実行すればエラーのあるときにメッセージを表示する.
  **
  **   \param msg エラー発生時に標準エラー出力に出力する文字列. NULL なら何も出力しない.
  */
  extern void ggError(const char *name = NULL, unsigned int line = 0);

  /*!
  ** \brief FBO のエラーをチェックする.
  **
  **   FBO の API を呼び出し直後に実行すればエラーのあるときにメッセージを表示する.
  **
  **   \param msg エラー発生時に標準エラー出力に出力する文字列. NULL なら何も出力しない.
  */
  extern void ggFBOError(const char *name = NULL, unsigned int line = 0);

  /*!
  ** \brief 配列の内容を TGA ファイルに保存する.
  **
  **   \param sx 画像の横の画素数.
  **   \param sy 画像の縦の画素数.
  **   \param depth 1画素のバイト数.
  **   \param buffer 画像データを格納した配列.
  **   \param name 保存するファイル名.
  **   \return 保存に成功すれば true, 失敗すれば false.
  */
  bool ggSaveTga(GLsizei sx, GLsizei sy, unsigned int depth, const void *buffer, const char *name);

  /*!
  ** \brief カラーバッファの内容を TGA ファイルに保存する.
  **
  **   \param name 保存するファイル名.
  **   \return 保存に成功すれば true, 失敗すれば false.
  */
  extern bool ggSaveColor(const char *name);

  /*!
  ** \brief デプスバッファの内容を TGA ファイルに保存する.
  **
  **   \param name 保存するファイル名.
  **   \return 保存に成功すれば true, 失敗すれば false.
  */
  extern bool ggSaveDepth(const char *name);

  /*!
  ** \brief TGA ファイル (8/16/24/32bit) をメモリに読み込む.
  **
  **   \param name 読み込むファイル名.
  **   \param width 読み込んだファイルの横の画素数.
  **   \param height 読み込んだファイルの縦の画素数.
  **   \param format 読み込んだファイルの書式. GL_RED, G_RG, GL_BGR, G_BGRA.
  **   \return 読み込みに成功すれば読み込んだデータのポインタ, 失敗すれば NULL.
  */
  extern GLubyte *ggLoadTga(const char *name, GLsizei *width, GLsizei *height, GLenum *format);

  /*!
  ** \brief テクスチャメモリを確保して画像データをテクスチャとして読み込む.
  **
  **   \param width テクスチャとして読み込むデータ image の横の画素数.
  **   \param height テクスチャとして読み込むデータ image の縦の画素数.
  **   \param internal glTexImage2D() に指定するテクスチャの内部フォーマット.
  **   \param format glTexImage2D() に指定するデータ image のフォーマット.
  **   \param image テクスチャとして読み込むデータ. NULL ならテクスチャメモリの確保のみ.
  */
  extern GLuint ggLoadTexture(GLsizei width, GLsizei height, GLenum internal,
    GLenum format = GL_RGBA, const GLvoid *image = NULL);

  /*!
  ** \brief TGA 画像ファイルをテクスチャとして読み込む.
  **
  **   \param name 読み込むファイル名.
  **   \param internal glTexImage2D() に指定するテクスチャの内部フォーマット. 0 なら外部フォーマットに合わせる.
  **   \return 読み込みに成功すれば true, 失敗すれば false.
  */
  extern GLuint ggLoadImage(const char *name, GLenum internal = 0);

  /*!
  ** \brief 高さマップ用の TGA 画像ファイルの読み込んで法線マップを作成する.
  **
  **   \param name 読み込むファイル名.
  **   \param nz 法線ベクトルの z 成分の割合.
  **   \param internal glTexImage2D() に指定するテクスチャの内部フォーマット.
  **   \return 読み込みに成功すれば true, 失敗すれば false.
  */
  extern GLuint ggLoadHeight(const char *name, float nz, GLenum internal = GL_RGBA);

  /*!
  ** \brief 三角形分割された OBJ ファイルを読み込む (Elements 形式).
  **
  **   \param name 読み込む Wavefront OBJ ファイル名.
  **   \param nv 読み込んだデータの頂点数.
  **   \param pos 読み込んだデータの頂点座標.
  **   \param norm 読み込んだデータの頂点法線.
  **   \param face 読み込んだデータの三角形の頂点インデックス.
  **   \param normalize true なら読み込んだデータの大きさを正規化する.
  **   \return ファイルの読み込みに成功したら true.
  */
  extern bool ggLoadObj(const char *name, GLuint &nv, GLfloat (*&pos)[3], GLfloat (*&norm)[3],
    GLuint &nf, GLuint (*&face)[3], bool normalize = false);

  /*!
  ** \brief 三角形分割された OBJ ファイルと MTL ファイルを読み込む (Arrays 形式)
  **
  **   \param name 読み込む Wavefront OBJ ファイル名.
  **   \param ng 読み込んだデータの面グループ数.
  **   \param group 読み込んだデータの面グループの最初の面のインデックスと面数.
  **   \param amb 読み込んだデータの面グループごとの環境光に対する反射係数.
  **   \param diff 読み込んだデータの面グループごとの拡散反射係数.
  **   \param spec 読み込んだデータの面グループごとの鏡面反射係数.
  **   \param shi 読み込んだデータの面グループごとの輝き係数.
  **   \param nv 読み込んだデータの頂点数.
  **   \param pos 読み込んだデータの頂点座標.
  **   \param norm 読み込んだデータの頂点法線.
  **   \param normalize true なら読み込んだデータの大きさを正規化する.
  **   \return ファイルの読み込みに成功したら true.
  */
  extern bool ggLoadObj(const char *name, GLuint &ng, GLuint (*&group)[2],
    GLfloat (*&amb)[4], GLfloat (*&diff)[4], GLfloat (*&spec)[4], GLfloat *&shi,
    GLuint &nv, GLfloat (*&pos)[3], GLfloat (*&norm)[3], bool normalize = false);

  /*!
  ** \brief シェーダのソースプログラムの文字列を読み込んでプログラムオブジェクトを作成する.
  **
  **   \param vsrc バーテックスシェーダのソースプログラムの文字列.
  **   \param fsrc フラグメントシェーダのソースプログラムの文字列 (NULL なら不使用).
  **   \param gsrc ジオメトリシェーダのソースプログラムの文字列 (NULL なら不使用).
  **   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
  **   \param varyings フィードバックする varying 変数のリスト (NULL なら不使用).
  **   \param vtext バーテックスシェーダのコンパイル時のメッセージに追加する文字列.
  **   \param ftext フラグメントシェーダのコンパイル時のメッセージに追加する文字列.
  **   \param gtext ジオメトリシェーダのコンパイル時のメッセージに追加する文字列.
  **   \return シェーダプログラムのプログラム名 (作成できなければ 0).
  */
  extern GLuint ggCreateShader(const char *vsrc, const char *fsrc = NULL, const char *gsrc = NULL,
    GLint nvarying = 0, const char *const varyings[] = NULL,
    const char *vtext = "vertex shader",
    const char *ftext = "fragment shader",
    const char *gtext = "geometry shader");

  /*!
  ** \brief シェーダのソースファイルを読み込んでプログラムオブジェクトを作成する.
  **
  **   \param vert バーテックスシェーダのソースファイル名.
  **   \param frag フラグメントシェーダのソースファイル名 (NULL なら不使用).
  **   \param geom ジオメトリシェーダのソースファイル名 (NULL なら不使用).
  **   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
  **   \param varyings フィードバックする varying 変数のリスト (NULL なら不使用).
  **   \return シェーダプログラムのプログラム名 (作成できなければ 0).
  */
  extern GLuint ggLoadShader(const char *vert, const char *frag = NULL, const char *geom = NULL,
    GLint nvarying = 0, const char *const varyings[] = NULL);

  /*!
  ** \brief 3 要素の長さ.
  **
  **   \param a GLfloat 型の 3 要素の配列.
  */
  extern GLfloat ggLength3(const GLfloat *a);

  /*!
  ** \brief 4 要素の長さ.
  **
  **   \param a GLfloat 型の 4 要素の配列.
  */
  extern GLfloat ggLength4(const GLfloat *a);

  /*!
  ** \brief 3 要素の内積.
  **
  **   \param a GLfloat 型の 3 要素の配列.
  **   \param b GLfloat 型の 3 要素の配列.
  */
  inline GLfloat ggDot3(const GLfloat *a, const GLfloat *b)
  {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }

  /*!
  ** \brief 3 要素の外積.
  **
  **   \param a GLfloat 型の 3 要素の配列.
  **   \param b GLfloat 型の 3 要素の配列.
  **   \param c 結果を格納する GLfloat 型の 3 要素の配列.
  */
  inline void ggCross(GLfloat *c, const GLfloat *a, const GLfloat *b)
  {
    c[0] = a[1] * b[2] - a[2] * b[1];
    c[1] = a[2] * b[0] - a[0] * b[2];
    c[2] = a[0] * b[1] - a[1] * b[0];
  }

  /*!
  ** \brief 4 要素の内積
  **
  **   \param a GLfloat 型の 4 要素の配列.
  **   \param b GLfloat 型の 4 要素の配列.
  */
  inline GLfloat ggDot4(const GLfloat *a, const GLfloat *b)
  {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }

  /*!
  ** \brief 変換行列.
  */
  class GgMatrix
  {
    // 変換行列の要素
    GLfloat array[16];

    // 行列 a とベクトル b の積をベクトル c に代入する
    void projection(GLfloat *c, const GLfloat *a, const GLfloat *b) const;

    // 行列 a と行列 b の積を行列 c に代入する
    void multiply(GLfloat *c, const GLfloat *a, const GLfloat *b) const;

    // 変換行列の要素に四元数から直接データを保存できるようにする
    friend class GgQuaternion;

  public:

    //! \brief デストラクタ.
    ~GgMatrix() {}

    //! \brief コンストラクタ.
    GgMatrix() {}

    //! \brief コンストラクタ.
    //!   \param a GLfloat 型の 16 要素の配列.
    GgMatrix(const GLfloat *a)
    {
      load(a);
    }

    //! \brief コピーコンストラクタ.
    //!   \param m GgMatrix 型の変数.
    GgMatrix(const GgMatrix &m)
    {
      load(m);
    }

    //! \brief 配列変数の値を格納する.
    //!   \param a GLfloat 型の 16 要素の配列.
    //!   \return a を代入した GgMatrix 型の値.
    GgMatrix &load(const GLfloat *a)
    {
      for (int i = 0; i < 16; ++i) array[i] = a[i];
      return *this;
    }

    //! \brief 別の変換行列の値を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return m を代入した GgMatrix 型の値.
    GgMatrix &load(const GgMatrix &m)
    {
      return load(m.array);
    }

    //! \brief 変換行列に配列に格納した変換行列を加算した結果を格納する.
    //!   \param a GLfloat 型の 16 要素の配列.
    //!   \return 変換行列に a を加えた GgMatrix 型の値.
    GgMatrix &loadAdd(const GLfloat *a)
    {
      for (int i = 0; i < 16; ++i) array[i] += a[i];
      return *this;
    }

    //! \brief 変換行列に別の変換行列を加算した結果を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を加えた GgMatrix 型の値.
    GgMatrix &loadAdd(const GgMatrix &m)
    {
      return loadAdd(m.array);
    }

    //! \brief 変換行列から配列に格納した変換行列を減算した結果を格納する.
    //!   \param a GLfloat 型の 16 要素の配列.
    //!   \return 変換行列に a を引いた GgMatrix 型の値.
    GgMatrix &loadSubtract(const GLfloat *a)
    {
      for (int i = 0; i < 16; ++i) array[i] -= a[i];
      return *this;
    }

    //! \brief 変換行列から別の変換行列を減算した結果を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を引いた GgMatrix 型の値.
    GgMatrix &loadSubtract(const GgMatrix &m)
    {
      return loadSubtract(m.array);
    }

    //! \brief 変換行列に配列に格納した変換行列を乗算した結果を格納する.
    //!   \param a GLfloat 型の 16 要素の配列.
    //!   \return 変換行列に a を掛けた GgMatrix 型の値.
    GgMatrix &loadMultiply(const GLfloat *a)
    {
      return load(multiply(a));
    }

    //! \brief 変換行列に別の変換行列を乗算した結果を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を掛けた GgMatrix 型の値.
    GgMatrix &loadMultiply(const GgMatrix &m)
    {
      return loadMultiply(m.array);
    }

    //! \brief 変換行列を配列に格納した変換行列で除算した結果を格納する.
    //!   \param a GLfloat 型の 16 要素の配列.
    //!   \return 変換行列に a を乗じた GgMatrix 型の値.
    GgMatrix &loadDivide(const GLfloat *a)
    {
      return load(divide(a));
    }

    //! \brief 変換行列を別の変換行列で除算した結果を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を乗じた GgMatrix 型の値.
    GgMatrix &loadDivide(const GgMatrix &m)
    {
      return loadDivide(m.array);
    }

    //! \brief 変換行列に配列に格納した変換行列を加算した値を返す.
    //!   \param a GLfloat 型の 16 要素の配列.
    //!   \return 変換行列に a を加えた GgMatrix 型の値.
    GgMatrix add(const GLfloat *a) const
    {
      GgMatrix t;
      return t.loadAdd(a);
    }

    //! \brief 変換行列に別の変換行列を加算した値を返す.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を加えた GgMatrix 型の値.
    GgMatrix add(const GgMatrix &m) const
    {
      return add(m.array);
    }

    //! \brief 変換行列から配列に格納した変換行列を減算した値を返す.
    //!   \param a GLfloat 型の 16 要素の配列.
    //!   \return 変換行列に a を引いた GgMatrix 型の値.
    GgMatrix subtract(const GLfloat *a) const
    {
      GgMatrix t;
      return t.loadSubtract(a);
    }

    //! \brief 変換行列から別の変換行列を減算した値を返す.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を引いた GgMatrix 型の値.
    GgMatrix subtract(const GgMatrix &m) const
    {
      return subtract(m.array);
    }

    //! \brief 変換行列に配列に格納した変換行列を乗算した値を返す.
    //!   \param a GLfloat 型の 16 要素の配列.
    //!   \return 変換行列に a を掛けた GgMatrix 型の値.
    GgMatrix multiply(const GLfloat *a) const
    {
      GgMatrix t;
      multiply(t.array, array, a);
      return t;
    }

    //! \brief 変換行列に別の変換行列を乗算した値を返す.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を掛けた GgMatrix 型の値.
    GgMatrix multiply(const GgMatrix &m) const
    {
      return multiply(m.array);
    }

    //! \brief 変換行列を配列に格納した変換行列で除算した値を返す.
    //!   \param a GLfloat 型の 16 要素の配列.
    //!   \return 変換行列を a で割った GgMatrix 型の値.
    GgMatrix divide(const GLfloat *a) const
    {
      GgMatrix t, ia;
      ia.loadInvert(a);
      multiply(t.array, array, ia.array);
      return t;
    }

    //! \brief 変換行列を配列に格納した変換行列で除算した値を返す.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列を m で割った GgMatrix 型の値.
    GgMatrix divide(const GgMatrix &m) const
    {
      return divide(m.array);
    }

    // 演算子
    GgMatrix &operator=(const GLfloat *a)
    {
      return load(a);
    }
    GgMatrix &operator=(const GgMatrix &m)
    {
      return operator=(m.array);
    }
    GgMatrix &operator+=(const GLfloat *a)
    {
      return loadAdd(a);
    }
    GgMatrix &operator+=(const GgMatrix &m)
    {
      return operator+=(m.array);
    }
    GgMatrix &operator-=(const GLfloat *a)
    {
      return loadSubtract(a);
    }
    GgMatrix &operator-=(const GgMatrix &m)
    {
      return operator-=(m.array);
    }
    GgMatrix &operator*=(const GLfloat *a)
    {
      return loadMultiply(a);
    }
    GgMatrix &operator*=(const GgMatrix &m)
    {
      return operator*=(m.array);
    }
    GgMatrix &operator/=(const GLfloat *a)
    {
      return loadDivide(a);
    }
    GgMatrix &operator/=(const GgMatrix &m)
    {
      return operator/=(m.array);
    }
    GgMatrix operator+(const GLfloat *a) const
    {
      return add(a);
    }
    GgMatrix operator+(const GgMatrix &m) const
    {
      return operator+(m.array);
    }
    GgMatrix operator-(const GLfloat *a) const
    {
      return subtract(a);
    }
    GgMatrix operator-(const GgMatrix &m) const
    {
      return operator-(m.array);
    }
    GgMatrix operator*(const GLfloat *a) const
    {
      return multiply(a);
    }
    GgMatrix operator*(const GgMatrix &m) const
    {
      return operator*(m.array);
    }
    GgMatrix operator/(const GLfloat *a) const
    {
      return divide(a);
    }
    GgMatrix operator/(const GgMatrix &m) const
    {
      return operator/(m.array);
    }

    //! \brief 単位行列を格納する.
    GgMatrix &loadIdentity();

    //! \brief 平行移動の変換行列を格納する.
    //!   \param x x 方向の移動量.
    //!   \param y y 方向の移動量.
    //!   \param z z 方向の移動量.
    //!   \param w w 移動量のスケールファクタ (= 1.0f).
    //!   \return 設定した変換行列.
    GgMatrix &loadTranslate(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f);

    //! \brief 平行移動の変換行列を格納する.
    //!   \param t 移動量の GLfloat 型の配列 (x, y, z).
    //!   \return 設定した変換行列.
    GgMatrix &loadTranslate(const GLfloat *t)
    {
      return loadTranslate(t[0], t[1], t[2]);
    }

    //! \brief 拡大縮小の変換行列を格納する.
    //!   \param x x 方向の拡大率.
    //!   \param y y 方向の拡大率.
    //!   \param z z 方向の拡大率.
    //!   \param w w 拡大率のスケールファクタ (= 1.0f).
    //!   \return 設定した変換行列.
    GgMatrix &loadScale(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f);

    //! \brief 拡大縮小の変換行列を格納する.
    //!   \param s 拡大率の GLfloat 型の配列 (x, y, z).
    //!   \return 設定した変換行列.
    GgMatrix &loadScale(const GLfloat *s)
    {
      return loadScale(s[0], s[1], s[2]);
    }

    //! \brief x 軸中心の回転の変換行列を格納する.
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotateX(GLfloat a);

    //! \brief y 軸中心の回転の変換行列を格納する.
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotateY(GLfloat a);

    //! \brief z 軸中心の回転の変換行列を格納する.
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotateZ(GLfloat a);

    //! \brief (x, y, z) 方向のベクトルを軸とする回転の変換行列を格納する.
    //!   \param x 回転軸の x 成分.
    //!   \param y 回転軸の y 成分.
    //!   \param z 回転軸の z 成分.
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a);

    //! \brief r 方向のベクトルを軸とする回転の変換行列を格納する.
    //!   \param r 回転軸の方向ベクトル (x, y, z).
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotate(const GLfloat *r, GLfloat a)
    {
      return loadRotate(r[0], r[1], r[2], a);
    }

    //! \brief r 方向のベクトルを軸とする回転の変換行列を格納する.
    //!   \param r 回転軸の方向ベクトルと回転角 (x, y, z, a).
    //!   \return 設定した変換行列.
    GgMatrix &loadRotate(const GLfloat *r)
    {
      return loadRotate(r[0], r[1], r[2], r[3]);
    }

    //! \brief ビュー変換行列を格納する.
    //!   \param ex 視点の位置の x 座標値.
    //!   \param ey 視点の位置の y 座標値.
    //!   \param ez 視点の位置の z 座標値.
    //!   \param tx 目標点の位置の x 座標値.
    //!   \param ty 目標点の位置の y 座標値.
    //!   \param tz 目標点の位置の z 座標値.
    //!   \param ux 上方向のベクトルの x 成分.
    //!   \param uy 上方向のベクトルの y 成分.
    //!   \param uz 上方向のベクトルの z 成分.
    //!   \return 設定したビュー変換行列.
    GgMatrix &loadLookat(GLfloat ex, GLfloat ey, GLfloat ez,
      GLfloat tx, GLfloat ty, GLfloat tz,
      GLfloat ux, GLfloat uy, GLfloat uz);

    //! \brief ビュー変換行列を格納する.
    //!   \param e 視点の位置の配列変数.
    //!   \param t 目標点の位置の配列変数.
    //!   \param u 上方向のベクトルのの配列変数.
    //!   \return 設定したビュー変換行列.
    GgMatrix &loadLookat(const GLfloat *e, const GLfloat *t, const GLfloat *u)
    {
      return loadLookat(e[0], e[1], e[2], t[0], t[1], t[2], u[0], u[1], u[2]);
    }

    //! \brief 直交投影変換行列を格納する.
    //!   \param left ウィンドウの左端の位置.
    //!   \param right ウィンドウの右端の位置.
    //!   \param bottom ウィンドウの下端の位置.
    //!   \param top ウィンドウの上端の位置.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 設定した直交投影変換行列.
    GgMatrix &loadOrthogonal(GLfloat left, GLfloat right,
      GLfloat bottom, GLfloat top,
      GLfloat zNear, GLfloat zFar);

    //! \brief 透視透視投影変換行列を格納する.
    //!   \param left ウィンドウの左端の位置.
    //!   \param right ウィンドウの右端の位置.
    //!   \param bottom ウィンドウの下端の位置.
    //!   \param top ウィンドウの上端の位置.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 設定した透視投影変換行列.
    GgMatrix &loadFrustum(GLfloat left, GLfloat right,
      GLfloat bottom, GLfloat top,
      GLfloat zNear, GLfloat zFar);

    //! \brief 画角を指定して透視投影変換行列を格納する.
    //!   \param fovy y 方向の画角.
    //!   \param aspect 縦横比.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 設定した透視投影変換行列.
    GgMatrix &loadPerspective(GLfloat fovy, GLfloat aspect,
      GLfloat zNear, GLfloat zFar);

    //! \brief 転置行列を格納する.
    //!   \param a GLfloat 型の 16 要素の変換行列.
    //!   \return 設定した a の転置行列.
    GgMatrix &loadTranspose(const GLfloat *a);

    //! \brief 転置行列を格納する.
    //!   \param m GgMatrix 型の変換行列.
    //!   \return 設定した m の転置行列.
    GgMatrix &loadTranspose(const GgMatrix &m)
    {
      return loadTranspose(m.array);
    }

    //! \brief 逆行列を格納する.
    //!   \param a GLfloat 型の 16 要素の変換行列.
    //!   \return 設定した a の逆行列.
    GgMatrix &loadInvert(const GLfloat *a);

    //! \brief 逆行列を格納する.
    //!   \param m GgMatrix 型の変換行列.
    //!   \return 設定した m の逆行列.
    GgMatrix &loadInvert(const GgMatrix &m)
    {
      return loadInvert(m.array);
    }

    //! \brief 法線変換行列を格納する.
    //!   \param a GLfloat 型の 16 要素の変換行列.
    //!   \return 設定した m の法線変換行列.
    GgMatrix &loadNormal(const GLfloat *a);

    //! \brief 法線変換行列を格納する.
    //!   \param GgMatrix 型の変換行列.
    //!   \return 設定した m の法線変換行列.
    GgMatrix &loadNormal(const GgMatrix &m)
    {
      return loadNormal(m.array);
    }

    //! \brief 平行移動変換を乗じた結果を返す.
    //!   \param x x 方向の移動量.
    //!   \param y y 方向の移動量.
    //!   \param z z 方向の移動量.
    //!   \param w w 移動量のスケールファクタ (= 1.0f).
    //!   \return 平行移動した結果の変換行列.
    GgMatrix translate(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f) const
    {
      GgMatrix m;
      return multiply(m.loadTranslate(x, y, z, w));
    }

    //! \brief 平行移動変換を乗じた結果を返す.
    //!   \param t 移動量の GLfloat 型の 4 要素の配列 (x, y, z, w).
    //!   \return 平行移動した結果の変換行列.
    GgMatrix translate(const GLfloat *t) const
    {
      return translate(t[0], t[1], t[2], t[3]);
    }

    //! \brief 拡大縮小変換を乗じた結果を返す.
    //!   \param x x 方向の拡大率.
    //!   \param y y 方向の拡大率.
    //!   \param z z 方向の拡大率.
    //!   \param w w 移動量のスケールファクタ (= 1.0f).
    //!   \return 拡大縮小した結果の変換行列.
    GgMatrix scale(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f) const
    {
      GgMatrix m;
      return multiply(m.loadScale(x, y, z, w));
    }

    //! \brief 拡大縮小変換を乗じた結果を返す.
    //!   \param s 拡大率の GLfloat 型の 4 要素の配列 (x, y, z, w).
    //!   \return 拡大縮小した結果の変換行列.
    GgMatrix scale(const GLfloat *s) const
    {
      return scale(s[0], s[1], s[2], s[3]);
    }

    //! \brief x 軸中心の回転変換を乗じた結果を返す.
    //!   \param a 回転角.
    //!   \return x 軸中心にさらに a 回転した変換行列.
    GgMatrix rotateX(GLfloat a) const
    {
      GgMatrix m;
      return multiply(m.loadRotateX(a));
    }

    //! \brief y 軸中心の回転変換を乗じた結果を返す.
    //!   \param a 回転角.
    //!   \return y 軸中心にさらに a 回転した変換行列.
    GgMatrix rotateY(GLfloat a) const
    {
      GgMatrix m;
      return multiply(m.loadRotateY(a));
    }

    //! \brief z 軸中心の回転変換を乗じた結果を返す.
    //!   \param a 回転角.
    //!   \return z 軸中心にさらに a 回転した変換行列.
    GgMatrix rotateZ(GLfloat a) const
    {
      GgMatrix m;
      return multiply(m.loadRotateZ(a));
    }

    //! \brief (x, y, z) 方向のベクトルを軸とする回転変換を乗じた結果を返す.
    //!   \param x 回転軸の x 成分.
    //!   \param y 回転軸の y 成分.
    //!   \param z 回転軸の z 成分.
    //!   \param a 回転角.
    //!   \return (x, y, z) を軸にさらに a 回転した変換行列.
    GgMatrix rotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a) const
    {
      GgMatrix m;
      return multiply(m.loadRotate(x, y, z, a));
    }

    //! \brief r 方向のベクトルを軸とする回転変換を乗じた結果を返す.
    //!   \param r 回転軸の方向ベクトルと回転角 (x, y, z).
    //!   \param a 回転角.
    //!   \return (r[0], r[1], r[2]) を軸にさらに a 回転した変換行列.
    GgMatrix rotate(const GLfloat *r, GLfloat a) const
    {
      return rotate(r[0], r[1], r[2], a);
    }

    //! \brief r 方向のベクトルを軸とする回転の変換行列を乗じた結果を返す.
    //!   \param r 回転軸の方向ベクトルと回転角 (x, y, z, a).
    //!   \return (r[0], r[1], r[2]) を軸にさらに r[3] 回転した変換行列.
    GgMatrix rotate(const GLfloat *r) const
    {
      return rotate(r[0], r[1], r[2], r[3]);
    }

    //! \brief ビュー変換を乗じた結果を返す.
    //!   \param ex 視点の位置の x 座標値.
    //!   \param ey 視点の位置の y 座標値.
    //!   \param ez 視点の位置の z 座標値.
    //!   \param tx 目標点の位置の x 座標値.
    //!   \param ty 目標点の位置の y 座標値.
    //!   \param tz 目標点の位置の z 座標値.
    //!   \param ux 上方向のベクトルの x 成分.
    //!   \param uy 上方向のベクトルの y 成分.
    //!   \param uz 上方向のベクトルの z 成分.
    //!   \return ビュー変換行列を乗じた変換行列.
    GgMatrix lookat(GLfloat ex, GLfloat ey, GLfloat ez,
      GLfloat tx, GLfloat ty, GLfloat tz,
      GLfloat ux, GLfloat uy, GLfloat uz) const
    {
      GgMatrix m;
      return multiply(m.loadLookat(ex, ey, ez, tx, ty, tz, ux, uy, uz));
    }

    //! \brief ビュー変換を乗じた結果を返す.
    //!   \param e 視点の位置の配列変数.
    //!   \param t 目標点の位置の配列変数.
    //!   \param u 上方向のベクトルのの配列変数.
    //!   \return ビュー変換行列を乗じた変換行列.
    GgMatrix lookat(const GLfloat *e, const GLfloat *t, const GLfloat *u) const
    {
      return lookat(e[0], e[1], e[2], t[0], t[1], t[2], u[0], u[1], u[2]);
    }

    //! \brief 直交投影変換を乗じた結果を返す.
    //!   \param left ウィンドウの左端の位置.
    //!   \param right ウィンドウの右端の位置.
    //!   \param bottom ウィンドウの下端の位置.
    //!   \param top ウィンドウの上端の位置.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 直交投影変換行列を乗じた変換行列.
    GgMatrix orthogonal(GLfloat left, GLfloat right,
      GLfloat bottom, GLfloat top,
      GLfloat zNear, GLfloat zFar) const
    {
      GgMatrix m;
      return multiply(m.loadOrthogonal(left, right, bottom, top, zNear, zFar));
    }

    //! \brief 透視投影変換を乗じた結果を返す.
    //!   \param left ウィンドウの左端の位置.
    //!   \param right ウィンドウの右端の位置.
    //!   \param bottom ウィンドウの下端の位置.
    //!   \param top ウィンドウの上端の位置.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 透視投影変換行列を乗じた変換行列.
    GgMatrix frustum(GLfloat left, GLfloat right,
      GLfloat bottom, GLfloat top,
      GLfloat zNear, GLfloat zFar) const
    {
      GgMatrix m;
      return multiply(m.loadFrustum(left, right, bottom, top, zNear, zFar));
    }

    //! \brief 画角を指定して透視投影変換を乗じた結果を返す.
    //!   \param fovy y 方向の画角.
    //!   \param aspect 縦横比.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 透視投影変換行列を乗じた変換行列.
    GgMatrix perspective(GLfloat fovy, GLfloat aspect,
      GLfloat zNear, GLfloat zFar) const
    {
      GgMatrix m;
      return multiply(m.loadPerspective(fovy, aspect, zNear, zFar));
    }

    //! \brief 転置行列を返す.
    //!   \return 転置行列.
    GgMatrix transpose() const
    {
      GgMatrix t;
      return t.loadTranspose(*this);
    }

    //! \brief 逆行列を返す.
    //!   \return 逆行列.
    GgMatrix invert() const
    {
      GgMatrix t;
      return t.loadInvert(*this);
    }

    //! \brief 法線変換行列を返す.
    //!   \return 法線変換行列.
    GgMatrix normal() const
    {
      GgMatrix t;
      return t.loadNormal(*this);
    }

    //! \brief ベクトルに対して投影変換を行う.
    //!   \param c 変換結果を格納する GLfloat 型の 4 要素の配列.
    //!   \param v 元のベクトルの GLfloat 型の 4 要素の配列.
    void projection(GLfloat *c, const GLfloat *v) const
    {
      projection(c, array, v);
    }

    //! \brief 変換行列を取り出す.
    //!   \return 変換行列を格納した GLfloat 型の 16 要素の配列.
    const GLfloat *get() const
    {
      return array;
    }

    //! \brief 変換行列を取り出す.
    //!   \param a 変換行列を格納する GLfloat 型の 16 要素の配列.
    void get(GLfloat *a) const
    {
      for (int i = 0; i < 16; ++i) a[i] = array[i];
    }
  };

  //! \brief 単位行列を返す.
  //!   \return 単位行列
  inline GgMatrix ggIdentity()
  {
    GgMatrix t;
    return t.loadIdentity();
  };

  //! \brief 平行移動の変換行列を返す.
  //!   \param x x 方向の移動量.
  //!   \param y y 方向の移動量.
  //!   \param z z 方向の移動量.
  //!   \param w 移動量のスケールファクタ (= 1.0f).
  //!   \return 平行移動の変換行列.
  inline GgMatrix ggTranslate(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f)
  {
    GgMatrix m;
    return m.loadTranslate(x, y, z, w);
  }

  //! \brief 平行移動の変換行列を返す.
  //!   \param t 移動量の GLfloat 型の配列 (x, y, z).
  //!   \return 平行移動の変換行列
  inline GgMatrix ggTranslate(const GLfloat *t)
  {
    GgMatrix m;
    return m.loadTranslate(t[0], t[1], t[2]);
  }

  //! \brief 拡大縮小の変換行列を返す.
  //!   \param x x 方向の拡大率.
  //!   \param y y 方向の拡大率.
  //!   \param z z 方向の拡大率.
  //!   \param w 拡大率のスケールファクタ (= 1.0f).
  //!   \return 拡大縮小の変換行列.
  inline GgMatrix ggScale(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f)
  {
    GgMatrix m;
    return m.loadScale(x, y, z, w);
  }

  //! \brief 拡大縮小の変換行列を返す.
  //!   \param s 拡大率の GLfloat 型の配列 (x, y, z).
  //!   \return 拡大縮小の変換行列.
  inline GgMatrix ggScale(const GLfloat *s)
  {
    GgMatrix m;
    return m.loadScale(s[0], s[1], s[2]);
  }

  //! \brief x 軸中心の回転の変換行列を返す.
  //!   \param a 回転角.
  //!   \return x 軸中心に a だけ回転する変換行列.
  inline GgMatrix ggRotateX(GLfloat a)
  {
    GgMatrix m;
    return m.loadRotateX(a);
  }

  //! \brief y 軸中心の回転の変換行列を返す.
  //!   \param a 回転角.
  //!   \return y 軸中心に a だけ回転する変換行列.
  inline GgMatrix ggRotateY(GLfloat a)
  {
    GgMatrix m;
    return m.loadRotateY(a);
  }

  //! \brief z 軸中心の回転の変換行列を返す.
  //!   \param a 回転角.
  //!   \return z 軸中心に a だけ回転する変換行列.
  inline GgMatrix ggRotateZ(GLfloat a)
  {
    GgMatrix m;
    return m.loadRotateZ(a);
  }

  //! \brief (x, y, z) 方向のベクトルを軸とする回転の変換行列を乗じた結果を返す.
  //!   \param x 回転軸の x 成分.
  //!   \param y 回転軸の y 成分.
  //!   \param z 回転軸の z 成分.
  //!   \param a 回転角.
  //!   \return (x, y, z) を軸にさらに a 回転する変換行列.
  inline GgMatrix ggRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a)
  {
    GgMatrix m;
    return m.loadRotate(x, y, z, a);
  }

  //! \brief r 方向のベクトルを軸とする回転の変換行列を乗じた結果を返す.
  //!   \param r 回転軸のベクトルを表す GLfloat 型の 3 要素の配列.
  //!   \param a 回転角.
  //!   \return r を軸に a だけ回転する変換行列.
  inline GgMatrix ggRotate(const GLfloat *r, GLfloat a)
  {
    GgMatrix m;
    return m.loadRotate(r[0], r[1], r[2], a);
  }

  //! \brief r 方向のベクトルを軸とする回転の変換行列を乗じた結果を返す.
  //!   \param r 回転軸のベクトルと回転角を表す GLfloat 型の 4 要素の配列.
  //!   \return (r[0], r[1], r[2]) を軸に r[3] だけ回転する変換行列.
  inline GgMatrix ggRotate(const GLfloat *r)
  {
    GgMatrix m;
    return m.loadRotate(r[0], r[1], r[2], r[3]);
  }

  //! \brief ビュー変換行列を返す.
  //!   \param ex 視点の位置の x 座標値.
  //!   \param ey 視点の位置の y 座標値.
  //!   \param ez 視点の位置の z 座標値.
  //!   \param tx 目標点の位置の x 座標値.
  //!   \param ty 目標点の位置の y 座標値.
  //!   \param tz 目標点の位置の z 座標値.
  //!   \param ux 上方向のベクトルの x 成分.
  //!   \param uy 上方向のベクトルの y 成分.
  //!   \param uz 上方向のベクトルの z 成分.
  //!   \return 求めたビュー変換行列.
  inline GgMatrix ggLookat(
    GLfloat ex, GLfloat ey, GLfloat ez,     // 視点の位置
    GLfloat tx, GLfloat ty, GLfloat tz,     // 目標点の位置
    GLfloat ux, GLfloat uy, GLfloat uz      // 上方向のベクトル
  )
  {
    GgMatrix m;
    return m.loadLookat(ex, ey, ez, tx, ty, tz, ux, uy, uz);
  }

  //! \brief ビュー変換行列を返す.
  //!   \param e 視点の位置の配列変数.
  //!   \param t 目標点の位置の配列変数.
  //!   \param u 上方向のベクトルのの配列変数.
  //!   \return 求めたビュー変換行列.
  inline GgMatrix ggLookat(
    const GLfloat *e,                       // 視点の位置
    const GLfloat *t,                       // 目標点の位置
    const GLfloat *u                        // 上方向のベクトル
  )
  {
    GgMatrix m;
    return m.loadLookat(e[0], e[1], e[2], t[0], t[1], t[2], u[0], u[1], u[2]);
  }

  //! \brief 直交投影変換行列を返す.
  //!   \param left ウィンドウの左端の位置.
  //!   \param right ウィンドウの右端の位置.
  //!   \param bottom ウィンドウの下端の位置.
  //!   \param top ウィンドウの上端の位置.
  //!   \param zNear 視点から前方面までの位置.
  //!   \param zFar 視点から後方面までの位置.
  //!   \return 求めた直交投影変換行列.
  inline GgMatrix ggOrthogonal(GLfloat left, GLfloat right,
    GLfloat bottom, GLfloat top,
    GLfloat zNear, GLfloat zFar)
  {
    GgMatrix m;
    return m.loadOrthogonal(left, right, bottom, top, zNear, zFar);
  }

  //! \brief 透視透視投影変換行列を返す.
  //!   \param left ウィンドウの左端の位置.
  //!   \param right ウィンドウの右端の位置.
  //!   \param bottom ウィンドウの下端の位置.
  //!   \param top ウィンドウの上端の位置.
  //!   \param zNear 視点から前方面までの位置.
  //!   \param zFar 視点から後方面までの位置.
  //!   \return 求めた透視投影変換行列.
  inline GgMatrix ggFrustum(GLfloat left, GLfloat right,
    GLfloat bottom, GLfloat top,
    GLfloat zNear, GLfloat zFar)
  {
    GgMatrix m;
    return m.loadFrustum(left, right, bottom, top, zNear, zFar);
  }

  //! \brief 画角を指定して透視投影変換行列を返す.
  //!   \param fovy y 方向の画角.
  //!   \param aspect 縦横比.
  //!   \param zNear 視点から前方面までの位置.
  //!   \param zFar 視点から後方面までの位置.
  //!   \return 求めた透視投影変換行列.
  inline GgMatrix ggPerspective(GLfloat fovy, GLfloat aspect,
    GLfloat zNear, GLfloat zFar)
  {
    GgMatrix m;
    return m.loadPerspective(fovy, aspect, zNear, zFar);
  }

  //! \brief 転置行列を返す.
  //!   \param m 元の変換行列.
  //!   \return m の転置行列.
  inline GgMatrix ggTranspose(const GgMatrix &m)
  {
    return m.transpose();
  }

  //! \brief 逆行列を返す.
  //!   \param m 元の変換行列.
  //!   \return m の逆行列.
  inline GgMatrix ggInvert(const GgMatrix &m)
  {
    return m.invert();
  }

  //! \brief 法線変換行列を返す.
  //!   \param m 元の変換行列.
  //!   \return m の法線変換行列.
  inline GgMatrix ggNormal(const GgMatrix &m)
  {
    return m.normal();
  }

  /*!
  ** \brief 四元数.
  */
  class GgQuaternion
  {
    // 四元数の要素
    GLfloat array[4];

    // GgQuaternion 型の四元数 p と四元数 q の積を四元数 r に求める
    void multiply(GLfloat *r, const GLfloat *p, const GLfloat *q) const;

    // GgQuaternion 型の四元数 q が表す回転の変換行列を m に求める
    void toMatrix(GLfloat *m, const GLfloat *q) const;

    // 回転の変換行列 m が表す四元数を q に求める
    void toQuaternion(GLfloat *q, const GLfloat *m) const;

    // 球面線形補間 q と r を t で補間した四元数を p に求める
    void slerp(GLfloat *p, const GLfloat *q, const GLfloat *r, GLfloat t) const;

  public:

    //! \brief デストラクタ.
    ~GgQuaternion() {}

    //! \brief コンストラクタ.
    GgQuaternion() {}

    //! \brief コンストラクタ.
    //!   \param x 四元数の x 要素.
    //!   \param y 四元数の y 要素.
    //!   \param z 四元数の z 要素.
    //!   \param w 四元数の w 要素.
    GgQuaternion(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      load(x, y, z, w);
    }

    //! \brief コンストラクタ.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    GgQuaternion(const GLfloat *a)
    {
      load(a);
    }

    //! \brief コピーコンストラクタ.
    //!   \param q GgQuaternion 型の四元数.
    GgQuaternion(const GgQuaternion &q)
    {
      load(q);
    }

    //! \brief 四元数のノルムを求める.
    //!   \return 四元数のノルム.
    GLfloat norm() const
    {
      return ggLength4(array);
    }

    //! \brief 四元数を格納する.
    //!   \param x 四元数の x 要素.
    //!   \param y 四元数の y 要素.
    //!   \param z 四元数の z 要素.
    //!   \param w 四元数の w 要素.
    //!   \return 設定した四元数.
    GgQuaternion &load(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      array[0] = x;
      array[1] = y;
      array[2] = z;
      array[3] = w;
      return *this;
    }

    //! \brief 四元数を格納する.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    //!   \return 設定した四元数.
    GgQuaternion &load(const GLfloat *a)
    {
      return load(a[0], a[1], a[2], a[3]);
    }

    //! \brief 四元数を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return 設定した四元数.
    GgQuaternion &load(const GgQuaternion &q)
    {
      return load(q.array);
    }

    //! \brief 四元数に別の四元数を加算した結果を格納する.
    //!   \param x 加える四元数の x 要素.
    //!   \param y 加える四元数の y 要素.
    //!   \param z 加える四元数の z 要素.
    //!   \param w 加える四元数の w 要素.
    //!   \return (x, y, z, w) を加えた四元数.
    GgQuaternion &loadAdd(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      array[0] += x;
      array[1] += y;
      array[2] += z;
      array[3] += w;
      return *this;
    }

    //! \brief 四元数に別の四元数を加算した結果を格納する.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    //!   \return a を加えた四元数.
    GgQuaternion &loadAdd(const GLfloat *a)
    {
      return loadAdd(a[0], a[1], a[2], a[3]);
    }

    //! \brief 四元数に別の四元数を加算した結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を加えた四元数.
    GgQuaternion &loadAdd(const GgQuaternion &q)
    {
      return loadAdd(q.array);
    }

    //! \brief 四元数から別の四元数を減算した結果を格納する.
    //!   \param x 引く四元数の x 要素.
    //!   \param y 引く四元数の y 要素.
    //!   \param z 引く四元数の z 要素.
    //!   \param w 引く四元数の w 要素.
    //!   \return (x, y, z, w) を引いた四元数.
    GgQuaternion &loadSubtract(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      array[0] -= x;
      array[1] -= y;
      array[2] -= z;
      array[3] -= w;
      return *this;
    }

    //! \brief 四元数から別の四元数を減算した結果を格納する.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    //!   \return a を引いた四元数.
    GgQuaternion &loadSubtract(const GLfloat *a)
    {
      return loadSubtract(a[0], a[1], a[2], a[3]);
    }

    //! \brief 四元数から別の四元数を減算した結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を引いた四元数.
    GgQuaternion &loadSubtract(const GgQuaternion &q)
    {
      return loadSubtract(q.array);
    }

    //! \brief 四元数に別の四元数を乗算した結果を格納する.
    //!   \param x 掛ける四元数の x 要素.
    //!   \param y 掛ける四元数の y 要素.
    //!   \param z 掛ける四元数の z 要素.
    //!   \param w 掛ける四元数の w 要素.
    //!   \return (x, y, z, w) を掛けた四元数.
    GgQuaternion &loadMultiply(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      GLfloat a[4] = { x, y, z, w };
      return loadMultiply(a);
    }

    //! \brief 四元数に別の四元数を乗算した結果を格納する.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    //!   \return a を乗じた四元数.
    GgQuaternion &loadMultiply(const GLfloat *a)
    {
      return load(multiply(a));
    }

    //! \brief 四元数に別の四元数を乗算した結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を乗じた四元数.
    GgQuaternion &loadMultiply(const GgQuaternion &q)
    {
      return loadMultiply(q.array);
    }

    //! \brief 四元を別の四元数で除算した結果を格納する.
    //!   \param x 割る四元数の x 要素.
    //!   \param y 割る四元数の y 要素.
    //!   \param z 割る四元数の z 要素.
    //!   \param w 割る四元数の w 要素.
    //!   \return (x, y, z, w) を割った四元数.
    GgQuaternion &loadDivide(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      GLfloat a[4] = { x, y, z, w };
      return loadDivide(a);
    }

    //! \brief 四元を別の四元数で除算した結果を格納する.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    //!   \return a で割った四元数.
    GgQuaternion &loadDivide(const GLfloat *a)
    {
      return load(divide(a));
    }

    //! \brief 四元を別の四元数で除算した結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q で割った四元数.
    GgQuaternion &loadDivide(const GgQuaternion &q)
    {
      return loadDivide(q.array);
    }

    //! \brief 四元数に別の四元数を加算した結果を返す.
    //!   \param x 加える四元数の x 要素.
    //!   \param y 加える四元数の y 要素.
    //!   \param z 加える四元数の z 要素.
    //!   \param w 加える四元数の w 要素.
    //!   \return (x, y, z, w) を加えた四元数.
    GgQuaternion add(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
    {
      GgQuaternion s;
      s.array[0] = array[0] + x;
      s.array[1] = array[1] + y;
      s.array[2] = array[2] + z;
      s.array[3] = array[3] + w;
      return s;
    }

    //! \brief 四元数に別の四元数を加算した結果を返す.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    //!   \return a を加えた四元数.
    GgQuaternion add(const GLfloat *a) const
    {
      return add(a[0], a[1], a[2], a[3]);
    }

    //! \brief 四元数に別の四元数を加算した結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を加えた四元数.
    GgQuaternion add(const GgQuaternion &q) const
    {
      return add(q.array);
    }

    //! \brief 四元数から別の四元数を減算した結果を返す.
    //!   \param x 引く四元数の x 要素.
    //!   \param y 引く四元数の y 要素.
    //!   \param z 引く四元数の z 要素.
    //!   \param w 引く四元数の w 要素.
    //!   \return (x, y, z, w) を引いた四元数.
    GgQuaternion subtract(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
    {
      GgQuaternion s;
      s.array[0] = array[0] - x;
      s.array[1] = array[1] - y;
      s.array[2] = array[2] - z;
      s.array[3] = array[3] - w;
      return s;
    }

    //! \brief 四元数から別の四元数を減算した結果を返す.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    //!   \return a を引いた四元数.
    GgQuaternion subtract(const GLfloat *a) const
    {
      return subtract(a[0], a[1], a[2], a[3]);
    }

    //! \brief 四元数から別の四元数を減算した結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を引いた四元数.
    GgQuaternion subtract(const GgQuaternion &q) const
    {
      return subtract(q.array);
    }

    //! \brief 四元数に別の四元数を乗算した結果を返す.
    //!   \param x 掛ける四元数の x 要素.
    //!   \param y 掛ける四元数の y 要素.
    //!   \param z 掛ける四元数の z 要素.
    //!   \param w 掛ける四元数の w 要素.
    //!   \return (x, y, z, w) を掛けた四元数.
    GgQuaternion multiply(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
    {
      GLfloat a[4] = { x, y, z, w };
      return multiply(a);
    }

    //! \brief 四元数に別の四元数を乗算した結果を返す.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    //!   \return a を掛けた四元数.
    GgQuaternion multiply(const GLfloat *a) const
    {
      GgQuaternion s;
      multiply(s.array, array, a);
      return s;
    }

    //! \brief 四元数に別の四元数を乗算した結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を掛けた四元数.
    GgQuaternion multiply(const GgQuaternion &q) const
    {
      return multiply(q.array);
    }

    //! \brief 四元数を別の四元数で除算した結果を返す.
    //!   \param x 割る四元数の x 要素.
    //!   \param y 割る四元数の y 要素.
    //!   \param z 割る四元数の z 要素.
    //!   \param w 割る四元数の w 要素.
    //!   \return (x, y, z, w) を割った四元数.
    GgQuaternion divide(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
    {
      GLfloat a[4] = { x, y, z, w };
      return divide(a);
    }

    //! \brief 四元数を別の四元数で除算した結果を返す.
    //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
    //!   \return a で割った四元数.
    GgQuaternion divide(const GLfloat *a) const
    {
      GgQuaternion s, ia;
      ia.loadInvert(a);
      multiply(s.array, array, ia.array);
      return s;
    }

    //! \brief 四元数を別の四元数で除算した結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q で割った四元数.
    GgQuaternion divide(const GgQuaternion &q) const
    {
      return divide(q.array);
    }

    // 演算子
    GgQuaternion &operator=(const GLfloat *a)
    {
      return load(a);
    }
    GgQuaternion &operator=(const GgQuaternion &q)
    {
      return operator=(q.array);
    }
    GgQuaternion &operator+=(const GLfloat *a)
    {
      return loadAdd(a);
    }
    GgQuaternion &operator+=(const GgQuaternion &q)
    {
      return operator+=(q.array);
    }
    GgQuaternion &operator-=(const GLfloat *a)
    {
      return loadSubtract(a);
    }
    GgQuaternion &operator-=(const GgQuaternion &q)
    {
      return operator-=(q.array);
    }
    GgQuaternion &operator*=(const GLfloat *a)
    {
      return loadMultiply(a);
    }
    GgQuaternion &operator*=(const GgQuaternion &q)
    {
      return operator*=(q.array);
    }
    GgQuaternion &operator/=(const GLfloat *a)
    {
      return loadDivide(a);
    }
    GgQuaternion &operator/=(const GgQuaternion &q)
    {
      return operator/=(q.array);
    }
    GgQuaternion operator+(const GLfloat *a) const
    {
      return add(a);
    }
    GgQuaternion operator+(const GgQuaternion &q) const
    {
      return operator+(q.array);
    }
    GgQuaternion operator-(const GLfloat *a) const
    {
      return add(a);
    }
    GgQuaternion operator-(const GgQuaternion &q) const
    {
      return operator-(q.array);
    }
    GgQuaternion operator*(const GLfloat *a) const
    {
      return multiply(a);
    }
    GgQuaternion operator*(const GgQuaternion &q) const
    {
      return operator*(q.array);
    }
    GgQuaternion operator/(const GLfloat *a) const
    {
      return divide(a);
    }
    GgQuaternion operator/(const GgQuaternion &q) const
    {
      return operator/(q.array);
    }

    //! \brief 回転の変換行列を表す四元数を格納する.
    //!   \param a GLfloat 型の 16 要素の変換行列.
    //!   \return a による回転の変換に相当する四元数.
    GgQuaternion &loadMatrix(const GLfloat *a)
    {
      toQuaternion(array, a);
      return *this;
    }

    //! \brief 回転の変換行列 m を表す四元数を格納する.
    //!   \param m Ggmatrix 型の変換行列.
    //!   \return m による回転の変換に相当する四元数.
    GgQuaternion &loadMatrix(const GgMatrix &m)
    {
      return loadMatrix(m.get());
    }

    //! \brief 単位元を格納する.
    //!   \return 格納された単位元.
    GgQuaternion &loadIdentity()
    {
      return load(0.0f, 0.0f, 0.0f, 1.0f);
    }

    //! \brief (x, y, z) を軸として角度 a 回転する四元数を格納する.
    //!   \param x 軸ベクトルの x 成分.
    //!   \param y 軸ベクトルの y 成分.
    //!   \param z 軸ベクトルの z 成分.
    //!   \param a 回転角.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a);

    //! \brief (v[0], v[1], v[2]) を軸として角度 a 回転する四元数を格納する.
    //!   \param v 軸ベクトルを表す GLfloat 型の 3 要素の配列.
    //!   \param a 回転角.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotate(const GLfloat *v, GLfloat a)
    {
      return loadRotate(v[0], v[1], v[2], a);
    }

    //! \brief (v[0], v[1], v[2]) を軸として角度 v[3] 回転する四元数を格納する.
    //!   \param v 軸ベクトルと回転角を格納した GLfloat 型の 4 要素の配列.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotate(const GLfloat *v)
    {
      return loadRotate(v[0], v[1], v[2], v[3]);
    }

    //! \brief x 軸中心に角度 a 回転する四元数を格納する.
    //!   \param a 回転角.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotateX(GLfloat a);

    //! \brief y 軸中心に角度 a 回転する四元数を格納する.
    //!   \param a 回転角.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotateY(GLfloat a);

    //! \brief z 軸中心に角度 a 回転する四元数を格納する.
    //!   \param v 軸ベクトルを表す GLfloat 型の 4 要素の配列.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotateZ(GLfloat a);

    //! \brief 四元数を (x, y, z) を軸として角度 a 回転した四元数を返す.
    //!   \param x 軸ベクトルの x 成分.
    //!   \param y 軸ベクトルの y 成分.
    //!   \param z 軸ベクトルの z 成分.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a) const
    {
      GgQuaternion q;
      return multiply(q.loadRotate(x, y, z, a));
    }

    //! \brief 四元数を (v[0], v[1], v[2]) を軸として角度 a 回転した四元数を返す.
    //!   \param v 軸ベクトルを表す GLfloat 型の 3 要素の配列.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotate(const GLfloat *v, GLfloat a) const
    {
      return rotate(v[0], v[1], v[2], a);
    }

    //! \brief 四元数を (v[0], v[1], v[2]) を軸として角度 v[3] 回転した四元数を返す.
    //!   \param v 軸ベクトルを表す GLfloat 型の 4 要素の配列.
    //!   \return 回転した四元数.
    GgQuaternion rotate(const GLfloat *v) const
    {
      return rotate(v[0], v[1], v[2], v[3]);
    }

    //! \brief 四元数を x 軸中心に角度 a 回転した四元数を返す.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotateX(GLfloat a) const
    {
      return rotate(1.0f, 0.0f, 0.0f, a);
    }

    //! \brief 四元数を y 軸中心に角度 a 回転した四元数を返す.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotateY(GLfloat a) const
    {
      return rotate(0.0f, 1.0f, 0.0f, a);
    }

    //! \brief 四元数を z 軸中心に角度 a 回転した四元数を返す.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotateZ(GLfloat a) const
    {
      return rotate(0.0f, 0.0f, 1.0f, a);
    }

    //! \brief オイラー角 (heading, pitch, roll) で与えられた回転を表す四元数を格納する.
    //!   \param heading y 軸中心の回転角.
    //!   \param pitch x 軸中心の回転角.
    //!   \param roll z 軸中心の回転角.
    //!   \return 格納した回転を表す四元数.
    GgQuaternion &loadEuler(GLfloat heading, GLfloat pitch, GLfloat roll);

    //! \brief オイラー角 (e[0], e[1], e[2]) で与えられた回転を表す四元数を格納する.
    //!   \param e オイラー角を表す GLfloat 型の 3 要素の配列 (heading, pitch, roll).
    //!   \return 格納した回転を表す四元数.
    GgQuaternion &loadEuler(const GLfloat *e)
    {
      return loadEuler(e[0], e[1], e[2]);
    }

    //! \brief 四元数をオイラー角 (heading, pitch, roll) で回転した四元数を返す.
    //!   \param heading y 軸中心の回転角.
    //!   \param pitch x 軸中心の回転角.
    //!   \param roll z 軸中心の回転角.
    //!   \return 回転した四元数.
    GgQuaternion euler(GLfloat heading, GLfloat pitch, GLfloat roll) const
    {
      GgQuaternion r;
      return multiply(r.loadEuler(heading, pitch, roll));
    }

    //! \brief 四元数をオイラー角 (e[0], e[1], e[2]) で回転した四元数を返す.
    //!   \param e オイラー角を表す GLfloat 型の 3 要素の配列 (heading, pitch, roll).
    //!   \return 回転した四元数.
    GgQuaternion euler(const GLfloat *e) const
    {
      return euler(e[0], e[1], e[2]);
    }

    //! \brief 球面線形補間の結果を格納する.
    //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
    //!   \param b 四元数を格納した GLfloat 型の 4 要素の配列.
    //!   \param t 補間パラメータ.
    //!   \return 格納した a, b を t で内分した四元数.
    GgQuaternion &loadSlerp(const GLfloat *a, const GLfloat *b, GLfloat t)
    {
      slerp(array, a, b, t);
      return *this;
    }

    //! \brief 球面線形補間の結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \param r GgQuaternion 型の四元数.
    //!   \param t 補間パラメータ.
    //!   \return 格納した q, r を t で内分した四元数.
    GgQuaternion &loadSlerp(const GgQuaternion &q, const GgQuaternion &r, GLfloat t)
    {
      return loadSlerp(q.array, r.array, t);
    }

    //! \brief 球面線形補間の結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
    //!   \param t 補間パラメータ.
    //!   \return 格納した q, a を t で内分した四元数.
    GgQuaternion &loadSlerp(const GgQuaternion &q, const GLfloat *a, GLfloat t)
    {
      return loadSlerp(q.array, a, t);
    }

    //! \brief 球面線形補間の結果を格納する.
    //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
    //!   \param q GgQuaternion 型の四元数.
    //!   \param t 補間パラメータ.
    //!   \return 格納した a, q を t で内分した四元数.
    GgQuaternion &loadSlerp(const GLfloat *a, const GgQuaternion &q, GLfloat t)
    {
      return loadSlerp(a, q.array, t);
    }

    //! \brief 引数に指定した四元数を正規化して格納する.
    //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
    //!   \return 正規化された四元数.
    GgQuaternion &loadNormalize(const GLfloat *a);

    //! \brief 引数に指定した四元数を正規化して格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return 正規化された四元数.
    GgQuaternion &loadNormalize(const GgQuaternion &q)
    {
      return loadNormalize(q.array);
    }

    //! \brief 引数に指定した四元数の共役四元数を格納する.
    //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
    //!   \return 共役四元数.
    GgQuaternion &loadConjugate(const GLfloat *a);

    //! \brief 引数に指定した四元数の共役四元数を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return 共役四元数.
    GgQuaternion &loadConjugate(const GgQuaternion &q)
    {
      return loadConjugate(q.array);
    }

    //! \brief 引数に指定した四元数の逆元を格納する.
    //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
    //!   \return 四元数の逆元.
    GgQuaternion &loadInvert(const GLfloat *a);

    //! \brief 引数に指定した四元数の逆元を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return 四元数の逆元.
    GgQuaternion &loadInvert(const GgQuaternion &q)
    {
      return loadInvert(q.array);
    }

    //! \brief 球面線形補間の結果を返す.
    //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
    //!   \param t 補間パラメータ.
    //!   \return 四元数を a に対して t で内分した結果.
    GgQuaternion slerp(GLfloat *a, GLfloat t) const
    {
      GgQuaternion p;
      slerp(p.array, array, a, t);
      return p;
    }

    //! \brief 球面線形補間の結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \param t 補間パラメータ.
    //!   \return 四元数を q に対して t で内分した結果.
    GgQuaternion slerp(const GgQuaternion &q, GLfloat t) const
    {
      GgQuaternion p;
      slerp(p.array, array, q.array, t);
      return p;
    }

    //! \brief 正規化する.
    //!   \return 正規化された四元数.
    GgQuaternion normalize() const
    {
      GgQuaternion q;
      q.loadNormalize(array);
      return q;
    }

    //! \brief 共役四元数に変換する.
    //!   \return 共役四元数.
    GgQuaternion conjugate() const
    {
      GgQuaternion q;
      q.loadConjugate(array);
      return q;
    }

    //! \brief 逆元に変換する.
    //!   \return 四元数の逆元.
    GgQuaternion invert() const
    {
      GgQuaternion q;
      q.loadInvert(array);
      return q;
    }

    //! \brief 四元数を取り出す.
    //!   \return 四元数を表す GLfloat 型の 4 要素の配列.
    const GLfloat *get() const
    {
      return array;
    }

    //! \brief 四元数を取り出す.
    //!   \param a 四元数を格納する GLfloat 型の 4 要素の配列.
    void get(GLfloat *a) const
    {
      a[0] = array[0];
      a[1] = array[1];
      a[2] = array[2];
      a[3] = array[3];
    }

    //! \brief 四元数が表す回転の変換行列を a に求める.
    //!   \param a 回転の変換行列を格納する GLfloat 型の 16 要素の配列.
    void getMatrix(GLfloat *a) const
    {
      toMatrix(a, array);
    }

    //! \brief 四元数が表す回転の変換行列を m に求める.
    //!   \param m 回転の変換行列を格納する GgMatrix 型の変数.
    void getMatrix(GgMatrix &m) const
    {
      getMatrix(m.array);
    }

    //! \brief 四元数が表す回転の変換行列を取り出す.
    //!   \return 回転の変換を表す GgMatrix 型の変換行列.
    GgMatrix getMatrix() const
    {
      GgMatrix m;
      getMatrix(m);
      return m;
    }

    //! \brief 四元数の共役が表す回転の変換行列を a に求める.
    //!   \param a 回転の変換行列を格納する GLfloat 型の 16 要素の配列.
    void getConjugateMatrix(GLfloat *a) const
    {
      GgQuaternion c;
      c.loadConjugate(*this);
      toMatrix(a, c.array);
    }

    //! \brief 四元数の共役が表す回転の変換行列を m に求める.
    //!   \param m 回転の変換行列を格納する GgMatrix 型の変数.
    void getConjugateMatrix(GgMatrix &m) const
    {
      getConjugateMatrix(m.array);
    }

    //! \brief 四元数の共役が表す回転の変換行列を取り出す.
    //!   \return 回転の変換を表す GgMatrix 型の変換行列.
    GgMatrix getConjugateMatrix() const
    {
      GgMatrix m;
      getConjugateMatrix(m);
      return m;
    }
  };

  //! \brief 四元数を返す
  //!   \param x 四元数の x 要素.
  //!   \param y 四元数の y 要素.
  //!   \param z 四元数の z 要素.
  //!   \param w 四元数の w 要素.
  //! \return 四元数.
  inline GgQuaternion ggQuaternion(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    GgQuaternion q;
    return q.load(x, y, z, w);
  }

  //! \brief 四元数を返す
  //!   \param a GLfloat 型の GLfloat 型の 4 要素の配列に格納した四元数.
  //!   \return 四元数.
  inline GgQuaternion ggQuaternion(const GLfloat *a)
  {
    return ggQuaternion(a[0], a[1], a[2], a[3]);
  }

  //! \brief 単位四元数を返す
  //! \return 単位四元数.
  inline GgQuaternion ggIdentityQuaternion()
  {
    GgQuaternion q;
    return q.loadIdentity();
  }

  //! \brief 回転の変換行列 m を表す四元数を返す.
  //!   \param m GLfloat 型の 16 要素の配列.
  //!   \return m による回転の変換に相当する四元数.
  inline GgQuaternion ggMatrixQuaternion(const GLfloat *a)
  {
    GgQuaternion q;
    return q.loadMatrix(a);
  }

  //! \brief 回転の変換行列 m を表す四元数を返す.
  //!   \param m GgMatrix 型の変換行列.
  //!   \return m による回転の変換に相当する四元数.
  inline GgQuaternion ggMatrixQuaternion(const GgMatrix &m)
  {
    return ggMatrixQuaternion(m.get());
  }

  //! \brief 四元数 q の回転の変換行列を返す.
  //!   \param q 元の四元数.
  //!   \return 四元数 q が表す回転に相当する GgMatrix 型の変換行列.
  inline GgMatrix ggQuaternionMatrix(const GgQuaternion &q)
  {
    GLfloat m[16];
    q.getMatrix(m);
    GgMatrix t;
    return t.load(m);
  }

  //! \brief 四元数 q の回転の転置した変換行列を返す.
  //!   \param q 元の四元数.
  //!   \return 四元数 q が表す回転に相当する転置した GgMatrix 型の変換行列.
  inline GgMatrix ggQuaternionTransposeMatrix(const GgQuaternion &q)
  {
    GLfloat m[16];
    q.getMatrix(m);
    GgMatrix t;
    return t.loadTranspose(m);
  }

  //! \brief (x, y, z) を軸として角度 a 回転する四元数を返す.
  //!   \param x 軸ベクトルの x 成分.
  //!   \param y 軸ベクトルの y 成分.
  //!   \param z 軸ベクトルの z 成分.
  //!   \param a 回転角.
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggRotateQuaternion(GLfloat x, GLfloat y, GLfloat z, GLfloat a)
  {
    GgQuaternion q;
    return q.loadRotate(x, y, z, a);
  }

  //! \brief (v[0], v[1], v[2]) を軸として角度 a 回転する四元数を返す.
  //!   \param v 軸ベクトルを表す GLfloat 型の 3 要素の配列.
  //!   \param a 回転角.
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggRotateQuaternion(const GLfloat *v, GLfloat a)
  {
    return ggRotateQuaternion(v[0], v[1], v[2], a);
  }

  //! \brief (v[0], v[1], v[2]) を軸として角度 v[3] 回転する四元数を返す.
  //!   \param v 軸ベクトルを表す GLfloat 型の 4 要素の配列.
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggRotateQuaternion(const GLfloat *v)
  {
    return ggRotateQuaternion(v[0], v[1], v[2], v[3]);
  }

  //! \brief オイラー角 (heading, pitch, roll) で与えられた回転を表す四元数を返す.
  //!   \param heading y 軸中心の回転角.
  //!   \param pitch x 軸中心の回転角.
  //!   \param roll z 軸中心の回転角.
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggEulerQuaternion(GLfloat heading, GLfloat pitch, GLfloat roll)
  {
    GgQuaternion q;
    return q.loadEuler(heading, pitch, roll);
  }

  //! \brief オイラー角 (e[0], e[1], e[2]) で与えられた回転を表す四元数を返す.
  //!   \param e オイラー角を表す GLfloat 型の 3 要素の配列 (heading, pitch, roll).
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggEulerQuaternion(const GLfloat *e)
  {
    return ggEulerQuaternion(e[0], e[1], e[2]);
  }

  //! \brief 二つの四元数の球面線形補間の結果を返す.
  //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
  //!   \param b 四元数を格納した GLfloat 型の 4 要素の配列.
  //!   \param t 補間パラメータ.
  //!   \return a, b を t で内分した四元数.
  inline GgQuaternion ggSlerp(const GLfloat *a, const GLfloat *b, GLfloat t)
  {
    GgQuaternion r;
    return r.loadSlerp(a, b, t);
  }

  //! \brief 二つの四元数の球面線形補間の結果を返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \param r GgQuaternion 型の四元数.
  //!   \param t 補間パラメータ.
  //!   \return q, r を t で内分した四元数.
  inline GgQuaternion ggSlerp(const GgQuaternion &q, const GgQuaternion &r, GLfloat t)
  {
    return ggSlerp(q.get(), r.get(), t);
  }

  //! \brief 二つの四元数の球面線形補間の結果を返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
  //!   \param t 補間パラメータ.
  //!   \return q, a を t で内分した四元数.
  inline GgQuaternion ggSlerp(const GgQuaternion &q, const GLfloat *a, GLfloat t)
  {
    return ggSlerp(q.get(), a, t);
  }

  //! \brief 二つの四元数の球面線形補間の結果を返す.
  //!   \param a 四元数を格納した GLfloat 型の 4 要素の配列.
  //!   \param q GgQuaternion 型の四元数.
  //!   \param t 補間パラメータ.
  //!   \return a, q を t で内分した四元数.
  inline GgQuaternion ggSlerp(const GLfloat *a, const GgQuaternion &q, GLfloat t)
  {
    return ggSlerp(a, q.get(), t);
  }

  //! \brief 四元数のノルムを返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \return 四元数 q のノルム.
  inline GLfloat ggNorm(const GgQuaternion &q)
  {
    return q.norm();
  }

  //! \brief 正規化した四元数を返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \return 四元数 q を正規化した四元数.
  inline GgQuaternion ggNormalize(const GgQuaternion &q)
  {
    return q.normalize();
  }

  //! \brief 共役四元数を返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \return 四元数 q の共役四元数.
  inline GgQuaternion ggConjugate(const GgQuaternion &q)
  {
    return q.conjugate();
  }

  //! \brief 四元数の逆元を求める.
  //!   \param q GgQuaternion 型の四元数.
  //!   \return 四元数 q の逆元.
  inline GgQuaternion ggInvert(const GgQuaternion &q)
  {
    return q.invert();
  }

  /*!
  ** \brief 簡易トラックボール処理.
  */
  class GgTrackball
  {
    float cx, cy;                           // ドラッグ開始位置
    bool drag;                              // ドラッグ中か否か
    float sx, sy;                           // マウスの絶対位置→ウィンドウ内での相対位置の換算係数
    GgQuaternion cq;                        // 回転の初期値 (四元数)
    GgQuaternion tq;                        // ドラッグ中の回転 (四元数)
    GgMatrix rt;                            // 回転の変換行列

  public:

    //! \brief デストラクタ.
    virtual ~GgTrackball() {}

    //! \brief コンストラクタ.
    GgTrackball()
    {
      reset();
    }

    //! \brief トラックボール処理するマウスの移動範囲を指定する.
    //!   \brief ウィンドウのリサイズ時に呼び出す.
    //!   \param w 領域の幅.
    //!   \param h 領域の高さ.
    void region(float w, float h);

    //! \brief トラックボール処理するマウスの移動範囲を指定する.
    //!   \brief ウィンドウのリサイズ時に呼び出す.
    //!   \param w 領域の幅.
    //!   \param h 領域の高さ.
    void region(int w, int h)
    {
      region(static_cast<float>(w), static_cast<float>(h));
    }

    //! \brief トラックボール処理を開始する.
    //!   \brief マウスのドラッグ開始時 (マウスボタンを押したとき) に呼び出す.
    //!   \param x 現在のマウスの x 座標.
    //!   \param y 現在のマウスの y 座標.
    void start(float x, float y);

    //! \brief 回転の変換行列を計算する.
    //!   \brief マウスのドラッグ中に呼び出す.
    //!   \param x 現在のマウスの x 座標.
    //!   \param y 現在のマウスの y 座標.
    void motion(float x, float y);

    //! \brief トラックボールの回転角を修正する.
    //!   \param q 修正分の回転角の四元数.
    void rotate(const GgQuaternion &q);

    //! \brief トラックボール処理を停止する.
    //!   \brief マウスのドラッグ終了時 (マウスボタンを離したとき) に呼び出す.
    //!   \param x 現在のマウスの x 座標.
    //!   \param y 現在のマウスの y 座標.
    void stop(float x, float y);

    //! \brief トラックボールをリセットする
    void reset();

    //! \brief 現在の回転の変換行列を取り出す.
    //!   \return 回転の変換を表す GLfloat 型の 16 要素の配列.
    const GLfloat *get() const
    {
      return rt.get();
    }

    //! \brief 現在の回転の変換行列を取り出す.
    //!   \return 回転の変換を表す GgMatrix 型の変換行列.
    const GgMatrix &getMatrix() const
    {
      return rt;
    }

    //! \brief 現在の回転の四元数を取り出す.
    //!   \return 回転の変換を表す Quaternion 型の四元数.
    const GgQuaternion &getQuaternion() const
    {
      return tq;
    }
  };

  /*!
  ** \brief 参照カウンタ.
  **
  **   複数の属性データ間で共有されるリソースの確保と解放を管理する
  */
  class GgCounter
  {
    // 参照カウント
    unsigned int count;

    // デストラクタ
    ~GgCounter() {}

    // コンストラクタ
    GgCounter()
      : count(1) {}

    // 参照カウントを属性データクラスから直接操作できるようにする
    friend class GgAttribute;
  };

  /*!
  ** \brief 属性データ.
  **
  **   テクスチャとシェーダの基底クラス.
  **   インスタンスは複数のオブジェクトから参照されることを想定する.
  **   そのためこのクラスでは参照カウントを管理する.
  */
  class GgAttribute
  {
    // 参照カウンタ
    GgCounter *ref;

  protected:

    //! \brief 唯一のオブジェクトかどうか調べる.
    //!   \return 唯一のオブジェクトなら真.
    bool unique() const
    {
      return ref->count == 1;
    }

    //! \brief 参照カウンタの新規作成.
    //!   \return 唯一のオブジェクトなら真.
    bool reset()
    {
      // 唯一のオブジェクトかどうか調べる
      bool status(--ref->count == 0);

      // 元の参照カウンタの管理対象から外す
      if (status) delete ref;

      // 新しい参照カウンタを作成して, それに付け替える
      ref = new GgCounter;

      // 元のオブジェクトの状態を返す
      return status;
    }

  public:

    //! \brief デストラクタ.
    virtual ~GgAttribute()
    {
      // 参照カウンタを減じて 0 になったら参照カウンタを削除する
      if (--ref->count == 0) delete ref;
    }

    //! \brief コンストラクタ.
    GgAttribute()
      : ref(new GgCounter) {}

    //! \brief コピーコンストラクタ.
    GgAttribute(const GgAttribute &o)
      : ref(o.ref)
    {
      ++ref->count;
    }

    // 代入
    GgAttribute &operator=(const GgAttribute &o)
    {
      if (&o != this) ++(ref = o.ref)->count;
      return *this;
    }
  };

  /*!
  ** \brief テクスチャ.
  **
  **   カラー画像を読み込んでテクスチャマップを作成する.
  */
  class GgTexture
    : public GgAttribute
  {
    // テクスチャ名
    GLuint texture;

  public:

    //! \brief デストラクタ.
    virtual ~GgTexture()
    {
      // 参照しているオブジェクトが一つだけならテクスチャを削除する
      if (unique())
      {
        glBindTexture(GL_TEXTURE_2D, 0);
        glDeleteTextures(1, &texture);
      }
    }

    //! \brief コンストラクタ.
    GgTexture()
    {
      glGenTextures(1, &texture);
    }

    //! \brief コンストラクタ.
    GgTexture(GLuint tex)
      : texture(tex) {}

    //! \brief コンストラクタ.
    //!   \param width テクスチャの幅.
    //!   \param height テクスチャの高さ.
    //!   \param internal テクスチャの内部フォーマット.
    //!   \param format 読み込むテクスチャのフォーマット.
    //!   \param image テクスチャとして用いる画像データ (0 ならデータを読み込まずテクスチャメモリの確保だけを行う)
    GgTexture(GLsizei width, GLsizei height, GLenum internal = GL_RGBA, GLenum format = GL_RGBA,
      const GLvoid *image = NULL)
      : texture(ggLoadTexture(width, height, internal, format, image)) {}

    //! \brief コンストラクタ.
    //!   \param name テクスチャメモリに読み込む TGA フォーマットの画像ファイル名.
    //!   \param internal テクスチャの内部フォーマット.
    GgTexture(const char *name, GLenum internal = GL_RGBA)
      : texture(ggLoadImage(name, internal)) {}

    // コピーコンストラクタ.
    GgTexture(const GgTexture &o)
      : GgAttribute(o), texture(o.texture) {}

    // 代入
    GgTexture &operator=(const GgTexture &o)
    {
      if (&o != this)
      {
        GgAttribute::operator=(o);
        texture = o.texture;
      }
      return *this;
    }

    //! \brief テクスチャの使用開始 (このテクスチャを使用する際に呼び出す).
    void use() const
    {
      glBindTexture(GL_TEXTURE_2D, texture);
    }

    //! \brief テクスチャの使用終了 (このテクスチャを使用しなくなったら呼び出す).
    void unuse() const
    {
      glBindTexture(GL_TEXTURE_2D, 0);
    }

    //! \brief 使用しているテクスチャのテクスチャ名を得る.
    //!   \return テクスチャ名.
    GLuint get() const
    {
      return texture;
    }
  };

  /*!
  ** \brief 法線マップ.
  **
  **   高さマップ（グレイスケール画像）を読み込んで法線マップを作成する.
  */
  class GgNormalTexture
    : public GgTexture
  {
  public:

    //! \brief デストラクタ.
    virtual ~GgNormalTexture() {}

    //! \brief コンストラクタ.
    GgNormalTexture() {}

    //! \brief コンストラクタ.
    //!   \param name 画像ファイル名 (1 チャネルの TGA 画像).
    //!   \param nz 法線マップの z 成分の値.
    GgNormalTexture(const char *name, float nz = 1.0f)
      : GgTexture(ggLoadHeight(name, nz)) {}

    //! \brief コピーコンストラクタ.
    GgNormalTexture(const GgNormalTexture &o)
      : GgTexture(o) {}

    // 代入
    GgNormalTexture &operator=(const GgNormalTexture &o)
    {
      GgTexture::operator=(o);
      return *this;
    }
  };

  /*!
  ** \brief バッファオブジェクト.
  **
  **   頂点／インデックスを格納する頂点バッファオブジェクトの基底クラス.
  */
  template <typename T>
  class GgBuffer
    : public GgAttribute
  {
    // バッファオブジェクト
    GLuint buffer;

    // ターゲット
    GLenum target;

    // データ数
    GLuint number;

  public:

    //! \brief デストラクタ.
    virtual ~GgBuffer<T>()
    {
      // 参照しているオブジェクトが一つだけならバッファを削除する
      if (unique())
      {
        glBindBuffer(target, 0);
        glDeleteBuffers(1, &buffer);
      }
    }

    //! \brief コンストラクタ.
    GgBuffer<T>()
      : number(0)
    {
      glGenBuffers(1, &buffer);
    }

    //! \brief コンストラクタ.
    //!   \param target バッファオブジェクトのターゲット.
    //!   \param number データの数.
    //!   \param data データが格納されている領域の先頭のポインタ (NULL ならデータを転送しない).
    //!   \param usage バッファオブジェクトの使い方.
    GgBuffer<T>(GLenum target, GLuint number, const T *data, GLenum usage = GL_STATIC_DRAW)
    {
      glGenBuffers(1, &buffer);
      load(target, number, data, usage);
    }

    //! \brief コピーコンストラクタ.
    GgBuffer<T>(const GgBuffer<T> &o)
      : GgAttribute(o), buffer(o.buffer), target(o.target), number(o.number) {}

    // 代入
    GgBuffer<T> &operator=(const GgBuffer<T> &o)
    {
      if (&o != this)
      {
        GgAttribute::operator=(o);
        buffer = o.buffer;
        target = o.target;
        number = o.number;
      }
      return *this;
    }

    //! \brief すでに確保したバッファオブジェクトにデータを転送する.
    //!   \param number 転送するデータの数 (0 ならバッファ全体).
    //!   \param data 転送元のデータが格納されてている領域の先頭のポインタ.
    //!   \param offset 転送先のバッファオブジェクトの先頭の要素番号.
    void send(GLuint number, const T *data, GLuint offset = 0)
    {
      if (number == 0) number = this->number;
      glBufferSubData(target, offset * sizeof (T), number * sizeof (T), data);
    }

    //! \brief バッファオブジェクトを確保してデータを格納する.
    //!   \param target バッファオブジェクトのターゲット.
    //!   \param number データの数.
    //!   \param data データが格納されている領域の先頭のポインタ.
    //!   \param usage バッファオブジェクトの使い方.
    void load(GLenum target, GLuint number, const T *data, GLenum usage = GL_STATIC_DRAW)
    {
      this->target = target;
      this->number = number;
      glBindBuffer(target, buffer);
      glBufferData(target, number * sizeof (T), data, usage);
    }

    //! \brief 別のバッファオブジェクトからデータを複写する.
    //!   \param buf コピー元のバッファオブジェクト名.
    void copy(GLuint buf)
    {
      glBindBuffer(GL_COPY_READ_BUFFER, buf);
      glBindBuffer(GL_COPY_WRITE_BUFFER, buffer);
      glCopyBufferSubData(GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, 0, 0, number * sizeof (T));
      glBindBuffer(GL_COPY_WRITE_BUFFER, 0);
      glBindBuffer(GL_COPY_READ_BUFFER, 0);
    }

    //! \brief バッファオブジェクト名を取り出す.
    //!   \return バッファオブジェクト名.
    GLuint buf() const
    {
      return buffer;
    }

    //! \brief バッファオブジェクトが保持するデータの数を取り出す.
    //!   \return 保持するデータの数.
    GLuint num() const
    {
      return number;
    }
  };

  /*!
  ** \brief 形状データの基底クラス.
  **
  **   形状データのクラスはこのクラスを派生して作る.
  **   基本図形の種類と頂点配列オブジェクトを保持する.
  */
  class GgShape
  {
    // 頂点配列オブジェクト
    GLuint vao;

    // 基本図形の種類
    GLenum mode;

  public:

    //! \brief デストラクタ.
    virtual ~GgShape()
    {
      glBindVertexArray(0);
      glDeleteVertexArrays(1, &vao);
    }

    //! \brief コンストラクタ.
    //!   \param mode 基本図形の種類.
    GgShape(GLenum mode = 0)
    {
      this->mode = mode;
      glGenVertexArrays(1, &vao);
      glBindVertexArray(vao);
    }

    //! \brief コピーコンストラクタ.
    GgShape(const GgShape &o)
      : vao(o.vao), mode(o.mode)
    {
      glBindVertexArray(vao);
    }

    // 代入演算子
    GgShape &operator=(const GgShape &o)
    {
      if (this != &o)
      {
        vao = o.vao;
        mode = o.mode;
        glBindVertexArray(vao);
      }
      return *this;
    }

    //! \brief この図形の頂点配列オブジェクトを指定する.
    void use() const
    {
      glBindVertexArray(vao);
    }

    //! \brief 頂点配列オブジェクト名を取り出す.
    //!   \return 頂点配列オブジェクト名.
    GLuint get() const
    {
      return vao;
    }

    //! \brief 基本図形の設定.
    //!   \param mode 基本図形の種類.
    void setMode(GLenum mode)
    {
      this->mode = mode;
    }

    //! \brief 基本図形の検査.
    //!   \return この頂点配列オブジェクトの基本図形の種類.
    GLenum getMode() const
    {
      return this->mode;
    }

    //! \brief 図形の描画.
    //!   \brief この形状を描画する手続きをオーバーライドする.
    virtual void draw(GLint first = 0, GLsizei count = 0) const = 0;
  };

  /*!
  ** \brief ポイント.
  */
  class GgPoints
    : public GgShape
  {
    // 頂点バッファオブジェクト
    GgBuffer<GLfloat[3]> position;

    // バッファオブジェクトを確保して頂点位置を格納する
    //!   \param nv 頂点数
    //!   \param pos 頂点位置のデータ
    //!   \param usage バッファオブジェクトの使い方
    void loadPosition(GLuint nv, const GLfloat (*pos)[3], GLenum usage)
    {
      // 頂点位置
      position.load(GL_ARRAY_BUFFER, nv, pos, usage);

      // このバッファオブジェクトは index == 0 の in 変数から入力する
      glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
      glEnableVertexAttribArray(0);
    }

  public:

    //! \brief デストラクタ.
    virtual ~GgPoints() {}

    //! \brief コンストラクタ.
    GgPoints(GLenum mode = GL_POINTS)
      : GgShape(mode) {}

    //! \brief コンストラクタ.
    //!   \param nv 頂点数.
    //!   \param pos この図形の頂点の位置のデータの配列 (NULL ならデータを転送しない).
    //!   \param mode 描画する基本図形の種類.
    //!   \param usage バッファオブジェクトの使い方.
    GgPoints(GLuint nv, const GLfloat (*pos)[3], GLenum mode = GL_POINTS, GLenum usage = GL_STATIC_DRAW)
      : GgShape(mode)
    {
      loadPosition(nv, pos, usage);
    }

    //! \brief コピーコンストラクタ.
    GgPoints(const GgPoints &o)
      : GgShape(o), position(o.position) {}

    // 代入
    GgPoints &operator=(const GgPoints &o)
    {
      if (&o != this)
      {
        GgShape::operator=(o);
        position = o.position;
      }
      return *this;
    }

    //! \brief 既存のバッファオブジェクトに頂点の位置データを転送する.
    //!   \param nv 転送する頂点の位置データの数 (0 ならバッファ全体).
    //!   \param pos 転送元の頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param offset 転送先のバッファオブジェクトの先頭の要素番号.
    void send(GLuint nv, const GLfloat (*pos)[3], GLuint offset = 0)
    {
      position.send(nv, pos, offset);
    }

    //! \brief バッファオブジェクトを確保して頂点の位置データを格納する.
    //!   \param nv 頂点のデータの数 (頂点数).
    //!   \param pos 頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param usage バッファオブジェクトの使い方.
    void load(GLuint nv, const GLfloat (*pos)[3], GLenum usage = GL_STATIC_DRAW)
    {
      loadPosition(nv, pos, usage);
    }

    //! \brief 頂点の位置データを格納した頂点バッファオブジェクト名を取り出す.
    //!   \return この図形の頂点の位置データを格納した頂点バッファオブジェクト名.
    GLuint pbuf() const
    {
      return position.buf();
    }

    //! \brief データの数を取り出す.
    //!   \return この図形の頂点の位置データの数 (頂点数).
    GLuint pnum() const
    {
      return position.num();
    }

    //! \brief ポイントの描画.
    virtual void draw(GLint first = 0, GLsizei count = 0) const;
  };

  /*!
  ** \brief 三角形で表した形状データ (Arrays 形式).
  */
  class GgTriangles
    : public GgPoints
  {
    // 頂点の法線ベクトル
    GgBuffer<GLfloat[3]> normal;

    // バッファオブジェクトを確保して法線を格納する
    //!   \param nv 頂点数
    //!   \param norm 頂点の法線データ
    //!   \param usage バッファオブジェクトの使い方
    void loadNormal(GLuint nv, const GLfloat (*norm)[3], GLenum usage)
    {
      // 頂点法線
      normal.load(GL_ARRAY_BUFFER, nv, norm, usage);

      // このバッファオブジェクトは index == 1 の in 変数から入力する
      glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
      glEnableVertexAttribArray(1);
    }

  public:

    //! \brief デストラクタ.
    virtual ~GgTriangles() {}

    //! \brief コンストラクタ
    //!   \param mode 描画する基本図形の種類.
    GgTriangles(GLenum mode = GL_TRIANGLES)
      : GgPoints(mode) {}

    //! \brief コンストラクタ.
    //!   \param nv 頂点数.
    //!   \param pos この図形の頂点の位置のデータの配列 (NULL ならデータを転送しない).
    //!   \param norm この図形の頂点の法線のデータの配列 (NULL ならデータを転送しない).
    //!   \param mode 描画する基本図形の種類.
    //!   \param usage バッファオブジェクトの使い方.
    GgTriangles(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3],
      GLenum mode = GL_TRIANGLES, GLenum usage = GL_STATIC_DRAW)
      : GgPoints(nv, pos, mode, usage)
    {
      loadNormal(nv, norm, usage);
    }

    //! \brief コピーコンストラクタ.
    GgTriangles(const GgTriangles &o)
      : GgPoints(o), normal(o.normal) {}

    // 代入
    GgTriangles &operator=(const GgTriangles &o)
    {
      if (&o != this)
      {
        GgPoints::operator=(o);
        normal = o.normal;
      }
      return *this;
    }

    //! \brief 既存のバッファオブジェクトに頂点の位置データと法線データを転送する.
    //!   \param nv 転送する頂点の位置データの数 (0 ならバッファ全体).
    //!   \param pos 転送元の頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param norm 転送元の頂点の法線データが格納されてている領域の先頭のポインタ.
    //!   \param offset 転送先のバッファオブジェクトの先頭の要素番号.
    void send(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3], GLuint offset = 0)
    {
      GgPoints::send(nv, pos, offset);
      normal.send(nv, norm, offset);
    }

    //! \brief バッファオブジェクトを確保して頂点の位置データと法線データを格納する.
    //!   \param nv 頂点のデータの数 (頂点数).
    //!   \param pos 頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param norm 頂点の法線データが格納されてている領域の先頭のポインタ.
    //!   \param usage バッファオブジェクトの使い方.
    void load(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3], GLenum usage = GL_STATIC_DRAW)
    {
      GgPoints::load(nv, pos, usage);
      loadNormal(nv, norm, usage);
    }

    //! \brief 頂点の位置データを格納した頂点バッファオブジェクト名を取り出す.
    //!   \return この図形の頂点の法線のデータを格納した頂点バッファオブジェクト名.
    GLuint nbuf() const
    {
      return normal.buf();
    }

    //! \brief データの数を取り出す.
    //!   \return この図形の頂点の法線データの数 (頂点数).
    GLuint nnum() const
    {
      return normal.num();
    }
  };

  /*!
  ** \brief 三角形で表した形状データ (Elements 形式).
  */
  class GgElements
    : public GgTriangles
  {
    // インデックスを格納する頂点バッファオブジェクト
    GgBuffer<GLuint[3]> index;

  public:

    //! \brief デストラクタ.
    virtual ~GgElements() {}

    //! \brief コンストラクタ.
    //!   \param mode 描画する基本図形の種類.
    GgElements(GLenum mode = GL_TRIANGLES)
      : GgTriangles(mode) {}

    //! \brief コンストラクタ.
    //!   \param nv 頂点数.
    //!   \param pos この図形の頂点の位置のデータの配列 (NULL ならデータを転送しない).
    //!   \param norm この図形の頂点の法線のデータの配列 (NULL ならデータを転送しない).
    //!   \param nf 三角形数.
    //!   \param face 三角形の頂点インデックス.
    //!   \param mode 描画する基本図形の種類.
    //!   \param usage バッファオブジェクトの使い方.
    GgElements(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3],
      GLuint nf, const GLuint (*face)[3], GLenum mode = GL_TRIANGLES, GLenum usage = GL_STATIC_DRAW)
      : GgTriangles(nv, pos, norm, mode, usage)
    {
      index.load(GL_ELEMENT_ARRAY_BUFFER, nf, face);
    }

    //! \brief コピーコンストラクタ.
    GgElements(const GgElements &o)
      : GgTriangles(o), index(o.index) {}

    // 代入
    GgElements &operator=(const GgElements &o)
    {
      if (&o != this)
      {
        GgTriangles::operator=(o);
        index = o.index;
      }
      return *this;
    }

    //! \brief 既存のバッファオブジェクトに三角形の頂点インデックスデータを転送する.
    //!   \param nf 三角形数.
    //!   \param face 三角形の頂点インデックスデータ.
    //!   \param offset 転送先のバッファオブジェクトの先頭の要素番号.
    void send(GLuint nf, const GLuint (*face)[3], GLuint offset = 0)
    {
      index.send(nf, face, offset);
    }

    //! \brief バッファオブジェクトを確保して頂点の位置データと法線データと三角形の頂点インデックスデータを格納する.
    //!   \param nv 頂点のデータの数 (頂点数).
    //!   \param pos 頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param norm 頂点の法線データが格納されてている領域の先頭のポインタ.
    //!   \param nf 三角形数.
    //!   \param face 三角形の頂点インデックスデータ.
    //!   \param usage バッファオブジェクトの使い方.
    void load(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3],
      GLuint nf, const GLuint (*face)[3], GLenum usage = GL_STATIC_DRAW)
    {
      GgTriangles::load(nv, pos, norm, usage);
      index.load(GL_ELEMENT_ARRAY_BUFFER, nf, face);
    }

    //! \brief 三角形の頂点インデックスデータを格納した頂点バッファオブジェクト名を取り出す.
    //!   \return この図形の三角形の頂点インデックスデータを格納した頂点バッファオブジェクト名.
    GLuint fbuf() const
    {
      return index.buf();
    }

    //! \brief データの数を取り出す.
    //!   \return この図形の三角形数.
    GLuint fnum() const
    {
      return index.num();
    }

    //! \brief 三角形を描画する手続き.
    virtual void draw(GLint first = 0, GLsizei count = 0) const;
  };

  /*!
  ** \brief 点群を立方体状に生成する.
  **
  **    \param nv 生成する点の数.
  **    \param length 点群を生成する立方体の一辺の長さ.
  **    \param cx 点群の中心の x 座標.
  **    \param cy 点群の中心の y 座標.
  **    \param cz 点群の中心の z 座標.
  */
  extern GgPoints *ggPointsCube(GLuint nv, GLfloat length = 1.0f,
    GLfloat cx = 0.0f, GLfloat cy = 0.0f, GLfloat cz = 0.0f);

  /*!
  ** \brief 点群を球状に生成する.
  **
  **   \param nv 生成する点の数.
  **   \param radius 点群を生成する半径.
  **   \param cx 点群の中心の x 座標.
  **   \param cy 点群の中心の y 座標.
  **   \param cz 点群の中心の z 座標.
  */
  extern GgPoints *ggPointsSphere(GLuint nv, GLfloat radius = 0.5f,
    GLfloat cx = 0.0f, GLfloat cy = 0.0f, GLfloat cz = 0.0f);

  /*!
  ** \brief 矩形状に 2 枚の三角形を生成する.
  **
  **   \param width 矩形の幅.
  **   \param height 矩形の高さ.
  */
  extern GgTriangles *ggRectangle(GLfloat width = 1.0f, GLfloat height = 1.0f);

  /*!
  ** \brief 楕円状に三角形を生成する.
  **
  **   \param width 楕円の幅.
  **   \param height 楕円の高さ.
  **   \param slices 楕円の分割数.
  */
  extern GgTriangles *ggEllipse(GLfloat width = 1.0f, GLfloat height = 1.0f,
    GLuint slices = 16);

  /*!
  ** \brief Wavefront OBJ ファイルを読み込む (Arrays 形式)
  **
  **   三角形分割された Wavefront OBJ ファイルを読み込んで
  **   GgArrays 形式の三角形データを生成する.
  **
  **   \param name ファイル名.
  **   \param normalize true なら大きさを正規化.
  */
  extern GgTriangles *ggArraysObj(const char *name, bool normalize = false);

  /*!
  ** \brief Wavefront OBJ ファイル を読み込む (Elements 形式).
  **
  **   三角形分割された Wavefront OBJ ファイル を読み込んで
  **   GgElements 形式の三角形データを生成する.
  **
  **   \param name ファイル名.
  **   \param normalize true なら大きさを正規化.
  */
  extern GgElements *ggElementsObj(const char *name, bool normalize = false);

  /*!
  ** \brief メッシュ形状を作成する (Elements 形式).
  **
  **   メッシュ状に GgElements 形式の三角形データを生成する.
  **
  **   \param slices メッシュの横方向の分割数.
  **   \param stacks メッシュの縦方向の分割数.
  **   \param pos メッシュの頂点の位置.
  **   \param norm メッシュの頂点の法線ベクトル.
  */
  extern GgElements *ggElementsMesh(int slices, int stacks,
    const GLfloat (*pos)[3], const GLfloat (*norm)[3] = NULL);

  /*!
  ** 球状に三角形データを生成する (Elements 形式).
  **
  **   球状に GgElements 形式の三角形データを生成する.
  **
  **   \param radius 球の半径.
  **   \param slices 球の経度方向の分割数.
  **   \param stacks 球の緯度方向の分割数.
  */
  extern GgElements *ggElementsSphere(GLfloat radius = 1.0f, int slices = 16, int stacks = 8);

  /*!
  ** \brief シェーダの基底クラス.
  **
  **   シェーダのクラスはこのクラスを派生して作る.
  */
  class GgShader
    : public GgAttribute
  {
    // プログラム名
    GLuint program;

  public:

    //! \brief デストラクタ.
    virtual ~GgShader()
    {
      // 参照しているオブジェクトが一つだけならシェーダを削除する
      if (program != 0 && unique())
      {
        glUseProgram(0);
        glDeleteProgram(program);
      }
    }

    //! \brief コンストラクタ.
    GgShader()
      : program(0) {}

    //! \brief コンストラクタ.
    //!   \param vert バーテックスシェーダのソースファイル名.
    //!   \param frag フラグメントシェーダのソースファイル名 (0 なら不使用).
    //!   \param geom ジオメトリシェーダのソースファイル名 (0 なら不使用).
    //!   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
    //!   \param varyings フィードバックする varying 変数のリスト.
    GgShader(const char *vert, const char *frag = 0, const char *geom = 0,
      int nvarying = 0, const char **varyings = 0)
      : program(ggLoadShader(vert, frag, geom, nvarying, varyings)) {}

    //! \brief コピーコンストラクタ.
    GgShader(const GgShader &o)
      : GgAttribute(o), program(o.program) {}

    // 代入
    GgShader &operator=(const GgShader &o)
    {
      if (&o != this)
      {
        GgAttribute::operator=(o);
        program = o.program;
      }
      return *this;
    }

    //! \brief 別のシェーダのプログラムオブジェクトを登録する.
    //!   \param newProgram 別に作成したシェーダのプログラム名.
    void setProgram(GLuint newProgram)
    {
      if (program != 0 && reset())
      {
        glUseProgram(0);
        glDeleteProgram(program);
      }
      program = newProgram;
    }

    //! \brief シェーダのソースプログラムを読み込んでプログラムオブジェクトをする.
    //!   \param vert バーテックスシェーダのソースファイル名.
    //!   \param frag フラグメントシェーダのソースファイル名 (0 なら不使用).
    //!   \param geom ジオメトリシェーダのソースファイル名 (0 なら不使用).
    //!   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
    //!   \param varyings フィードバックする varying 変数のリスト.
    void load(const char *vert, const char *frag = 0, const char *geom = 0,
      GLint nvarying = 0, const char **varyings = 0)
    {
      setProgram(ggLoadShader(vert, frag, geom, nvarying, varyings));
    }

    //! \brief シェーダプログラムの使用を開始する.
    void use() const
    {
      glUseProgram(program);
    }

    //! \brief シェーダプログラムの使用を終了する.
    void unuse() const
    {
      glUseProgram(0);
    }

    //! \brief シェーダのプログラム名を得る.
    //!   \return シェーダのプログラム名.
    GLuint get() const
    {
      return program;
    }
  };

  /*!
  ** \brief ポイントのシェーダ.
  */
  class GgPointShader
    : public GgShader
  {
    // 場所
    struct GgPointShaderLocations
    {
      GLint mp;         // 投影変換行列の uniform 変数の場所
      GLint mv;         // モデルビュー変換行列の uniform 変数の場所
    } loc;

  public:

    //! \brief デストラクタ.
    virtual ~GgPointShader() {}

    //! \brief コンストラクタ.
    GgPointShader() {}

    //! \brief コンストラクタ
    //!   \param vert バーテックスシェーダのソースファイル名.
    //!   \param frag フラグメントシェーダのソースファイル名 (0 なら不使用).
    //!   \param geom ジオメトリシェーダのソースファイル名 (0 なら不使用).
    //!   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
    //!   \param varyings フィードバックする varying 変数のリスト.
    GgPointShader(const char *vert, const char *frag = 0,
      const char *geom = 0, GLint nvarying = 0, const char **varyings = 0)
      : GgShader(vert, frag, geom, nvarying, varyings)
    {
      // プログラム名
      GLuint program = get();

      // 変換行列の uniform 変数の場所
      loc.mp = glGetUniformLocation(program, "mp");
      loc.mv = glGetUniformLocation(program, "mv");
    }

    //! \brief コピーコンストラクタ.
    GgPointShader(const GgPointShader &o)
      : GgShader(o), loc(o.loc) {}

    // 代入
    GgPointShader &operator=(const GgPointShader &o)
    {
      if (&o != this)
      {
        GgShader::operator=(o);
        loc = o.loc;
      }
      return *this;
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GgMatrix 型の投影変換行列.
    //!   \param mv GgMatrix 型のモデルビュー変換行列.
    virtual void loadMatrix(const GgMatrix &mp, const GgMatrix &mv) const
    {
      // 変換
      glUniformMatrix4fv(loc.mp, 1, GL_FALSE, mp.get());
      glUniformMatrix4fv(loc.mv, 1, GL_FALSE, mv.get());
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GLfloat 型の 16 要素の配列に格納された投影変換行列.
    //!   \param mv GLfloat 型の 16 要素の配列に格納されたモデルビュー変換行列.
    virtual void loadMatrix(const GLfloat *mp, const GLfloat *mv) const
    {
      loadMatrix(GgMatrix(mp), GgMatrix(mv));
    }
  };

  /*!
  ** \brief 三角形に単純な陰影付けを行うシェーダ.
  */
  class GgSimpleShader
    : public GgPointShader
  {
    // 場所
    struct GgSimpleShaderLocations
    {
      GLint lamb;       // 光源強度の環境光成分の uniform 変数の場所
      GLint ldiff;      // 光源強度の拡散反射光成分の uniform 変数の場所
      GLint lspec;      // 光源強度の鏡面反射光成分の uniform 変数の場所
      GLint lpos;       // 光源位置の uniform 変数の場所
      GLint kamb;       // 環境光の反射係数の uniform 変数の場所
      GLint kdiff;      // 拡散反射係数の uniform 変数の場所
      GLint kspec;      // 鏡面反射係数の uniform 変数の場所
      GLint kshi;       // 輝き係数の uniform 変数の場所
      GLint mn;         // モデルビュー変換の法線変換行列の uniform 変数の場所
    } loc;

  public:

    //! \brief デストラクタ.
    virtual ~GgSimpleShader() {}

    //! \brief コンストラクタ.
    GgSimpleShader() {}

    //! \brief コンストラクタ
    //!   \param vert バーテックスシェーダのソースファイル名.
    //!   \param frag フラグメントシェーダのソースファイル名 (0 なら不使用).
    //!   \param geom ジオメトリシェーダのソースファイル名 (0 なら不使用).
    //!   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
    //!   \param varyings フィードバックする varying 変数のリスト.
    GgSimpleShader(const char *vert, const char *frag = 0,
      const char *geom = 0, GLint nvarying = 0, const char **varyings = 0);

    //! \brief コピーコンストラクタ.
    GgSimpleShader(const GgSimpleShader &o)
      : GgPointShader(o), loc(o.loc) {}

    // 代入
    GgSimpleShader &operator=(const GgSimpleShader &o)
    {
      if (&o != this)
      {
        GgPointShader::operator=(o);
        loc = o.loc;
      }
      return *this;
    }

    //! \brief 環境光に対する反射係数を設定する.
    //!   \param r 環境光に対する反射係数の赤成分.
    //!   \param g 環境光に対する反射係数の緑成分.
    //!   \param b 環境光に対する反射係数の青成分.
    //!   \param a 環境光に対する反射係数の不透明度. デフォルトは 1.
    void loadMaterialAmbient(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f) const
    {
      glUniform4f(loc.kamb, r, g, b, a);
    }

    //! \brief 環境光に対する反射係数を設定する.
    //!   \param amb 環境光に対する反射係数を格納した GLfloat 型の 4 要素の配列.
    void loadMaterialAmbient(const GLfloat *amb) const
    {
      glUniform4fv(loc.kamb, 1, amb);
    }

    //! \brief 拡散反射係数を設定する.
    //!   \param r 拡散反射係数の赤成分.
    //!   \param g 拡散反射係数の緑成分.
    //!   \param b 拡散反射係数の青成分.
    //!   \param a 拡散反射係数の不透明度. デフォルトは 1.
    void loadMaterialDiffuse(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f) const
    {
      glUniform4f(loc.kdiff, r, g, b, a);
    }

    //! \brief 拡散反射係数を設定する.
    //!   \param diff 拡散反射係数を格納した GLfloat 型の 4 要素の配列.
    void loadMaterialDiffuse(const GLfloat *diff) const
    {
      glUniform4fv(loc.kdiff, 1, diff);
    }

    //! \brief 鏡面反射係数を設定する.
    //!   \param r 鏡面反射係数の赤成分.
    //!   \param g 鏡面反射係数の緑成分.
    //!   \param b 鏡面反射係数の青成分.
    //!   \param a 鏡面反射係数の不透明度. デフォルトは 1.
    void loadMaterialSpecular(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f) const
    {
      glUniform4f(loc.kspec, r, g, b, a);
    }

    //! \brief 鏡面反射係数を設定する.
    //!   \param spec 鏡面反射係数を格納した GLfloat 型の 4 要素の配列.
    void loadMaterialSpecular(const GLfloat *spec) const
    {
      glUniform4fv(loc.kspec, 1, spec);
    }

    //! \brief 輝き係数を設定する.
    //!   \param shi 輝き係数.
    void loadMaterialShininess(GLfloat shi) const
    {
      glUniform1f(loc.kshi, shi);
    }

    //! \brief 材質の特性
    struct Material
    {
      GLfloat ambient[4];
      GLfloat diffuse[4];
      GLfloat specular[4];
      GLfloat shininess;
    };

    //! \brief 材質の特性を設定する.
    //!   \param material 光源の特性の gg::GgSimpleShader::Material 構造体
    void loadMaterial(const Material &material) const
    {
      loadMaterialAmbient(material.ambient);
      loadMaterialDiffuse(material.diffuse);
      loadMaterialSpecular(material.specular);
      loadMaterialShininess(material.shininess);
    }

    //! \brief 光源の強度の環境光成分を設定する.
    //!   \param r 光源の強度の環境光成分の赤成分.
    //!   \param g 光源の強度の環境光成分の緑成分.
    //!   \param b 光源の強度の環境光成分の青成分.
    //!   \param a 光源の強度の環境光成分の不透明度. デフォルトは 1.
    void loadLightAmbient(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f) const
    {
      glUniform4f(loc.lamb, r, g, b, a);
    }

    //! \brief 光源の強度の環境光成分を設定する.
    //!   \param amb 光源の強度の環境光成分を格納した GLfloat 型の 4 要素の配列.
    void loadLightAmbient(const GLfloat *amb) const
    {
      glUniform4fv(loc.lamb, 1, amb);
    }

    //! \brief 光源の強度の拡散反射光成分を設定する.
    //!   \param r 光源の強度の拡散反射光成分の赤成分.
    //!   \param g 光源の強度の拡散反射光成分の緑成分.
    //!   \param b 光源の強度の拡散反射光成分の青成分.
    //!   \param a 光源の強度の拡散反射光成分の不透明度. デフォルトは 1.
    void loadLightDiffuse(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f) const
    {
      glUniform4f(loc.ldiff, r, g, b, a);
    }

    //! \brief 光源の強度の拡散反射光成分を設定する.
    //!   \param diff 光源の強度の拡散反射光成分を格納した GLfloat 型の 4 要素の配列.
    void loadLightDiffuse(const GLfloat *diff) const
    {
      glUniform4fv(loc.ldiff, 1, diff);
    }

    //! \brief 光源の強度の鏡面反射光成分を設定する.
    //!   \param r 光源の強度の鏡面反射光成分の赤成分.
    //!   \param g 光源の強度の鏡面反射光成分の緑成分.
    //!   \param b 光源の強度の鏡面反射光成分の青成分.
    //!   \param a 光源の強度の鏡面反射光成分の不透明度. デフォルトは 1.
    void loadLightSpecular(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f) const
    {
      glUniform4f(loc.lspec, r, g, b, a);
    }

    //! \brief 光源の強度の鏡面反射光成分を設定する.
    //!   \param spec 光源の強度の鏡面反射光成分を格納した GLfloat 型の 4 要素の配列.
    void loadLightSpecular(const GLfloat *spec) const
    {
      glUniform4fv(loc.lspec, 1, spec);
    }

    //! \brief 光源の位置を設定する.
    //!   \param x 光源の位置の x 座標.
    //!   \param y 光源の位置の y 座標.
    //!   \param z 光源の位置の z 座標.
    //!   \param w 光源の位置の w 座標. デフォルトは 1.
    void loadLightPosition(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f) const
    {
      glUniform4f(loc.lpos, x, y, z, w);
    }

    //! \brief 光源の位置を設定する.
    //!   \param pos 光源の位置の同次座標を格納した GLfloat 型の 4 要素の配列.
    void loadLightPosition(const GLfloat *pos) const
    {
      glUniform4fv(loc.lpos, 1, pos);
    }

    //! \brief 光源の特性
    struct Light
    {
      GLfloat ambient[4];
      GLfloat diffuse[4];
      GLfloat specular[4];
      GLfloat position[4];
    };

    //! \brief 光源の特性を設定する.
    //!   \param light 光源の特性の gg::GgSimpleShader::Light 構造体
    void loadLightMaterial(const Light &light) const
    {
      loadLightAmbient(light.ambient);
      loadLightDiffuse(light.diffuse);
      loadLightSpecular(light.specular);
    }

    //! \brief 光源の位置と特性を設定する.
    //!   \param light 光源の特性の gg::GgSimpleShader::Light 構造体
    void loadLight(const Light &light) const
    {
      loadLightMaterial(light);
      loadLightPosition(light.position);
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GgMatrix 型の投影変換行列.
    //!   \param mv GgMatrix 型のモデルビュー変換行列.
    //!   \param mn GgMatrix 型のモデルビュー変換行列の法線変換行列.
    virtual void loadMatrix(const GgMatrix &mp, const GgMatrix &mv, const GgMatrix &mn) const
    {
      GgPointShader::loadMatrix(mp, mv);
      glUniformMatrix4fv(loc.mn, 1, GL_FALSE, mn.get());
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GLfloat 型の 16 要素の配列に格納された投影変換行列.
    //!   \param mv GLfloat 型の 16 要素の配列に格納されたモデルビュー変換行列.
    //!   \param mv GLfloat 型の 16 要素の配列に格納されたモデルビュー変換行列の法線変換行列.
    virtual void loadMatrix(const GLfloat *mp, const GLfloat *mv, const GLfloat *mn) const
    {
      loadMatrix(GgMatrix(mp), GgMatrix(mv), GgMatrix(mn));
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GgMatrix 型の投影変換行列.
    //!   \param mv GgMatrix 型のモデルビュー変換行列.
    virtual void loadMatrix(const GgMatrix &mp, const GgMatrix &mv) const
    {
      loadMatrix(mp, mv, mv.normal());
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GLfloat 型の 16 要素の配列に格納された投影変換行列.
    //!   \param mv GLfloat 型の 16 要素の配列に格納されたモデルビュー変換行列.
    virtual void loadMatrix(const GLfloat *mp, const GLfloat *mv) const
    {
      loadMatrix(GgMatrix(mp), GgMatrix(mv));
    }

    //! \brief シェーダプログラムの使用を開始する.
    void use() const
    {
      // プログラムオブジェクトは基底クラスで指定する
      GgShader::use();
    }

    //! \brief 光源と変換行列を指定してシェーダプログラムの使用を開始する.
    //!   \param light 光源の特性の gg::GgSimpleShader::Light 構造体
    //!   \param mp GgMatrix 型の投影変換行列.
    //!   \param mv GgMatrix 型のモデルビュー変換行列.
    //!   \param mn GgMatrix 型のモデルビュー変換行列の法線変換行列.
    void use(const Light &light, const GgMatrix &mp, const GgMatrix &mv, const GgMatrix &mn) const
    {
      // プログラムオブジェクトは基底クラスで指定する
      GgShader::use();

      // 光源を設定する
      loadLight(light);

      // 変換行列を設定する
      loadMatrix(mp, mv, mn);
    }

    //! \brief 光源と変換行列を指定してシェーダプログラムの使用を開始する.
    //!   \param light 光源の特性の gg::GgSimpleShader::Light 構造体
    //!   \param mp GLfloat 型の 16 要素の配列に格納された投影変換行列.
    //!   \param mv GLfloat 型の 16 要素の配列に格納されたモデルビュー変換行列.
    //!   \param mv GLfloat 型の 16 要素の配列に格納されたモデルビュー変換行列の法線変換行列.
    void use(const Light &light, const GLfloat *mp, const GLfloat *mv, const GLfloat *mn) const
    {
      use(light, GgMatrix(mp), GgMatrix(mv), GgMatrix(mn));
    }

    //! \brief 光源と変換行列を指定してシェーダプログラムの使用を開始する.
    //!   \param light 光源の特性の gg::GgSimpleShader::Light 構造体
    //!   \param mp GgMatrix 型の投影変換行列.
    //!   \param mv GgMatrix 型のモデルビュー変換行列.
    void use(const Light &light, const GgMatrix &mp, const GgMatrix &mv) const
    {
      use(light, mp, mv, mv.normal());
    }

    //! \brief 光源と変換行列を指定してシェーダプログラムの使用を開始する.
    //!   \param light 光源の特性の gg::GgSimpleShader::Light 構造体
    //!   \param mp GLfloat 型の 16 要素の配列に格納された投影変換行列.
    //!   \param mv GLfloat 型の 16 要素の配列に格納されたモデルビュー変換行列.
    void use(const Light &light, const GLfloat *mp, const GLfloat *mv) const
    {
      use(light, GgMatrix(mp), GgMatrix(mv));
    }
  };

  /*!
  ** \brief Wavefront OBJ 形式のファイル.
  */
  class GgObj
  {
    GLuint ng;                              // 同じ材質を割り当てるポリゴングループ数
    GLuint (*group)[2];                     // 同じ材質を割り当てるポリゴングループの最初のポリゴンと数
    GLfloat (*amb)[4];                      // ポリゴングループごとの環境光に対する反射係数
    GLfloat (*diff)[4];                     // ポリゴングループごとの拡散反射係数
    GLfloat (*spec)[4];                     // ポリゴングループごとの鏡面反射係数
    GLfloat *shi;                           // ポリゴングループごとの輝き係数
    GgTriangles *data;                      // この図形の形状データ

  public:

    //! \brief デストラクタ.
    virtual ~GgObj();

    //! \brief コンストラクタ.
    GgObj(const char *name, bool normalize = false);

    //! \brief 形状データの取り出し.
    //!   \return GgTriangles 型の形状データのポインタ.
    const GgTriangles *get() const
    {
      return data;
    }

    //! \brief Wavefront OBJ 形式のデータを描画する手続き.
    //!   \param shader GgSimpleShader 型のシェーダのオブジェクトのポインタ.
    //!   \param first 描画する最初のパーツ番号.
    //!   \param count 描画するパーツの数.
    virtual void draw(const GgSimpleShader *shader = NULL, GLint first = 0, GLsizei count = 0) const;

    //! \brief Wavefront OBJ 形式のデータを描画する手続き.
    //!   \param shader GgSimpleShader 型のシェーダのオブジェクト.
    //!   \param first 描画する最初のパーツ番号.
    //!   \param count 描画するパーツの数.
    virtual void draw(const GgSimpleShader &shader, GLint first = 0, GLsizei count = 0) const
    {
      draw(&shader, first, count);
    }
  };
}
